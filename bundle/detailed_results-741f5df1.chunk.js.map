{"version":3,"file":"detailed_results-741f5df1.chunk.js","sources":["../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/proto/apl.ts","../../../ui/core/proto/deathknight.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/api.ts","../../../ui/core/proto/ui.ts","../../../ui/core/constants/other.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/constants/lang.ts","../../../ui/core/proto_utils/action_id.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/gear.ts","../../../ui/core/proto_utils/database.ts","../../../ui/core/proto_utils/logs_parser.ts","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/typed_event.ts","../../../ui/core/components/component.ts","../../../ui/core/components/input.ts","../../../ui/core/components/detailed_results/result_component.ts","../../../ui/core/components/detailed_results/results_filter.ts","../../../ui/core/components/detailed_results/metrics_table.ts","../../../ui/core/components/detailed_results/cast_metrics.ts","../../../ui/core/components/detailed_results/dtps_melee_metrics.ts","../../../ui/core/components/detailed_results/dtps_spell_metrics.ts","../../../ui/core/components/detailed_results/healing_metrics.ts","../../../ui/core/components/detailed_results/melee_metrics.ts","../../../ui/core/components/detailed_results/spell_metrics.ts","../../../ui/core/components/detailed_results/resource_metrics.ts","../../../ui/core/components/detailed_results/color_settings.ts","../../../ui/core/components/detailed_results/source_chart.ts","../../../ui/core/components/detailed_results/player_damage.ts","../../../ui/core/components/detailed_results/aura_metrics.ts","../../../ui/core/components/detailed_results/dps_histogram.ts","../../../ui/core/components/detailed_results/timeline.ts","../../../ui/core/components/raid_sim_action.ts","../../../ui/core/components/detailed_results/topline_results.ts","../../../ui/core/components/detailed_results.ts"],"sourcesContent":["/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nconst fromCharCodes = (chunk) => String.fromCharCode.apply(String, chunk);\n/**\n * Reads UTF8 bytes as a string.\n *\n * See [protobufjs / utf8](https://github.com/protobufjs/protobuf.js/blob/9893e35b854621cce64af4bf6be2cff4fb892796/lib/utf8/index.js#L40)\n *\n * Copyright (c) 2016, Daniel Wirtz\n */\nexport function utf8read(bytes) {\n    if (bytes.length < 1)\n        return \"\";\n    let pos = 0, // position in bytes\n    parts = [], chunk = [], i = 0, // char offset\n    t; // temporary\n    let len = bytes.length;\n    while (pos < len) {\n        t = bytes[pos++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = (t & 31) << 6 | bytes[pos++] & 63;\n        else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        }\n        else\n            chunk[i++] = (t & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;\n        if (i > 8191) {\n            parts.push(fromCharCodes(chunk));\n            i = 0;\n        }\n    }\n    if (parts.length) {\n        if (i)\n            parts.push(fromCharCodes(chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return fromCharCodes(chunk.slice(0, i));\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if (bitsHigh <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + bitsLow);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nfunction detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    return ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\nconst BI = detectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('ulong too small');\n                    if (value > BI.MAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & 0x80000000) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { utf8read } from \"./protobufjs-utf8\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nexport class BinaryReader {\n    constructor(buf) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return utf8read(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","import { BinaryReader } from \"./binary-reader\";\nimport { BinaryWriter } from \"./binary-writer\";\n/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n}, defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        target[localName] = this.enum(field.T(), jsonValue, field.name);\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * google.protobuf.NullValue accepts only JSON `null`.\n     */\n    enum(type, json, fieldName) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields.filter(f => !f.oneof)) {\n            let jsonValue = this.field(field, source[field.localName], options);\n            if (jsonValue !== undefined)\n                json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        // flatten all oneof`s\n        for (const field of this.fields) {\n            if (!field.oneof)\n                continue;\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                // if field is not selected, skip\n                continue;\n            let jsonValue = undefined;\n            if (field.kind == 'scalar' || field.kind == 'enum')\n                // for a selected oneof member, we must emit the default value\n                jsonValue = this.field(field, group[field.localName], {\n                    enumAsInteger: options.enumAsInteger,\n                    useProtoFieldName: options.useProtoFieldName,\n                    emitDefaultValues: true\n                });\n            else\n                jsonValue = this.field(field, group[field.localName], options);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * Replaces fields in the target with the fields from the\n * (partial) source.\n *\n * Omitted fields are not replaced.\n * Copies all values.\n * A default value in the source will replace a value in the target.\n *\n * Message fields are recursively merged (by calling `mergePartial()`\n * of the responsible message handler). Map and repeated fields\n * are simply overwritten, not appended or merged.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if (group === undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue === undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue === undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    output[name] = fieldValue.concat(); // elements are not reference types\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { binaryReadOptions, binaryWriteOptions } from \"./binary-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     *\n     * See MessageCreator.merge() for details.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.UnitStats\n */\nexport interface UnitStats {\n    /**\n     * @generated from protobuf field: repeated double stats = 1;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated double pseudo_stats = 2;\n     */\n    pseudoStats: number[];\n}\n/**\n * Buffs that affect the entire raid.\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +Stats\n     *\n     * @generated from protobuf field: proto.TristateEffect gift_of_the_wild = 1;\n     */\n    giftOfTheWild: TristateEffect;\n    /**\n     * +Stam\n     *\n     * @generated from protobuf field: proto.TristateEffect power_word_fortitude = 2;\n     */\n    powerWordFortitude: TristateEffect;\n    /**\n     * +Health\n     *\n     * @generated from protobuf field: proto.TristateEffect commanding_shout = 3;\n     */\n    commandingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blood_pact = 4;\n     */\n    bloodPact: TristateEffect;\n    /**\n     * + Agi and Str\n     *\n     * @generated from protobuf field: bool horn_of_winter = 5;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect strength_of_earth_totem = 6;\n     */\n    strengthOfEarthTotem: TristateEffect; // none, normal, 15% improved\n    /**\n     * +Intell and/or Spi\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 7;\n     */\n    arcaneBrilliance: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect fel_intelligence = 8;\n     */\n    felIntelligence: TristateEffect;\n    /**\n     * @generated from protobuf field: bool divine_spirit = 9;\n     */\n    divineSpirit: boolean;\n    /**\n     * +AP\n     *\n     * @generated from protobuf field: proto.TristateEffect battle_shout = 10;\n     */\n    battleShout: TristateEffect;\n    /**\n     * 10% AP\n     *\n     * @generated from protobuf field: bool trueshot_aura = 11;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 12;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 13;\n     */\n    abominationsMight: boolean;\n    /**\n     * 5% phy crit\n     *\n     * @generated from protobuf field: proto.TristateEffect leader_of_the_pack = 14;\n     */\n    leaderOfThePack: TristateEffect;\n    /**\n     * @generated from protobuf field: bool rampage = 15;\n     */\n    rampage: boolean;\n    /**\n     * 20% Melee Haste\n     *\n     * @generated from protobuf field: bool icy_talons = 16;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect windfury_totem = 17;\n     */\n    windfuryTotem: TristateEffect; // none, 16%, 20%\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool totem_of_wrath = 18;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 19;\n     */\n    flametongueTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_pact_old = 20;\n     */\n    demonicPactOld: number; // old demo SP \n    /**\n     * @generated from protobuf field: int32 demonic_pact = 43;\n     */\n    demonicPact: number; // SP buff -- deprecated.\n    /**\n     * @generated from protobuf field: int32 demonic_pact_sp = 44;\n     */\n    demonicPactSp: number; // SP buff NEW CORRECT\n    /**\n     * +5% Spell Crit and/or +3% Haste\n     *\n     * @generated from protobuf field: bool swift_retribution = 21;\n     */\n    swiftRetribution: boolean; // haste only\n    /**\n     * @generated from protobuf field: proto.TristateEffect moonkin_aura = 22;\n     */\n    moonkinAura: TristateEffect; // both crit and haste\n    /**\n     * @generated from protobuf field: bool elemental_oath = 23;\n     */\n    elementalOath: boolean; // crit only\n    /**\n     * 5% spell haste\n     *\n     * @generated from protobuf field: bool wrath_of_air_totem = 24;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * 3% dmg\n     *\n     * @generated from protobuf field: bool ferocious_inspiration = 25;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 26;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: bool arcane_empowerment = 27;\n     */\n    arcaneEmpowerment: boolean;\n    /**\n     * mp5\n     *\n     * @generated from protobuf field: proto.TristateEffect mana_spring_totem = 28;\n     */\n    manaSpringTotem: TristateEffect;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool bloodlust = 29;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thorns = 30;\n     */\n    thorns: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect devotion_aura = 31;\n     */\n    devotionAura: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect stoneskin_totem = 42;\n     */\n    stoneskinTotem: TristateEffect;\n    /**\n     * @generated from protobuf field: bool retribution_aura = 32;\n     */\n    retributionAura: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_protection = 33;\n     */\n    shadowProtection: boolean;\n    /**\n     * Drums\n     *\n     * @generated from protobuf field: bool drums_of_forgotten_kings = 34;\n     */\n    drumsOfForgottenKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_wild = 35;\n     */\n    drumsOfTheWild: boolean;\n    /**\n     * Scroll\n     *\n     * @generated from protobuf field: bool scroll_of_protection = 36;\n     */\n    scrollOfProtection: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_stamina = 37;\n     */\n    scrollOfStamina: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_strength = 38;\n     */\n    scrollOfStrength: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_agility = 39;\n     */\n    scrollOfAgility: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_intellect = 40;\n     */\n    scrollOfIntellect: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_spirit = 41;\n     */\n    scrollOfSpirit: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n    /**\n     * Item Buffs\n     *\n     * @generated from protobuf field: int32 atiesh_mage = 1;\n     */\n    atieshMage: number;\n    /**\n     * @generated from protobuf field: int32 atiesh_warlock = 2;\n     */\n    atieshWarlock: number;\n    /**\n     * @generated from protobuf field: bool braided_eternium_chain = 3;\n     */\n    braidedEterniumChain: boolean;\n    /**\n     * @generated from protobuf field: bool eye_of_the_night = 4;\n     */\n    eyeOfTheNight: boolean;\n    /**\n     * @generated from protobuf field: bool chain_of_the_twilight_owl = 5;\n     */\n    chainOfTheTwilightOwl: boolean;\n    /**\n     * Group buffs\n     *\n     * @generated from protobuf field: int32 mana_tide_totems = 6;\n     */\n    manaTideTotems: number;\n    /**\n     * @generated from protobuf field: bool heroic_presence = 7;\n     */\n    heroicPresence: boolean;\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * 10% Stats\n     *\n     * @generated from protobuf field: bool blessing_of_kings = 1;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_wisdom = 2;\n     */\n    blessingOfWisdom: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_might = 3;\n     */\n    blessingOfMight: TristateEffect;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 4;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: bool vigilance = 5;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: bool renewed_hope = 6;\n     */\n    renewedHope: boolean; // Only used in individual sims \n    //   as the class that provides these would cast them in raid sim\n    /**\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 hymn_of_hope = 7;\n     */\n    hymnOfHope: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_salvation = 8;\n     */\n    handOfSalvation: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 9;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 innervates = 10;\n     */\n    innervates: number;\n    /**\n     * @generated from protobuf field: int32 power_infusions = 11;\n     */\n    powerInfusions: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy = 12;\n     */\n    unholyFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_rejuvination = 13;\n     */\n    revitalizeRejuvination: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_wild_growth = 21;\n     */\n    revitalizeWildGrowth: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trades = 19;\n     */\n    tricksOfTheTrades: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardians = 23;\n     */\n    divineGuardians: number;\n    /**\n     * @generated from protobuf field: int32 pain_suppressions = 24;\n     */\n    painSuppressions: number;\n    /**\n     * Technically a debuff, but only used by individual sims.\n     *\n     * @generated from protobuf field: int32 shattering_throws = 20;\n     */\n    shatteringThrows: number;\n    /**\n     * Replenishment\n     *\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 15;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_wise = 16;\n     */\n    judgementsOfTheWise: boolean;\n    /**\n     * @generated from protobuf field: bool improved_soul_leech = 17;\n     */\n    improvedSoulLeech: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n    /**\n     * @generated from protobuf field: bool focus_magic = 22;\n     */\n    focusMagic: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: proto.PetFood pet_food = 7;\n     */\n    petFood: PetFood;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: bool thermal_sapper = 15;\n     */\n    thermalSapper: boolean;\n    /**\n     * @generated from protobuf field: bool explosive_decoy = 16;\n     */\n    explosiveDecoy: boolean;\n    /**\n     * @generated from protobuf field: proto.Explosive filler_explosive = 17;\n     */\n    fillerExplosive: Explosive;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * @generated from protobuf field: bool judgement_of_wisdom = 1;\n     */\n    judgementOfWisdom: boolean;\n    /**\n     * @generated from protobuf field: bool judgement_of_light = 2;\n     */\n    judgementOfLight: boolean;\n    /**\n     * @generated from protobuf field: bool misery = 3;\n     */\n    misery: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect faerie_fire = 4;\n     */\n    faerieFire: TristateEffect;\n    /**\n     * 13% bonus spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 5;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 6;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 7;\n     */\n    earthAndMoon: boolean;\n    /**\n     * +3% to crit against target\n     *\n     * @generated from protobuf field: bool heart_of_the_crusader = 8;\n     */\n    heartOfTheCrusader: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 9;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 10;\n     */\n    totemOfWrath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool shadow_mastery = 11;\n     */\n    shadowMastery: boolean;\n    /**\n     * @generated from protobuf field: bool improved_scorch = 12;\n     */\n    improvedScorch: boolean;\n    /**\n     * @generated from protobuf field: bool winters_chill = 13;\n     */\n    wintersChill: boolean;\n    /**\n     * @generated from protobuf field: bool blood_frenzy = 14;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool savage_combat = 15;\n     */\n    savageCombat: boolean;\n    /**\n     * TODO: validate these\n     *\n     * @generated from protobuf field: bool gift_of_arthas = 16;\n     */\n    giftOfArthas: boolean;\n    /**\n     * Bleed %\n     *\n     * @generated from protobuf field: bool mangle = 17;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool trauma = 18;\n     */\n    trauma: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 19;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 20;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 21;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 22;\n     */\n    acidSpit: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect curse_of_weakness = 23;\n     */\n    curseOfWeakness: TristateEffect;\n    /**\n     * @generated from protobuf field: bool sting = 24;\n     */\n    sting: boolean;\n    /**\n     * @generated from protobuf field: bool spore_cloud = 37;\n     */\n    sporeCloud: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_roar = 25;\n     */\n    demoralizingRoar: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_shout = 26;\n     */\n    demoralizingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: bool vindication = 36;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_screech = 34;\n     */\n    demoralizingScreech: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thunder_clap = 27;\n     */\n    thunderClap: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect frost_fever = 28;\n     */\n    frostFever: TristateEffect;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 29;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 30;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 31;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: bool scorpid_sting = 32;\n     */\n    scorpidSting: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_embrace = 33;\n     */\n    shadowEmbrace: boolean;\n    /**\n     * 1 = normal, 2 = talented, 3 = talented+glyphed\n     *\n     * @generated from protobuf field: int32 hunters_mark = 35;\n     */\n    huntersMark: number;\n}\n/**\n * @generated from protobuf message proto.TargetInput\n */\nexport interface TargetInput {\n    /**\n     * @generated from protobuf field: proto.InputType input_type = 1;\n     */\n    inputType: InputType;\n    /**\n     * @generated from protobuf field: string label = 2;\n     */\n    label: string;\n    /**\n     * @generated from protobuf field: string tooltip = 5;\n     */\n    tooltip: string;\n    /**\n     * @generated from protobuf field: bool bool_value = 3;\n     */\n    boolValue: boolean;\n    /**\n     * @generated from protobuf field: double number_value = 4;\n     */\n    numberValue: number;\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool tight_enemy_damage = 17;\n     */\n    tightEnemyDamage: boolean; // Patchwerk special\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n    /**\n     * Custom Target AI parameters\n     *\n     * @generated from protobuf field: repeated proto.TargetInput target_inputs = 18;\n     */\n    targetInputs: TargetInput[];\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.SimDatabase\n */\nexport interface SimDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.SimItem items = 1;\n     */\n    items: SimItem[];\n    /**\n     * @generated from protobuf field: repeated proto.SimEnchant enchants = 2;\n     */\n    enchants: SimEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.SimGem gems = 3;\n     */\n    gems: SimGem[];\n}\n/**\n * Contains only the Item info needed by the sim.\n *\n * @generated from protobuf message proto.SimItem\n */\nexport interface SimItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: double weapon_damage_min = 11;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 12;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 13;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: string set_name = 14;\n     */\n    setName: string;\n}\n/**\n * Contains only the Enchant info needed by the sim.\n *\n * @generated from protobuf message proto.SimEnchant\n */\nexport interface SimEnchant {\n    /**\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number;\n    /**\n     * @generated from protobuf field: repeated double stats = 2;\n     */\n    stats: number[];\n}\n/**\n * Contains only the Gem info needed by the sim.\n *\n * @generated from protobuf message proto.SimGem\n */\nexport interface SimGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 3;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 4;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.RaidTarget\n */\nexport interface RaidTarget {\n    /**\n     * Raid index of the player to target. A value of -1 indicates no target.\n     *\n     * @generated from protobuf field: int32 target_index = 1;\n     */\n    targetIndex: number;\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 major1 = 1;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 2;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 3;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 4;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 5;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 6;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n    /**\n     * % Inspiration buff uptime\n     *\n     * @generated from protobuf field: double inspiration_uptime = 3;\n     */\n    inspirationUptime: number;\n    /**\n     * TMI burst window bin size\n     *\n     * @generated from protobuf field: int32 burst_window = 4;\n     */\n    burstWindow: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n    /**\n     * Desired cast rate for this spell. Not used by most custom rotations, this is\n     * primarily for healers.\n     *\n     * @generated from protobuf field: double casts_per_minute = 2;\n     */\n    castsPerMinute: number;\n}\n/**\n * @generated from protobuf message proto.ItemSwap\n */\nexport interface ItemSwap {\n    /**\n     * @generated from protobuf field: proto.ItemSpec mh_item = 1;\n     */\n    mhItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec oh_item = 2;\n     */\n    ohItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec ranged_item = 3;\n     */\n    rangedItem?: ItemSpec;\n}\n/**\n * @generated from protobuf message proto.Duration\n */\nexport interface Duration {\n    /**\n     * @generated from protobuf field: double ms = 1;\n     */\n    ms: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 0;\n     */\n    SpecBalanceDruid = 0,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 12;\n     */\n    SpecFeralDruid = 12,\n    /**\n     * @generated from protobuf enum value: SpecFeralTankDruid = 14;\n     */\n    SpecFeralTankDruid = 14,\n    /**\n     * @generated from protobuf enum value: SpecRestorationDruid = 18;\n     */\n    SpecRestorationDruid = 18,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 1;\n     */\n    SpecElementalShaman = 1,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 9;\n     */\n    SpecEnhancementShaman = 9,\n    /**\n     * @generated from protobuf enum value: SpecRestorationShaman = 19;\n     */\n    SpecRestorationShaman = 19,\n    /**\n     * @generated from protobuf enum value: SpecHunter = 8;\n     */\n    SpecHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecMage = 2;\n     */\n    SpecMage = 2,\n    /**\n     * @generated from protobuf enum value: SpecHolyPaladin = 20;\n     */\n    SpecHolyPaladin = 20,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 13;\n     */\n    SpecProtectionPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 3;\n     */\n    SpecRetributionPaladin = 3,\n    /**\n     * @generated from protobuf enum value: SpecRogue = 7;\n     */\n    SpecRogue = 7,\n    /**\n     * @generated from protobuf enum value: SpecHealingPriest = 17;\n     */\n    SpecHealingPriest = 17,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 4;\n     */\n    SpecShadowPriest = 4,\n    /**\n     * @generated from protobuf enum value: SpecSmitePriest = 10;\n     */\n    SpecSmitePriest = 10,\n    /**\n     * @generated from protobuf enum value: SpecWarlock = 5;\n     */\n    SpecWarlock = 5,\n    /**\n     * @generated from protobuf enum value: SpecWarrior = 6;\n     */\n    SpecWarrior = 6,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 11;\n     */\n    SpecProtectionWarrior = 11,\n    /**\n     * @generated from protobuf enum value: SpecDeathknight = 15;\n     */\n    SpecDeathknight = 15,\n    /**\n     * @generated from protobuf enum value: SpecTankDeathknight = 16;\n     */\n    SpecTankDeathknight = 16\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathknight = 10;\n     */\n    ClassDeathknight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11\n}\n/**\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 6;\n     */\n    StatMP5 = 6,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 7;\n     */\n    StatSpellHit = 7,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 8;\n     */\n    StatSpellCrit = 8,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 9;\n     */\n    StatSpellHaste = 9,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 10;\n     */\n    StatSpellPenetration = 10,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 11;\n     */\n    StatAttackPower = 11,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 12;\n     */\n    StatMeleeHit = 12,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 13;\n     */\n    StatMeleeCrit = 13,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 14;\n     */\n    StatMeleeHaste = 14,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 15;\n     */\n    StatArmorPenetration = 15,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 16;\n     */\n    StatExpertise = 16,\n    /**\n     * @generated from protobuf enum value: StatMana = 17;\n     */\n    StatMana = 17,\n    /**\n     * @generated from protobuf enum value: StatEnergy = 18;\n     */\n    StatEnergy = 18,\n    /**\n     * @generated from protobuf enum value: StatRage = 19;\n     */\n    StatRage = 19,\n    /**\n     * @generated from protobuf enum value: StatArmor = 20;\n     */\n    StatArmor = 20,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 21;\n     */\n    StatRangedAttackPower = 21,\n    /**\n     * @generated from protobuf enum value: StatDefense = 22;\n     */\n    StatDefense = 22,\n    /**\n     * @generated from protobuf enum value: StatBlock = 23;\n     */\n    StatBlock = 23,\n    /**\n     * @generated from protobuf enum value: StatBlockValue = 24;\n     */\n    StatBlockValue = 24,\n    /**\n     * @generated from protobuf enum value: StatDodge = 25;\n     */\n    StatDodge = 25,\n    /**\n     * @generated from protobuf enum value: StatParry = 26;\n     */\n    StatParry = 26,\n    /**\n     * @generated from protobuf enum value: StatResilience = 27;\n     */\n    StatResilience = 27,\n    /**\n     * @generated from protobuf enum value: StatHealth = 28;\n     */\n    StatHealth = 28,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 29;\n     */\n    StatArcaneResistance = 29,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 30;\n     */\n    StatFireResistance = 30,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 31;\n     */\n    StatFrostResistance = 31,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 32;\n     */\n    StatNatureResistance = 32,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 33;\n     */\n    StatShadowResistance = 33,\n    /**\n     * DO NOT add new stats here without discussing it first; new stats come with\n     * a performance penalty.\n     *\n     * @generated from protobuf enum value: StatBonusArmor = 34;\n     */\n    StatBonusArmor = 34\n}\n/**\n * Not all pseudostats are included here; just the ones we want to pass\n * between the UI and backend.\n *\n * It's also OK to include things here which aren't in the PseudoStats struct.\n *\n * @generated from protobuf enum proto.PseudoStat\n */\nexport enum PseudoStat {\n    /**\n     * @generated from protobuf enum value: PseudoStatMainHandDps = 0;\n     */\n    PseudoStatMainHandDps = 0,\n    /**\n     * @generated from protobuf enum value: PseudoStatOffHandDps = 1;\n     */\n    PseudoStatOffHandDps = 1,\n    /**\n     * @generated from protobuf enum value: PseudoStatRangedDps = 2;\n     */\n    PseudoStatRangedDps = 2,\n    /**\n     * @generated from protobuf enum value: PseudoStatBlockValueMultiplier = 3;\n     */\n    PseudoStatBlockValueMultiplier = 3,\n    /**\n     * @generated from protobuf enum value: PseudoStatDodge = 4;\n     */\n    PseudoStatDodge = 4,\n    /**\n     * @generated from protobuf enum value: PseudoStatParry = 5;\n     */\n    PseudoStatParry = 5\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeIdol = 4;\n     */\n    RangedWeaponTypeIdol = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeLibram = 5;\n     */\n    RangedWeaponTypeLibram = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 6;\n     */\n    RangedWeaponTypeThrown = 6,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeTotem = 7;\n     */\n    RangedWeaponTypeTotem = 7,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 8;\n     */\n    RangedWeaponTypeWand = 8,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeSigil = 9;\n     */\n    RangedWeaponTypeSigil = 9\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * @generated from protobuf enum value: RunicHealingPotion = 1;\n     */\n    RunicHealingPotion = 1,\n    /**\n     * @generated from protobuf enum value: RunicManaPotion = 2;\n     */\n    RunicManaPotion = 2,\n    /**\n     * @generated from protobuf enum value: IndestructiblePotion = 3;\n     */\n    IndestructiblePotion = 3,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 4;\n     */\n    PotionOfSpeed = 4,\n    /**\n     * @generated from protobuf enum value: PotionOfWildMagic = 5;\n     */\n    PotionOfWildMagic = 5,\n    /**\n     * @generated from protobuf enum value: DestructionPotion = 6;\n     */\n    DestructionPotion = 6,\n    /**\n     * @generated from protobuf enum value: SuperManaPotion = 7;\n     */\n    SuperManaPotion = 7,\n    /**\n     * @generated from protobuf enum value: HastePotion = 8;\n     */\n    HastePotion = 8,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 9;\n     */\n    MightyRagePotion = 9,\n    /**\n     * @generated from protobuf enum value: FelManaPotion = 10;\n     */\n    FelManaPotion = 10,\n    /**\n     * @generated from protobuf enum value: InsaneStrengthPotion = 11;\n     */\n    InsaneStrengthPotion = 11,\n    /**\n     * @generated from protobuf enum value: IronshieldPotion = 12;\n     */\n    IronshieldPotion = 12,\n    /**\n     * @generated from protobuf enum value: HeroicPotion = 13;\n     */\n    HeroicPotion = 13,\n    /**\n     * @generated from protobuf enum value: RunicManaInjector = 14;\n     */\n    RunicManaInjector = 14,\n    /**\n     * @generated from protobuf enum value: RunicHealingInjector = 15;\n     */\n    RunicHealingInjector = 15\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredFlameCap = 2;\n     */\n    ConjuredFlameCap = 2,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 1;\n     */\n    FlaskOfTheFrostWyrm = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 2;\n     */\n    FlaskOfEndlessRage = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 3;\n     */\n    FlaskOfPureMojo = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 4;\n     */\n    FlaskOfStoneblood = 4,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 5;\n     */\n    LesserFlaskOfToughness = 5,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 6;\n     */\n    LesserFlaskOfResistance = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: FlaskOfBlindingLight = 7;\n     */\n    FlaskOfBlindingLight = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfMightyRestoration = 8;\n     */\n    FlaskOfMightyRestoration = 8,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureDeath = 9;\n     */\n    FlaskOfPureDeath = 9,\n    /**\n     * @generated from protobuf enum value: FlaskOfRelentlessAssault = 10;\n     */\n    FlaskOfRelentlessAssault = 10,\n    /**\n     * @generated from protobuf enum value: FlaskOfSupremePower = 11;\n     */\n    FlaskOfSupremePower = 11,\n    /**\n     * @generated from protobuf enum value: FlaskOfFortification = 12;\n     */\n    FlaskOfFortification = 12,\n    /**\n     * @generated from protobuf enum value: FlaskOfChromaticWonder = 13;\n     */\n    FlaskOfChromaticWonder = 13\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfAccuracy = 1;\n     */\n    ElixirOfAccuracy = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 2;\n     */\n    ElixirOfArmorPiercing = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 3;\n     */\n    ElixirOfDeadlyStrikes = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 4;\n     */\n    ElixirOfExpertise = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 5;\n     */\n    ElixirOfLightningSpeed = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 6;\n     */\n    ElixirOfMightyAgility = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 7;\n     */\n    ElixirOfMightyStrength = 7,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 8;\n     */\n    GurusElixir = 8,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 9;\n     */\n    SpellpowerElixir = 9,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 10;\n     */\n    WrathElixir = 10,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: AdeptsElixir = 11;\n     */\n    AdeptsElixir = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 12;\n     */\n    ElixirOfDemonslaying = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorAgility = 13;\n     */\n    ElixirOfMajorAgility = 13,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFirePower = 14;\n     */\n    ElixirOfMajorFirePower = 14,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFrostPower = 15;\n     */\n    ElixirOfMajorFrostPower = 15,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorShadowPower = 16;\n     */\n    ElixirOfMajorShadowPower = 16,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorStrength = 17;\n     */\n    ElixirOfMajorStrength = 17,\n    /**\n     * @generated from protobuf enum value: ElixirOfMastery = 18;\n     */\n    ElixirOfMastery = 18,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMongoose = 19;\n     */\n    ElixirOfTheMongoose = 19,\n    /**\n     * @generated from protobuf enum value: FelStrengthElixir = 20;\n     */\n    FelStrengthElixir = 20,\n    /**\n     * @generated from protobuf enum value: GreaterArcaneElixir = 21;\n     */\n    GreaterArcaneElixir = 21\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 1;\n     */\n    ElixirOfMightyDefense = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 2;\n     */\n    ElixirOfMightyFortitude = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 3;\n     */\n    ElixirOfMightyMageblood = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 4;\n     */\n    ElixirOfMightyThoughts = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 5;\n     */\n    ElixirOfProtection = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 6;\n     */\n    ElixirOfSpirit = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: GiftOfArthas = 7;\n     */\n    GiftOfArthas = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfDraenicWisdom = 8;\n     */\n    ElixirOfDraenicWisdom = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfIronskin = 9;\n     */\n    ElixirOfIronskin = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorDefense = 10;\n     */\n    ElixirOfMajorDefense = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFortitude = 11;\n     */\n    ElixirOfMajorFortitude = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorMageblood = 12;\n     */\n    ElixirOfMajorMageblood = 12\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20\n}\n/**\n * @generated from protobuf enum proto.PetFood\n */\nexport enum PetFood {\n    /**\n     * @generated from protobuf enum value: PetFoodUnknown = 0;\n     */\n    PetFoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: PetFoodSpicedMammothTreats = 1;\n     */\n    PetFoodSpicedMammothTreats = 1,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: PetFoodKiblersBits = 2;\n     */\n    PetFoodKiblersBits = 2\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * @generated from protobuf enum proto.InputType\n */\nexport enum InputType {\n    /**\n     * @generated from protobuf enum value: Bool = 0;\n     */\n    Bool = 0,\n    /**\n     * @generated from protobuf enum value: Number = 1;\n     */\n    Number = 1\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3,\n    /**\n     * @generated from protobuf enum value: EnchantTypeStaff = 4;\n     */\n    EnchantTypeStaff = 4\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitStats$Type extends MessageType<UnitStats> {\n    constructor() {\n        super(\"proto.UnitStats\", [\n            { no: 1, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pseudo_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnitStats>): UnitStats {\n        const message = { stats: [], pseudoStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitStats): UnitStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated double pseudo_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStats.push(reader.double());\n                    else\n                        message.pseudoStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double stats = 1; */\n        if (message.stats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated double pseudo_stats = 2; */\n        if (message.pseudoStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStats.length; i++)\n                writer.double(message.pseudoStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitStats\n */\nexport const UnitStats = new UnitStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"gift_of_the_wild\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 2, name: \"power_word_fortitude\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"commanding_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blood_pact\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"strength_of_earth_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 7, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"fel_intelligence\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 9, name: \"divine_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"battle_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 11, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"leader_of_the_pack\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 15, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"windfury_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 18, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"demonic_pact_old\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"demonic_pact_sp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"swift_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"moonkin_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 23, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"arcane_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"mana_spring_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"thorns\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 31, name: \"devotion_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 42, name: \"stoneskin_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 32, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"drums_of_forgotten_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"drums_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"scroll_of_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"scroll_of_stamina\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"scroll_of_strength\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"scroll_of_agility\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"scroll_of_intellect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"scroll_of_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { giftOfTheWild: 0, powerWordFortitude: 0, commandingShout: 0, bloodPact: 0, hornOfWinter: false, strengthOfEarthTotem: 0, arcaneBrilliance: false, felIntelligence: 0, divineSpirit: false, battleShout: 0, trueshotAura: false, unleashedRage: false, abominationsMight: false, leaderOfThePack: 0, rampage: false, icyTalons: false, windfuryTotem: 0, totemOfWrath: false, flametongueTotem: false, demonicPactOld: 0, demonicPact: 0, demonicPactSp: 0, swiftRetribution: false, moonkinAura: 0, elementalOath: false, wrathOfAirTotem: false, ferociousInspiration: false, sanctifiedRetribution: false, arcaneEmpowerment: false, manaSpringTotem: 0, bloodlust: false, thorns: 0, devotionAura: 0, stoneskinTotem: 0, retributionAura: false, shadowProtection: false, drumsOfForgottenKings: false, drumsOfTheWild: false, scrollOfProtection: false, scrollOfStamina: false, scrollOfStrength: false, scrollOfAgility: false, scrollOfIntellect: false, scrollOfSpirit: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TristateEffect gift_of_the_wild */ 1:\n                    message.giftOfTheWild = reader.int32();\n                    break;\n                case /* proto.TristateEffect power_word_fortitude */ 2:\n                    message.powerWordFortitude = reader.int32();\n                    break;\n                case /* proto.TristateEffect commanding_shout */ 3:\n                    message.commandingShout = reader.int32();\n                    break;\n                case /* proto.TristateEffect blood_pact */ 4:\n                    message.bloodPact = reader.int32();\n                    break;\n                case /* bool horn_of_winter */ 5:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* proto.TristateEffect strength_of_earth_totem */ 6:\n                    message.strengthOfEarthTotem = reader.int32();\n                    break;\n                case /* bool arcane_brilliance */ 7:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* proto.TristateEffect fel_intelligence */ 8:\n                    message.felIntelligence = reader.int32();\n                    break;\n                case /* bool divine_spirit */ 9:\n                    message.divineSpirit = reader.bool();\n                    break;\n                case /* proto.TristateEffect battle_shout */ 10:\n                    message.battleShout = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 11:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 12:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 13:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* proto.TristateEffect leader_of_the_pack */ 14:\n                    message.leaderOfThePack = reader.int32();\n                    break;\n                case /* bool rampage */ 15:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool icy_talons */ 16:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* proto.TristateEffect windfury_totem */ 17:\n                    message.windfuryTotem = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 18:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 19:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* int32 demonic_pact_old */ 20:\n                    message.demonicPactOld = reader.int32();\n                    break;\n                case /* int32 demonic_pact */ 43:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* int32 demonic_pact_sp */ 44:\n                    message.demonicPactSp = reader.int32();\n                    break;\n                case /* bool swift_retribution */ 21:\n                    message.swiftRetribution = reader.bool();\n                    break;\n                case /* proto.TristateEffect moonkin_aura */ 22:\n                    message.moonkinAura = reader.int32();\n                    break;\n                case /* bool elemental_oath */ 23:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 24:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 25:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool sanctified_retribution */ 26:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* bool arcane_empowerment */ 27:\n                    message.arcaneEmpowerment = reader.bool();\n                    break;\n                case /* proto.TristateEffect mana_spring_totem */ 28:\n                    message.manaSpringTotem = reader.int32();\n                    break;\n                case /* bool bloodlust */ 29:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.TristateEffect thorns */ 30:\n                    message.thorns = reader.int32();\n                    break;\n                case /* proto.TristateEffect devotion_aura */ 31:\n                    message.devotionAura = reader.int32();\n                    break;\n                case /* proto.TristateEffect stoneskin_totem */ 42:\n                    message.stoneskinTotem = reader.int32();\n                    break;\n                case /* bool retribution_aura */ 32:\n                    message.retributionAura = reader.bool();\n                    break;\n                case /* bool shadow_protection */ 33:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool drums_of_forgotten_kings */ 34:\n                    message.drumsOfForgottenKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_wild */ 35:\n                    message.drumsOfTheWild = reader.bool();\n                    break;\n                case /* bool scroll_of_protection */ 36:\n                    message.scrollOfProtection = reader.bool();\n                    break;\n                case /* bool scroll_of_stamina */ 37:\n                    message.scrollOfStamina = reader.bool();\n                    break;\n                case /* bool scroll_of_strength */ 38:\n                    message.scrollOfStrength = reader.bool();\n                    break;\n                case /* bool scroll_of_agility */ 39:\n                    message.scrollOfAgility = reader.bool();\n                    break;\n                case /* bool scroll_of_intellect */ 40:\n                    message.scrollOfIntellect = reader.bool();\n                    break;\n                case /* bool scroll_of_spirit */ 41:\n                    message.scrollOfSpirit = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TristateEffect gift_of_the_wild = 1; */\n        if (message.giftOfTheWild !== 0)\n            writer.tag(1, WireType.Varint).int32(message.giftOfTheWild);\n        /* proto.TristateEffect power_word_fortitude = 2; */\n        if (message.powerWordFortitude !== 0)\n            writer.tag(2, WireType.Varint).int32(message.powerWordFortitude);\n        /* proto.TristateEffect commanding_shout = 3; */\n        if (message.commandingShout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.commandingShout);\n        /* proto.TristateEffect blood_pact = 4; */\n        if (message.bloodPact !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bloodPact);\n        /* bool horn_of_winter = 5; */\n        if (message.hornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.hornOfWinter);\n        /* proto.TristateEffect strength_of_earth_totem = 6; */\n        if (message.strengthOfEarthTotem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.strengthOfEarthTotem);\n        /* bool arcane_brilliance = 7; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(7, WireType.Varint).bool(message.arcaneBrilliance);\n        /* proto.TristateEffect fel_intelligence = 8; */\n        if (message.felIntelligence !== 0)\n            writer.tag(8, WireType.Varint).int32(message.felIntelligence);\n        /* bool divine_spirit = 9; */\n        if (message.divineSpirit !== false)\n            writer.tag(9, WireType.Varint).bool(message.divineSpirit);\n        /* proto.TristateEffect battle_shout = 10; */\n        if (message.battleShout !== 0)\n            writer.tag(10, WireType.Varint).int32(message.battleShout);\n        /* bool trueshot_aura = 11; */\n        if (message.trueshotAura !== false)\n            writer.tag(11, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 12; */\n        if (message.unleashedRage !== false)\n            writer.tag(12, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 13; */\n        if (message.abominationsMight !== false)\n            writer.tag(13, WireType.Varint).bool(message.abominationsMight);\n        /* proto.TristateEffect leader_of_the_pack = 14; */\n        if (message.leaderOfThePack !== 0)\n            writer.tag(14, WireType.Varint).int32(message.leaderOfThePack);\n        /* bool rampage = 15; */\n        if (message.rampage !== false)\n            writer.tag(15, WireType.Varint).bool(message.rampage);\n        /* bool icy_talons = 16; */\n        if (message.icyTalons !== false)\n            writer.tag(16, WireType.Varint).bool(message.icyTalons);\n        /* proto.TristateEffect windfury_totem = 17; */\n        if (message.windfuryTotem !== 0)\n            writer.tag(17, WireType.Varint).int32(message.windfuryTotem);\n        /* bool totem_of_wrath = 18; */\n        if (message.totemOfWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.totemOfWrath);\n        /* bool flametongue_totem = 19; */\n        if (message.flametongueTotem !== false)\n            writer.tag(19, WireType.Varint).bool(message.flametongueTotem);\n        /* int32 demonic_pact_old = 20; */\n        if (message.demonicPactOld !== 0)\n            writer.tag(20, WireType.Varint).int32(message.demonicPactOld);\n        /* int32 demonic_pact = 43; */\n        if (message.demonicPact !== 0)\n            writer.tag(43, WireType.Varint).int32(message.demonicPact);\n        /* int32 demonic_pact_sp = 44; */\n        if (message.demonicPactSp !== 0)\n            writer.tag(44, WireType.Varint).int32(message.demonicPactSp);\n        /* bool swift_retribution = 21; */\n        if (message.swiftRetribution !== false)\n            writer.tag(21, WireType.Varint).bool(message.swiftRetribution);\n        /* proto.TristateEffect moonkin_aura = 22; */\n        if (message.moonkinAura !== 0)\n            writer.tag(22, WireType.Varint).int32(message.moonkinAura);\n        /* bool elemental_oath = 23; */\n        if (message.elementalOath !== false)\n            writer.tag(23, WireType.Varint).bool(message.elementalOath);\n        /* bool wrath_of_air_totem = 24; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(24, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool ferocious_inspiration = 25; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(25, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool sanctified_retribution = 26; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(26, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* bool arcane_empowerment = 27; */\n        if (message.arcaneEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.arcaneEmpowerment);\n        /* proto.TristateEffect mana_spring_totem = 28; */\n        if (message.manaSpringTotem !== 0)\n            writer.tag(28, WireType.Varint).int32(message.manaSpringTotem);\n        /* bool bloodlust = 29; */\n        if (message.bloodlust !== false)\n            writer.tag(29, WireType.Varint).bool(message.bloodlust);\n        /* proto.TristateEffect thorns = 30; */\n        if (message.thorns !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thorns);\n        /* proto.TristateEffect devotion_aura = 31; */\n        if (message.devotionAura !== 0)\n            writer.tag(31, WireType.Varint).int32(message.devotionAura);\n        /* proto.TristateEffect stoneskin_totem = 42; */\n        if (message.stoneskinTotem !== 0)\n            writer.tag(42, WireType.Varint).int32(message.stoneskinTotem);\n        /* bool retribution_aura = 32; */\n        if (message.retributionAura !== false)\n            writer.tag(32, WireType.Varint).bool(message.retributionAura);\n        /* bool shadow_protection = 33; */\n        if (message.shadowProtection !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowProtection);\n        /* bool drums_of_forgotten_kings = 34; */\n        if (message.drumsOfForgottenKings !== false)\n            writer.tag(34, WireType.Varint).bool(message.drumsOfForgottenKings);\n        /* bool drums_of_the_wild = 35; */\n        if (message.drumsOfTheWild !== false)\n            writer.tag(35, WireType.Varint).bool(message.drumsOfTheWild);\n        /* bool scroll_of_protection = 36; */\n        if (message.scrollOfProtection !== false)\n            writer.tag(36, WireType.Varint).bool(message.scrollOfProtection);\n        /* bool scroll_of_stamina = 37; */\n        if (message.scrollOfStamina !== false)\n            writer.tag(37, WireType.Varint).bool(message.scrollOfStamina);\n        /* bool scroll_of_strength = 38; */\n        if (message.scrollOfStrength !== false)\n            writer.tag(38, WireType.Varint).bool(message.scrollOfStrength);\n        /* bool scroll_of_agility = 39; */\n        if (message.scrollOfAgility !== false)\n            writer.tag(39, WireType.Varint).bool(message.scrollOfAgility);\n        /* bool scroll_of_intellect = 40; */\n        if (message.scrollOfIntellect !== false)\n            writer.tag(40, WireType.Varint).bool(message.scrollOfIntellect);\n        /* bool scroll_of_spirit = 41; */\n        if (message.scrollOfSpirit !== false)\n            writer.tag(41, WireType.Varint).bool(message.scrollOfSpirit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", [\n            { no: 1, name: \"atiesh_mage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"atiesh_warlock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"braided_eternium_chain\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"eye_of_the_night\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"chain_of_the_twilight_owl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mana_tide_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"heroic_presence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = { atieshMage: 0, atieshWarlock: 0, braidedEterniumChain: false, eyeOfTheNight: false, chainOfTheTwilightOwl: false, manaTideTotems: 0, heroicPresence: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 atiesh_mage */ 1:\n                    message.atieshMage = reader.int32();\n                    break;\n                case /* int32 atiesh_warlock */ 2:\n                    message.atieshWarlock = reader.int32();\n                    break;\n                case /* bool braided_eternium_chain */ 3:\n                    message.braidedEterniumChain = reader.bool();\n                    break;\n                case /* bool eye_of_the_night */ 4:\n                    message.eyeOfTheNight = reader.bool();\n                    break;\n                case /* bool chain_of_the_twilight_owl */ 5:\n                    message.chainOfTheTwilightOwl = reader.bool();\n                    break;\n                case /* int32 mana_tide_totems */ 6:\n                    message.manaTideTotems = reader.int32();\n                    break;\n                case /* bool heroic_presence */ 7:\n                    message.heroicPresence = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 atiesh_mage = 1; */\n        if (message.atieshMage !== 0)\n            writer.tag(1, WireType.Varint).int32(message.atieshMage);\n        /* int32 atiesh_warlock = 2; */\n        if (message.atieshWarlock !== 0)\n            writer.tag(2, WireType.Varint).int32(message.atieshWarlock);\n        /* bool braided_eternium_chain = 3; */\n        if (message.braidedEterniumChain !== false)\n            writer.tag(3, WireType.Varint).bool(message.braidedEterniumChain);\n        /* bool eye_of_the_night = 4; */\n        if (message.eyeOfTheNight !== false)\n            writer.tag(4, WireType.Varint).bool(message.eyeOfTheNight);\n        /* bool chain_of_the_twilight_owl = 5; */\n        if (message.chainOfTheTwilightOwl !== false)\n            writer.tag(5, WireType.Varint).bool(message.chainOfTheTwilightOwl);\n        /* int32 mana_tide_totems = 6; */\n        if (message.manaTideTotems !== 0)\n            writer.tag(6, WireType.Varint).int32(message.manaTideTotems);\n        /* bool heroic_presence = 7; */\n        if (message.heroicPresence !== false)\n            writer.tag(7, WireType.Varint).bool(message.heroicPresence);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 1, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_wisdom\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"blessing_of_might\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"renewed_hope\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"hymn_of_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"hand_of_salvation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"innervates\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"power_infusions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"revitalize_rejuvination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"revitalize_wild_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"divine_guardians\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"pain_suppressions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"shattering_throws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_soul_leech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { blessingOfKings: false, blessingOfWisdom: 0, blessingOfMight: 0, blessingOfSanctuary: false, vigilance: false, renewedHope: false, hymnOfHope: 0, handOfSalvation: 0, rapture: 0, innervates: 0, powerInfusions: 0, unholyFrenzy: 0, revitalizeRejuvination: 0, revitalizeWildGrowth: 0, tricksOfTheTrades: 0, divineGuardians: 0, painSuppressions: 0, shatteringThrows: 0, vampiricTouch: false, huntingParty: false, judgementsOfTheWise: false, improvedSoulLeech: false, enduringWinter: false, focusMagic: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool blessing_of_kings */ 1:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* proto.TristateEffect blessing_of_wisdom */ 2:\n                    message.blessingOfWisdom = reader.int32();\n                    break;\n                case /* proto.TristateEffect blessing_of_might */ 3:\n                    message.blessingOfMight = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 4:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* bool vigilance */ 5:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* bool renewed_hope */ 6:\n                    message.renewedHope = reader.bool();\n                    break;\n                case /* int32 hymn_of_hope */ 7:\n                    message.hymnOfHope = reader.int32();\n                    break;\n                case /* int32 hand_of_salvation */ 8:\n                    message.handOfSalvation = reader.int32();\n                    break;\n                case /* int32 rapture */ 9:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 innervates */ 10:\n                    message.innervates = reader.int32();\n                    break;\n                case /* int32 power_infusions */ 11:\n                    message.powerInfusions = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy */ 12:\n                    message.unholyFrenzy = reader.int32();\n                    break;\n                case /* int32 revitalize_rejuvination */ 13:\n                    message.revitalizeRejuvination = reader.int32();\n                    break;\n                case /* int32 revitalize_wild_growth */ 21:\n                    message.revitalizeWildGrowth = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trades */ 19:\n                    message.tricksOfTheTrades = reader.int32();\n                    break;\n                case /* int32 divine_guardians */ 23:\n                    message.divineGuardians = reader.int32();\n                    break;\n                case /* int32 pain_suppressions */ 24:\n                    message.painSuppressions = reader.int32();\n                    break;\n                case /* int32 shattering_throws */ 20:\n                    message.shatteringThrows = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool hunting_party */ 15:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool judgements_of_the_wise */ 16:\n                    message.judgementsOfTheWise = reader.bool();\n                    break;\n                case /* bool improved_soul_leech */ 17:\n                    message.improvedSoulLeech = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                case /* bool focus_magic */ 22:\n                    message.focusMagic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool blessing_of_kings = 1; */\n        if (message.blessingOfKings !== false)\n            writer.tag(1, WireType.Varint).bool(message.blessingOfKings);\n        /* proto.TristateEffect blessing_of_wisdom = 2; */\n        if (message.blessingOfWisdom !== 0)\n            writer.tag(2, WireType.Varint).int32(message.blessingOfWisdom);\n        /* proto.TristateEffect blessing_of_might = 3; */\n        if (message.blessingOfMight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blessingOfMight);\n        /* bool blessing_of_sanctuary = 4; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(4, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* bool vigilance = 5; */\n        if (message.vigilance !== false)\n            writer.tag(5, WireType.Varint).bool(message.vigilance);\n        /* bool renewed_hope = 6; */\n        if (message.renewedHope !== false)\n            writer.tag(6, WireType.Varint).bool(message.renewedHope);\n        /* int32 hymn_of_hope = 7; */\n        if (message.hymnOfHope !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHope);\n        /* int32 hand_of_salvation = 8; */\n        if (message.handOfSalvation !== 0)\n            writer.tag(8, WireType.Varint).int32(message.handOfSalvation);\n        /* int32 rapture = 9; */\n        if (message.rapture !== 0)\n            writer.tag(9, WireType.Varint).int32(message.rapture);\n        /* int32 innervates = 10; */\n        if (message.innervates !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervates);\n        /* int32 power_infusions = 11; */\n        if (message.powerInfusions !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusions);\n        /* int32 unholy_frenzy = 12; */\n        if (message.unholyFrenzy !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzy);\n        /* int32 revitalize_rejuvination = 13; */\n        if (message.revitalizeRejuvination !== 0)\n            writer.tag(13, WireType.Varint).int32(message.revitalizeRejuvination);\n        /* int32 revitalize_wild_growth = 21; */\n        if (message.revitalizeWildGrowth !== 0)\n            writer.tag(21, WireType.Varint).int32(message.revitalizeWildGrowth);\n        /* int32 tricks_of_the_trades = 19; */\n        if (message.tricksOfTheTrades !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTrades);\n        /* int32 divine_guardians = 23; */\n        if (message.divineGuardians !== 0)\n            writer.tag(23, WireType.Varint).int32(message.divineGuardians);\n        /* int32 pain_suppressions = 24; */\n        if (message.painSuppressions !== 0)\n            writer.tag(24, WireType.Varint).int32(message.painSuppressions);\n        /* int32 shattering_throws = 20; */\n        if (message.shatteringThrows !== 0)\n            writer.tag(20, WireType.Varint).int32(message.shatteringThrows);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool hunting_party = 15; */\n        if (message.huntingParty !== false)\n            writer.tag(15, WireType.Varint).bool(message.huntingParty);\n        /* bool judgements_of_the_wise = 16; */\n        if (message.judgementsOfTheWise !== false)\n            writer.tag(16, WireType.Varint).bool(message.judgementsOfTheWise);\n        /* bool improved_soul_leech = 17; */\n        if (message.improvedSoulLeech !== false)\n            writer.tag(17, WireType.Varint).bool(message.improvedSoulLeech);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        /* bool focus_magic = 22; */\n        if (message.focusMagic !== false)\n            writer.tag(22, WireType.Varint).bool(message.focusMagic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 7, name: \"pet_food\", kind: \"enum\", T: () => [\"proto.PetFood\", PetFood] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 15, name: \"thermal_sapper\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"explosive_decoy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"filler_explosive\", kind: \"enum\", T: () => [\"proto.Explosive\", Explosive] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petFood: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, thermalSapper: false, explosiveDecoy: false, fillerExplosive: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* proto.PetFood pet_food */ 7:\n                    message.petFood = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* bool thermal_sapper */ 15:\n                    message.thermalSapper = reader.bool();\n                    break;\n                case /* bool explosive_decoy */ 16:\n                    message.explosiveDecoy = reader.bool();\n                    break;\n                case /* proto.Explosive filler_explosive */ 17:\n                    message.fillerExplosive = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* proto.PetFood pet_food = 7; */\n        if (message.petFood !== 0)\n            writer.tag(7, WireType.Varint).int32(message.petFood);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* bool thermal_sapper = 15; */\n        if (message.thermalSapper !== false)\n            writer.tag(15, WireType.Varint).bool(message.thermalSapper);\n        /* bool explosive_decoy = 16; */\n        if (message.explosiveDecoy !== false)\n            writer.tag(16, WireType.Varint).bool(message.explosiveDecoy);\n        /* proto.Explosive filler_explosive = 17; */\n        if (message.fillerExplosive !== 0)\n            writer.tag(17, WireType.Varint).int32(message.fillerExplosive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"judgement_of_wisdom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"judgement_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"misery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"faerie_fire\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"shadow_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"winters_chill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"gift_of_arthas\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"trauma\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"curse_of_weakness\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 24, name: \"sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"spore_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_roar\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 26, name: \"demoralizing_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 36, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"demoralizing_screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 28, name: \"frost_fever\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"scorpid_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { judgementOfWisdom: false, judgementOfLight: false, misery: false, faerieFire: 0, curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, heartOfTheCrusader: false, masterPoisoner: false, totemOfWrath: false, shadowMastery: false, improvedScorch: false, wintersChill: false, bloodFrenzy: false, savageCombat: false, giftOfArthas: false, mangle: false, trauma: false, stampede: false, exposeArmor: false, sunderArmor: false, acidSpit: false, curseOfWeakness: 0, sting: false, sporeCloud: false, demoralizingRoar: 0, demoralizingShout: 0, vindication: false, demoralizingScreech: false, thunderClap: 0, frostFever: 0, infectedWounds: false, judgementsOfTheJust: false, insectSwarm: false, scorpidSting: false, shadowEmbrace: false, huntersMark: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool judgement_of_wisdom */ 1:\n                    message.judgementOfWisdom = reader.bool();\n                    break;\n                case /* bool judgement_of_light */ 2:\n                    message.judgementOfLight = reader.bool();\n                    break;\n                case /* bool misery */ 3:\n                    message.misery = reader.bool();\n                    break;\n                case /* proto.TristateEffect faerie_fire */ 4:\n                    message.faerieFire = reader.int32();\n                    break;\n                case /* bool curse_of_elements */ 5:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 6:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 7:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool heart_of_the_crusader */ 8:\n                    message.heartOfTheCrusader = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 9:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool totem_of_wrath */ 10:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool shadow_mastery */ 11:\n                    message.shadowMastery = reader.bool();\n                    break;\n                case /* bool improved_scorch */ 12:\n                    message.improvedScorch = reader.bool();\n                    break;\n                case /* bool winters_chill */ 13:\n                    message.wintersChill = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool savage_combat */ 15:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool gift_of_arthas */ 16:\n                    message.giftOfArthas = reader.bool();\n                    break;\n                case /* bool mangle */ 17:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool trauma */ 18:\n                    message.trauma = reader.bool();\n                    break;\n                case /* bool stampede */ 19:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 20:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 21:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool acid_spit */ 22:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* proto.TristateEffect curse_of_weakness */ 23:\n                    message.curseOfWeakness = reader.int32();\n                    break;\n                case /* bool sting */ 24:\n                    message.sting = reader.bool();\n                    break;\n                case /* bool spore_cloud */ 37:\n                    message.sporeCloud = reader.bool();\n                    break;\n                case /* proto.TristateEffect demoralizing_roar */ 25:\n                    message.demoralizingRoar = reader.int32();\n                    break;\n                case /* proto.TristateEffect demoralizing_shout */ 26:\n                    message.demoralizingShout = reader.int32();\n                    break;\n                case /* bool vindication */ 36:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool demoralizing_screech */ 34:\n                    message.demoralizingScreech = reader.bool();\n                    break;\n                case /* proto.TristateEffect thunder_clap */ 27:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* proto.TristateEffect frost_fever */ 28:\n                    message.frostFever = reader.int32();\n                    break;\n                case /* bool infected_wounds */ 29:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 30:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool insect_swarm */ 31:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* bool scorpid_sting */ 32:\n                    message.scorpidSting = reader.bool();\n                    break;\n                case /* bool shadow_embrace */ 33:\n                    message.shadowEmbrace = reader.bool();\n                    break;\n                case /* int32 hunters_mark */ 35:\n                    message.huntersMark = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool judgement_of_wisdom = 1; */\n        if (message.judgementOfWisdom !== false)\n            writer.tag(1, WireType.Varint).bool(message.judgementOfWisdom);\n        /* bool judgement_of_light = 2; */\n        if (message.judgementOfLight !== false)\n            writer.tag(2, WireType.Varint).bool(message.judgementOfLight);\n        /* bool misery = 3; */\n        if (message.misery !== false)\n            writer.tag(3, WireType.Varint).bool(message.misery);\n        /* proto.TristateEffect faerie_fire = 4; */\n        if (message.faerieFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faerieFire);\n        /* bool curse_of_elements = 5; */\n        if (message.curseOfElements !== false)\n            writer.tag(5, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 6; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(6, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 7; */\n        if (message.earthAndMoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.earthAndMoon);\n        /* bool heart_of_the_crusader = 8; */\n        if (message.heartOfTheCrusader !== false)\n            writer.tag(8, WireType.Varint).bool(message.heartOfTheCrusader);\n        /* bool master_poisoner = 9; */\n        if (message.masterPoisoner !== false)\n            writer.tag(9, WireType.Varint).bool(message.masterPoisoner);\n        /* bool totem_of_wrath = 10; */\n        if (message.totemOfWrath !== false)\n            writer.tag(10, WireType.Varint).bool(message.totemOfWrath);\n        /* bool shadow_mastery = 11; */\n        if (message.shadowMastery !== false)\n            writer.tag(11, WireType.Varint).bool(message.shadowMastery);\n        /* bool improved_scorch = 12; */\n        if (message.improvedScorch !== false)\n            writer.tag(12, WireType.Varint).bool(message.improvedScorch);\n        /* bool winters_chill = 13; */\n        if (message.wintersChill !== false)\n            writer.tag(13, WireType.Varint).bool(message.wintersChill);\n        /* bool blood_frenzy = 14; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(14, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool savage_combat = 15; */\n        if (message.savageCombat !== false)\n            writer.tag(15, WireType.Varint).bool(message.savageCombat);\n        /* bool gift_of_arthas = 16; */\n        if (message.giftOfArthas !== false)\n            writer.tag(16, WireType.Varint).bool(message.giftOfArthas);\n        /* bool mangle = 17; */\n        if (message.mangle !== false)\n            writer.tag(17, WireType.Varint).bool(message.mangle);\n        /* bool trauma = 18; */\n        if (message.trauma !== false)\n            writer.tag(18, WireType.Varint).bool(message.trauma);\n        /* bool stampede = 19; */\n        if (message.stampede !== false)\n            writer.tag(19, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 20; */\n        if (message.exposeArmor !== false)\n            writer.tag(20, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 21; */\n        if (message.sunderArmor !== false)\n            writer.tag(21, WireType.Varint).bool(message.sunderArmor);\n        /* bool acid_spit = 22; */\n        if (message.acidSpit !== false)\n            writer.tag(22, WireType.Varint).bool(message.acidSpit);\n        /* proto.TristateEffect curse_of_weakness = 23; */\n        if (message.curseOfWeakness !== 0)\n            writer.tag(23, WireType.Varint).int32(message.curseOfWeakness);\n        /* bool sting = 24; */\n        if (message.sting !== false)\n            writer.tag(24, WireType.Varint).bool(message.sting);\n        /* bool spore_cloud = 37; */\n        if (message.sporeCloud !== false)\n            writer.tag(37, WireType.Varint).bool(message.sporeCloud);\n        /* proto.TristateEffect demoralizing_roar = 25; */\n        if (message.demoralizingRoar !== 0)\n            writer.tag(25, WireType.Varint).int32(message.demoralizingRoar);\n        /* proto.TristateEffect demoralizing_shout = 26; */\n        if (message.demoralizingShout !== 0)\n            writer.tag(26, WireType.Varint).int32(message.demoralizingShout);\n        /* bool vindication = 36; */\n        if (message.vindication !== false)\n            writer.tag(36, WireType.Varint).bool(message.vindication);\n        /* bool demoralizing_screech = 34; */\n        if (message.demoralizingScreech !== false)\n            writer.tag(34, WireType.Varint).bool(message.demoralizingScreech);\n        /* proto.TristateEffect thunder_clap = 27; */\n        if (message.thunderClap !== 0)\n            writer.tag(27, WireType.Varint).int32(message.thunderClap);\n        /* proto.TristateEffect frost_fever = 28; */\n        if (message.frostFever !== 0)\n            writer.tag(28, WireType.Varint).int32(message.frostFever);\n        /* bool infected_wounds = 29; */\n        if (message.infectedWounds !== false)\n            writer.tag(29, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 30; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(30, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool insect_swarm = 31; */\n        if (message.insectSwarm !== false)\n            writer.tag(31, WireType.Varint).bool(message.insectSwarm);\n        /* bool scorpid_sting = 32; */\n        if (message.scorpidSting !== false)\n            writer.tag(32, WireType.Varint).bool(message.scorpidSting);\n        /* bool shadow_embrace = 33; */\n        if (message.shadowEmbrace !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowEmbrace);\n        /* int32 hunters_mark = 35; */\n        if (message.huntersMark !== 0)\n            writer.tag(35, WireType.Varint).int32(message.huntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetInput$Type extends MessageType<TargetInput> {\n    constructor() {\n        super(\"proto.TargetInput\", [\n            { no: 1, name: \"input_type\", kind: \"enum\", T: () => [\"proto.InputType\", InputType] },\n            { no: 2, name: \"label\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"tooltip\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"bool_value\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"number_value\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetInput>): TargetInput {\n        const message = { inputType: 0, label: \"\", tooltip: \"\", boolValue: false, numberValue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetInput>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetInput): TargetInput {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.InputType input_type */ 1:\n                    message.inputType = reader.int32();\n                    break;\n                case /* string label */ 2:\n                    message.label = reader.string();\n                    break;\n                case /* string tooltip */ 5:\n                    message.tooltip = reader.string();\n                    break;\n                case /* bool bool_value */ 3:\n                    message.boolValue = reader.bool();\n                    break;\n                case /* double number_value */ 4:\n                    message.numberValue = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.InputType input_type = 1; */\n        if (message.inputType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.inputType);\n        /* string label = 2; */\n        if (message.label !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.label);\n        /* string tooltip = 5; */\n        if (message.tooltip !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.tooltip);\n        /* bool bool_value = 3; */\n        if (message.boolValue !== false)\n            writer.tag(3, WireType.Varint).bool(message.boolValue);\n        /* double number_value = 4; */\n        if (message.numberValue !== 0)\n            writer.tag(4, WireType.Bit64).double(message.numberValue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetInput\n */\nexport const TargetInput = new TargetInput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"tight_enemy_damage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"target_inputs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetInput }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, tightEnemyDamage: false, suppressDodge: false, spellSchool: 0, tankIndex: 0, targetInputs: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool tight_enemy_damage */ 17:\n                    message.tightEnemyDamage = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                case /* repeated proto.TargetInput target_inputs */ 18:\n                    message.targetInputs.push(TargetInput.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool tight_enemy_damage = 17; */\n        if (message.tightEnemyDamage !== false)\n            writer.tag(17, WireType.Varint).bool(message.tightEnemyDamage);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        /* repeated proto.TargetInput target_inputs = 18; */\n        for (let i = 0; i < message.targetInputs.length; i++)\n            TargetInput.internalBinaryWrite(message.targetInputs[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, useHealth: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, enchant: 0, gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimDatabase$Type extends MessageType<SimDatabase> {\n    constructor() {\n        super(\"proto.SimDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimItem },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimGem }\n        ]);\n    }\n    create(value?: PartialMessage<SimDatabase>): SimDatabase {\n        const message = { items: [], enchants: [], gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimDatabase): SimDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.SimItem items */ 1:\n                    message.items.push(SimItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimEnchant enchants */ 2:\n                    message.enchants.push(SimEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimGem gems */ 3:\n                    message.gems.push(SimGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.SimItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            SimItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            SimEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            SimGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimDatabase\n */\nexport const SimDatabase = new SimDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimItem$Type extends MessageType<SimItem> {\n    constructor() {\n        super(\"proto.SimItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimItem>): SimItem {\n        const message = { id: 0, name: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, setName: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimItem): SimItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 11:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 12:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 13:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* string set_name */ 14:\n                    message.setName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 11; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(11, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 12; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 13; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponSpeed);\n        /* string set_name = 14; */\n        if (message.setName !== \"\")\n            writer.tag(14, WireType.LengthDelimited).string(message.setName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimItem\n */\nexport const SimItem = new SimItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimEnchant$Type extends MessageType<SimEnchant> {\n    constructor() {\n        super(\"proto.SimEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimEnchant>): SimEnchant {\n        const message = { effectId: 0, stats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimEnchant): SimEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* repeated double stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* repeated double stats = 2; */\n        if (message.stats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimEnchant\n */\nexport const SimEnchant = new SimEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimGem$Type extends MessageType<SimGem> {\n    constructor() {\n        super(\"proto.SimGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 4, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimGem>): SimGem {\n        const message = { id: 0, name: \"\", color: 0, stats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimGem): SimGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.GemColor color */ 3:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.GemColor color = 3; */\n        if (message.color !== 0)\n            writer.tag(3, WireType.Varint).int32(message.color);\n        /* repeated double stats = 4; */\n        if (message.stats.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimGem\n */\nexport const SimGem = new SimGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidTarget$Type extends MessageType<RaidTarget> {\n    constructor() {\n        super(\"proto.RaidTarget\", [\n            { no: 1, name: \"target_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidTarget>): RaidTarget {\n        const message = { targetIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidTarget): RaidTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 target_index */ 1:\n                    message.targetIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 target_index = 1; */\n        if (message.targetIndex !== 0)\n            writer.tag(1, WireType.Varint).int32(message.targetIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidTarget\n */\nexport const RaidTarget = new RaidTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 major1 */ 1:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 2:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 3:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 4:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 5:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 6:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 major1 = 1; */\n        if (message.major1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 2; */\n        if (message.major2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 3; */\n        if (message.major3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 4; */\n        if (message.minor1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 5; */\n        if (message.minor2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 6; */\n        if (message.minor3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"inspiration_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"burst_window\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0, inspirationUptime: 0, burstWindow: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                case /* double inspiration_uptime */ 3:\n                    message.inspirationUptime = reader.double();\n                    break;\n                case /* int32 burst_window */ 4:\n                    message.burstWindow = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        /* double inspiration_uptime = 3; */\n        if (message.inspirationUptime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.inspirationUptime);\n        /* int32 burst_window = 4; */\n        if (message.burstWindow !== 0)\n            writer.tag(4, WireType.Varint).int32(message.burstWindow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"casts_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0, castsPerMinute: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                case /* double casts_per_minute */ 2:\n                    message.castsPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        /* double casts_per_minute = 2; */\n        if (message.castsPerMinute !== 0)\n            writer.tag(2, WireType.Bit64).double(message.castsPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSwap$Type extends MessageType<ItemSwap> {\n    constructor() {\n        super(\"proto.ItemSwap\", [\n            { no: 1, name: \"mh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"oh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 3, name: \"ranged_item\", kind: \"message\", T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSwap>): ItemSwap {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSwap>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSwap): ItemSwap {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec mh_item */ 1:\n                    message.mhItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.mhItem);\n                    break;\n                case /* proto.ItemSpec oh_item */ 2:\n                    message.ohItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.ohItem);\n                    break;\n                case /* proto.ItemSpec ranged_item */ 3:\n                    message.rangedItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.rangedItem);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSwap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec mh_item = 1; */\n        if (message.mhItem)\n            ItemSpec.internalBinaryWrite(message.mhItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec oh_item = 2; */\n        if (message.ohItem)\n            ItemSpec.internalBinaryWrite(message.ohItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec ranged_item = 3; */\n        if (message.rangedItem)\n            ItemSpec.internalBinaryWrite(message.rangedItem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSwap\n */\nexport const ItemSwap = new ItemSwap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Duration$Type extends MessageType<Duration> {\n    constructor() {\n        super(\"proto.Duration\", [\n            { no: 1, name: \"ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Duration>): Duration {\n        const message = { ms: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Duration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Duration): Duration {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double ms */ 1:\n                    message.ms = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Duration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double ms = 1; */\n        if (message.ms !== 0)\n            writer.tag(1, WireType.Bit64).double(message.ms);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Duration\n */\nexport const Duration = new Duration$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"apl.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ActionID } from \"./common\";\nimport { Duration } from \"./common\";\n// Rotation options are based heavily on APL. See https://github.com/simulationcraft/simc/wiki/ActionLists.\n\n/**\n * @generated from protobuf message proto.APLRotation\n */\nexport interface APLRotation {\n    /**\n     * @generated from protobuf field: bool enabled = 20;\n     */\n    enabled: boolean; // If false, use old rotation options.\n    /**\n     * @generated from protobuf field: repeated proto.APLPrepullAction prepull_actions = 1;\n     */\n    prepullActions: APLPrepullAction[];\n    /**\n     * @generated from protobuf field: repeated proto.APLListItem priority_list = 2;\n     */\n    priorityList: APLListItem[];\n}\n/**\n * @generated from protobuf message proto.APLListItem\n */\nexport interface APLListItem {\n    /**\n     * @generated from protobuf field: bool hide = 1;\n     */\n    hide: boolean; // Causes this item to be ignored.\n    /**\n     * @generated from protobuf field: string notes = 2;\n     */\n    notes: string; // Comments for the reader.\n    /**\n     * @generated from protobuf field: proto.APLAction action = 3;\n     */\n    action?: APLAction; // The action to be performed.\n}\n/**\n * @generated from protobuf message proto.APLAction\n */\nexport interface APLAction {\n    /**\n     * @generated from protobuf field: proto.APLValue condition = 1;\n     */\n    condition?: APLValue; // If set, action will only execute if value is true or != 0.\n    /**\n     * @generated from protobuf oneof: action\n     */\n    action: {\n        oneofKind: \"sequence\";\n        /**\n         * @generated from protobuf field: proto.APLActionSequence sequence = 2;\n         */\n        sequence: APLActionSequence;\n    } | {\n        oneofKind: \"castSpell\";\n        /**\n         * @generated from protobuf field: proto.APLActionCastSpell cast_spell = 3;\n         */\n        castSpell: APLActionCastSpell;\n    } | {\n        oneofKind: \"wait\";\n        /**\n         * @generated from protobuf field: proto.APLActionWait wait = 4;\n         */\n        wait: APLActionWait;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message proto.APLValue\n */\nexport interface APLValue {\n    /**\n     * @generated from protobuf oneof: value\n     */\n    value: {\n        oneofKind: \"const\";\n        /**\n         * Operators\n         *\n         * @generated from protobuf field: proto.APLValueConst const = 1;\n         */\n        const: APLValueConst;\n    } | {\n        oneofKind: \"and\";\n        /**\n         * @generated from protobuf field: proto.APLValueAnd and = 2;\n         */\n        and: APLValueAnd;\n    } | {\n        oneofKind: \"or\";\n        /**\n         * @generated from protobuf field: proto.APLValueOr or = 3;\n         */\n        or: APLValueOr;\n    } | {\n        oneofKind: \"not\";\n        /**\n         * @generated from protobuf field: proto.APLValueNot not = 4;\n         */\n        not: APLValueNot;\n    } | {\n        oneofKind: \"cmp\";\n        /**\n         * @generated from protobuf field: proto.APLValueCompare cmp = 5;\n         */\n        cmp: APLValueCompare;\n    } | {\n        oneofKind: \"dotIsActive\";\n        /**\n         * Dot values\n         *\n         * @generated from protobuf field: proto.APLValueDotIsActive dot_is_active = 6;\n         */\n        dotIsActive: APLValueDotIsActive;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message proto.APLPrepullAction\n */\nexport interface APLPrepullAction {\n    /**\n     * @generated from protobuf field: proto.APLAction action = 1;\n     */\n    action?: APLAction;\n    /**\n     * @generated from protobuf field: proto.Duration do_at = 2;\n     */\n    doAt?: Duration; // Should be a negative value.\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                 ACTIONS\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf message proto.APLActionSequence\n */\nexport interface APLActionSequence {\n    /**\n     * @generated from protobuf field: repeated proto.APLAction actions = 1;\n     */\n    actions: APLAction[];\n}\n/**\n * @generated from protobuf message proto.APLActionCastSpell\n */\nexport interface APLActionCastSpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionWait\n */\nexport interface APLActionWait {\n    /**\n     * @generated from protobuf field: proto.Duration duration = 1;\n     */\n    duration?: Duration;\n}\n/**\n * @generated from protobuf message proto.APLValueConst\n */\nexport interface APLValueConst {\n    /**\n     * @generated from protobuf field: string val = 1;\n     */\n    val: string;\n}\n/**\n * @generated from protobuf message proto.APLValueAnd\n */\nexport interface APLValueAnd {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueOr\n */\nexport interface APLValueOr {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueNot\n */\nexport interface APLValueNot {\n    /**\n     * @generated from protobuf field: proto.APLValue val = 1;\n     */\n    val?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLValueCompare\n */\nexport interface APLValueCompare {\n    /**\n     * @generated from protobuf field: proto.APLValueCompare.ComparisonOperator op = 1;\n     */\n    op: APLValueCompare_ComparisonOperator;\n    /**\n     * @generated from protobuf field: proto.APLValue lhs = 2;\n     */\n    lhs?: APLValue;\n    /**\n     * @generated from protobuf field: proto.APLValue rhs = 3;\n     */\n    rhs?: APLValue;\n}\n/**\n * @generated from protobuf enum proto.APLValueCompare.ComparisonOperator\n */\nexport enum APLValueCompare_ComparisonOperator {\n    /**\n     * @generated from protobuf enum value: OpUnknown = 0;\n     */\n    OpUnknown = 0,\n    /**\n     * Equals\n     *\n     * @generated from protobuf enum value: OpEq = 1;\n     */\n    OpEq = 1,\n    /**\n     * Not equals\n     *\n     * @generated from protobuf enum value: OpNe = 2;\n     */\n    OpNe = 2,\n    /**\n     * Less than\n     *\n     * @generated from protobuf enum value: OpLt = 3;\n     */\n    OpLt = 3,\n    /**\n     * Less than or equal\n     *\n     * @generated from protobuf enum value: OpLe = 4;\n     */\n    OpLe = 4,\n    /**\n     * Greater than\n     *\n     * @generated from protobuf enum value: OpGt = 5;\n     */\n    OpGt = 5,\n    /**\n     * Greater than or equal\n     *\n     * @generated from protobuf enum value: OpGe = 6;\n     */\n    OpGe = 6\n}\n/**\n * @generated from protobuf message proto.APLValueDotIsActive\n */\nexport interface APLValueDotIsActive {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                  VALUES\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf enum proto.APLValueType\n */\nexport enum APLValueType {\n    /**\n     * @generated from protobuf enum value: ValueTypeUnknown = 0;\n     */\n    ValueTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ValueTypeBool = 1;\n     */\n    ValueTypeBool = 1,\n    /**\n     * @generated from protobuf enum value: ValueTypeInt = 2;\n     */\n    ValueTypeInt = 2,\n    /**\n     * @generated from protobuf enum value: ValueTypeFloat = 3;\n     */\n    ValueTypeFloat = 3,\n    /**\n     * @generated from protobuf enum value: ValueTypeDuration = 4;\n     */\n    ValueTypeDuration = 4,\n    /**\n     * @generated from protobuf enum value: ValueTypeString = 5;\n     */\n    ValueTypeString = 5\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLRotation$Type extends MessageType<APLRotation> {\n    constructor() {\n        super(\"proto.APLRotation\", [\n            { no: 20, name: \"enabled\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"prepull_actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLPrepullAction },\n            { no: 2, name: \"priority_list\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLListItem }\n        ]);\n    }\n    create(value?: PartialMessage<APLRotation>): APLRotation {\n        const message = { enabled: false, prepullActions: [], priorityList: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLRotation): APLRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool enabled */ 20:\n                    message.enabled = reader.bool();\n                    break;\n                case /* repeated proto.APLPrepullAction prepull_actions */ 1:\n                    message.prepullActions.push(APLPrepullAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.APLListItem priority_list */ 2:\n                    message.priorityList.push(APLListItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool enabled = 20; */\n        if (message.enabled !== false)\n            writer.tag(20, WireType.Varint).bool(message.enabled);\n        /* repeated proto.APLPrepullAction prepull_actions = 1; */\n        for (let i = 0; i < message.prepullActions.length; i++)\n            APLPrepullAction.internalBinaryWrite(message.prepullActions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLListItem priority_list = 2; */\n        for (let i = 0; i < message.priorityList.length; i++)\n            APLListItem.internalBinaryWrite(message.priorityList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLRotation\n */\nexport const APLRotation = new APLRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLListItem$Type extends MessageType<APLListItem> {\n    constructor() {\n        super(\"proto.APLListItem\", [\n            { no: 1, name: \"hide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"notes\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"action\", kind: \"message\", T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLListItem>): APLListItem {\n        const message = { hide: false, notes: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLListItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLListItem): APLListItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hide */ 1:\n                    message.hide = reader.bool();\n                    break;\n                case /* string notes */ 2:\n                    message.notes = reader.string();\n                    break;\n                case /* proto.APLAction action */ 3:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLListItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hide = 1; */\n        if (message.hide !== false)\n            writer.tag(1, WireType.Varint).bool(message.hide);\n        /* string notes = 2; */\n        if (message.notes !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.notes);\n        /* proto.APLAction action = 3; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLListItem\n */\nexport const APLListItem = new APLListItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLAction$Type extends MessageType<APLAction> {\n    constructor() {\n        super(\"proto.APLAction\", [\n            { no: 1, name: \"condition\", kind: \"message\", T: () => APLValue },\n            { no: 2, name: \"sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionSequence },\n            { no: 3, name: \"cast_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionCastSpell },\n            { no: 4, name: \"wait\", kind: \"message\", oneof: \"action\", T: () => APLActionWait }\n        ]);\n    }\n    create(value?: PartialMessage<APLAction>): APLAction {\n        const message = { action: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLAction): APLAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue condition */ 1:\n                    message.condition = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.condition);\n                    break;\n                case /* proto.APLActionSequence sequence */ 2:\n                    message.action = {\n                        oneofKind: \"sequence\",\n                        sequence: APLActionSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).sequence)\n                    };\n                    break;\n                case /* proto.APLActionCastSpell cast_spell */ 3:\n                    message.action = {\n                        oneofKind: \"castSpell\",\n                        castSpell: APLActionCastSpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).castSpell)\n                    };\n                    break;\n                case /* proto.APLActionWait wait */ 4:\n                    message.action = {\n                        oneofKind: \"wait\",\n                        wait: APLActionWait.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).wait)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue condition = 1; */\n        if (message.condition)\n            APLValue.internalBinaryWrite(message.condition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionSequence sequence = 2; */\n        if (message.action.oneofKind === \"sequence\")\n            APLActionSequence.internalBinaryWrite(message.action.sequence, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCastSpell cast_spell = 3; */\n        if (message.action.oneofKind === \"castSpell\")\n            APLActionCastSpell.internalBinaryWrite(message.action.castSpell, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionWait wait = 4; */\n        if (message.action.oneofKind === \"wait\")\n            APLActionWait.internalBinaryWrite(message.action.wait, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLAction\n */\nexport const APLAction = new APLAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValue$Type extends MessageType<APLValue> {\n    constructor() {\n        super(\"proto.APLValue\", [\n            { no: 1, name: \"const\", kind: \"message\", oneof: \"value\", T: () => APLValueConst },\n            { no: 2, name: \"and\", kind: \"message\", oneof: \"value\", T: () => APLValueAnd },\n            { no: 3, name: \"or\", kind: \"message\", oneof: \"value\", T: () => APLValueOr },\n            { no: 4, name: \"not\", kind: \"message\", oneof: \"value\", T: () => APLValueNot },\n            { no: 5, name: \"cmp\", kind: \"message\", oneof: \"value\", T: () => APLValueCompare },\n            { no: 6, name: \"dot_is_active\", kind: \"message\", oneof: \"value\", T: () => APLValueDotIsActive }\n        ]);\n    }\n    create(value?: PartialMessage<APLValue>): APLValue {\n        const message = { value: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValue): APLValue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueConst const */ 1:\n                    message.value = {\n                        oneofKind: \"const\",\n                        const: APLValueConst.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).const)\n                    };\n                    break;\n                case /* proto.APLValueAnd and */ 2:\n                    message.value = {\n                        oneofKind: \"and\",\n                        and: APLValueAnd.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).and)\n                    };\n                    break;\n                case /* proto.APLValueOr or */ 3:\n                    message.value = {\n                        oneofKind: \"or\",\n                        or: APLValueOr.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).or)\n                    };\n                    break;\n                case /* proto.APLValueNot not */ 4:\n                    message.value = {\n                        oneofKind: \"not\",\n                        not: APLValueNot.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).not)\n                    };\n                    break;\n                case /* proto.APLValueCompare cmp */ 5:\n                    message.value = {\n                        oneofKind: \"cmp\",\n                        cmp: APLValueCompare.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).cmp)\n                    };\n                    break;\n                case /* proto.APLValueDotIsActive dot_is_active */ 6:\n                    message.value = {\n                        oneofKind: \"dotIsActive\",\n                        dotIsActive: APLValueDotIsActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotIsActive)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueConst const = 1; */\n        if (message.value.oneofKind === \"const\")\n            APLValueConst.internalBinaryWrite(message.value.const, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAnd and = 2; */\n        if (message.value.oneofKind === \"and\")\n            APLValueAnd.internalBinaryWrite(message.value.and, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueOr or = 3; */\n        if (message.value.oneofKind === \"or\")\n            APLValueOr.internalBinaryWrite(message.value.or, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNot not = 4; */\n        if (message.value.oneofKind === \"not\")\n            APLValueNot.internalBinaryWrite(message.value.not, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCompare cmp = 5; */\n        if (message.value.oneofKind === \"cmp\")\n            APLValueCompare.internalBinaryWrite(message.value.cmp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotIsActive dot_is_active = 6; */\n        if (message.value.oneofKind === \"dotIsActive\")\n            APLValueDotIsActive.internalBinaryWrite(message.value.dotIsActive, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValue\n */\nexport const APLValue = new APLValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLPrepullAction$Type extends MessageType<APLPrepullAction> {\n    constructor() {\n        super(\"proto.APLPrepullAction\", [\n            { no: 1, name: \"action\", kind: \"message\", T: () => APLAction },\n            { no: 2, name: \"do_at\", kind: \"message\", T: () => Duration }\n        ]);\n    }\n    create(value?: PartialMessage<APLPrepullAction>): APLPrepullAction {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLPrepullAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLPrepullAction): APLPrepullAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLAction action */ 1:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                case /* proto.Duration do_at */ 2:\n                    message.doAt = Duration.internalBinaryRead(reader, reader.uint32(), options, message.doAt);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLPrepullAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLAction action = 1; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Duration do_at = 2; */\n        if (message.doAt)\n            Duration.internalBinaryWrite(message.doAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLPrepullAction\n */\nexport const APLPrepullAction = new APLPrepullAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionSequence$Type extends MessageType<APLActionSequence> {\n    constructor() {\n        super(\"proto.APLActionSequence\", [\n            { no: 1, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionSequence>): APLActionSequence {\n        const message = { actions: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionSequence): APLActionSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLAction actions */ 1:\n                    message.actions.push(APLAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLAction actions = 1; */\n        for (let i = 0; i < message.actions.length; i++)\n            APLAction.internalBinaryWrite(message.actions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionSequence\n */\nexport const APLActionSequence = new APLActionSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCastSpell$Type extends MessageType<APLActionCastSpell> {\n    constructor() {\n        super(\"proto.APLActionCastSpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCastSpell>): APLActionCastSpell {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCastSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCastSpell): APLActionCastSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCastSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCastSpell\n */\nexport const APLActionCastSpell = new APLActionCastSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionWait$Type extends MessageType<APLActionWait> {\n    constructor() {\n        super(\"proto.APLActionWait\", [\n            { no: 1, name: \"duration\", kind: \"message\", T: () => Duration }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionWait>): APLActionWait {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionWait>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionWait): APLActionWait {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Duration duration */ 1:\n                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionWait, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Duration duration = 1; */\n        if (message.duration)\n            Duration.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionWait\n */\nexport const APLActionWait = new APLActionWait$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueConst$Type extends MessageType<APLValueConst> {\n    constructor() {\n        super(\"proto.APLValueConst\", [\n            { no: 1, name: \"val\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueConst>): APLValueConst {\n        const message = { val: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueConst>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueConst): APLValueConst {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string val */ 1:\n                    message.val = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueConst, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string val = 1; */\n        if (message.val !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.val);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueConst\n */\nexport const APLValueConst = new APLValueConst$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAnd$Type extends MessageType<APLValueAnd> {\n    constructor() {\n        super(\"proto.APLValueAnd\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAnd>): APLValueAnd {\n        const message = { vals: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAnd>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAnd): APLValueAnd {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAnd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAnd\n */\nexport const APLValueAnd = new APLValueAnd$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueOr$Type extends MessageType<APLValueOr> {\n    constructor() {\n        super(\"proto.APLValueOr\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueOr>): APLValueOr {\n        const message = { vals: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueOr>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueOr): APLValueOr {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueOr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueOr\n */\nexport const APLValueOr = new APLValueOr$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNot$Type extends MessageType<APLValueNot> {\n    constructor() {\n        super(\"proto.APLValueNot\", [\n            { no: 1, name: \"val\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueNot>): APLValueNot {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNot): APLValueNot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue val */ 1:\n                    message.val = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.val);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueNot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue val = 1; */\n        if (message.val)\n            APLValue.internalBinaryWrite(message.val, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNot\n */\nexport const APLValueNot = new APLValueNot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCompare$Type extends MessageType<APLValueCompare> {\n    constructor() {\n        super(\"proto.APLValueCompare\", [\n            { no: 1, name: \"op\", kind: \"enum\", T: () => [\"proto.APLValueCompare.ComparisonOperator\", APLValueCompare_ComparisonOperator] },\n            { no: 2, name: \"lhs\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"rhs\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCompare>): APLValueCompare {\n        const message = { op: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCompare>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCompare): APLValueCompare {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueCompare.ComparisonOperator op */ 1:\n                    message.op = reader.int32();\n                    break;\n                case /* proto.APLValue lhs */ 2:\n                    message.lhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.lhs);\n                    break;\n                case /* proto.APLValue rhs */ 3:\n                    message.rhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rhs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCompare, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueCompare.ComparisonOperator op = 1; */\n        if (message.op !== 0)\n            writer.tag(1, WireType.Varint).int32(message.op);\n        /* proto.APLValue lhs = 2; */\n        if (message.lhs)\n            APLValue.internalBinaryWrite(message.lhs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue rhs = 3; */\n        if (message.rhs)\n            APLValue.internalBinaryWrite(message.rhs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCompare\n */\nexport const APLValueCompare = new APLValueCompare$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotIsActive$Type extends MessageType<APLValueDotIsActive> {\n    constructor() {\n        super(\"proto.APLValueDotIsActive\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotIsActive>): APLValueDotIsActive {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotIsActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotIsActive): APLValueDotIsActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotIsActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotIsActive\n */\nexport const APLValueDotIsActive = new APLValueDotIsActive$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"deathknight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\nimport { ItemSwap } from \"./common\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.DeathknightTalents\n */\nexport interface DeathknightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 subversion = 2;\n     */\n    subversion: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 3;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 4;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 6;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 7;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: int32 dark_conviction = 8;\n     */\n    darkConviction: number;\n    /**\n     * @generated from protobuf field: int32 death_rune_mastery = 9;\n     */\n    deathRuneMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_rune_tap = 10;\n     */\n    improvedRuneTap: number;\n    /**\n     * @generated from protobuf field: int32 spell_deflection = 11;\n     */\n    spellDeflection: number;\n    /**\n     * @generated from protobuf field: int32 vendetta = 12;\n     */\n    vendetta: number;\n    /**\n     * @generated from protobuf field: int32 bloody_strikes = 13;\n     */\n    bloodyStrikes: number;\n    /**\n     * @generated from protobuf field: int32 veteran_of_the_third_war = 14;\n     */\n    veteranOfTheThirdWar: number;\n    /**\n     * @generated from protobuf field: bool mark_of_blood = 15;\n     */\n    markOfBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 bloody_vengeance = 16;\n     */\n    bloodyVengeance: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 17;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 bloodworms = 18;\n     */\n    bloodworms: number;\n    /**\n     * @generated from protobuf field: bool hysteria = 19;\n     */\n    hysteria: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 20;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 21;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 22;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 23;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 24;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool heart_strike = 25;\n     */\n    heartStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 might_of_mograine = 26;\n     */\n    mightOfMograine: number;\n    /**\n     * @generated from protobuf field: int32 blood_gorged = 27;\n     */\n    bloodGorged: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 28;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 improved_icy_touch = 29;\n     */\n    improvedIcyTouch: number;\n    /**\n     * @generated from protobuf field: int32 runic_power_mastery = 30;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 31;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 32;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 black_ice = 33;\n     */\n    blackIce: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 34;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 icy_talons = 35;\n     */\n    icyTalons: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 36;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 annihilation = 37;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 38;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 39;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 40;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 frigid_dreadplate = 41;\n     */\n    frigidDreadplate: number;\n    /**\n     * @generated from protobuf field: int32 glacier_rot = 42;\n     */\n    glacierRot: number;\n    /**\n     * @generated from protobuf field: bool deathchill = 43;\n     */\n    deathchill: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 44;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 45;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 rime = 46;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 47;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 48;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 49;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 50;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_north = 51;\n     */\n    bloodOfTheNorth: number;\n    /**\n     * @generated from protobuf field: bool unbreakable_armor = 52;\n     */\n    unbreakableArmor: boolean;\n    /**\n     * @generated from protobuf field: int32 acclimation = 53;\n     */\n    acclimation: number;\n    /**\n     * @generated from protobuf field: bool frost_strike = 54;\n     */\n    frostStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 guile_of_gorefiend = 55;\n     */\n    guileOfGorefiend: number;\n    /**\n     * @generated from protobuf field: int32 tundra_stalker = 56;\n     */\n    tundraStalker: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 57;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 vicious_strikes = 58;\n     */\n    viciousStrikes: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 59;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 60;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 61;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 62;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 unholy_command = 63;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 ravenous_dead = 64;\n     */\n    ravenousDead: number;\n    /**\n     * @generated from protobuf field: int32 outbreak = 65;\n     */\n    outbreak: number;\n    /**\n     * @generated from protobuf field: int32 necrosis = 66;\n     */\n    necrosis: number;\n    /**\n     * @generated from protobuf field: bool corpse_explosion = 67;\n     */\n    corpseExplosion: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 68;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 69;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: int32 night_of_the_dead = 70;\n     */\n    nightOfTheDead: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 71;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: int32 impurity = 72;\n     */\n    impurity: number;\n    /**\n     * @generated from protobuf field: int32 dirge = 73;\n     */\n    dirge: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 74;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 75;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 reaping = 76;\n     */\n    reaping: number;\n    /**\n     * @generated from protobuf field: bool master_of_ghouls = 77;\n     */\n    masterOfGhouls: boolean;\n    /**\n     * @generated from protobuf field: int32 desolation = 78;\n     */\n    desolation: number;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 79;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 80;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool ghoul_frenzy = 81;\n     */\n    ghoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 crypt_fever = 82;\n     */\n    cryptFever: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 83;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 wandering_plague = 84;\n     */\n    wanderingPlague: number;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 85;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: bool scourge_strike = 86;\n     */\n    scourgeStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 87;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 88;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.Deathknight\n */\nexport interface Deathknight {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation rotation = 1;\n     */\n    rotation?: Deathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Options options = 3;\n     */\n    options?: Deathknight_Options;\n}\n/**\n * @generated from protobuf message proto.Deathknight.Rotation\n */\nexport interface Deathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19;\n     */\n    frostRotationType: Deathknight_Rotation_FrostRotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation frost_custom_rotation = 20;\n     */\n    frostCustomRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1;\n     */\n    armyOfTheDead: Deathknight_Rotation_ArmyOfTheDead;\n    /**\n     * @generated from protobuf field: bool use_death_and_decay = 2;\n     */\n    useDeathAndDecay: boolean;\n    /**\n     * @generated from protobuf field: bool bt_ghoul_frenzy = 3;\n     */\n    btGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: double disease_refresh_duration = 4;\n     */\n    diseaseRefreshDuration: number;\n    /**\n     * @generated from protobuf field: bool refresh_horn_of_winter = 5;\n     */\n    refreshHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FirstDisease first_disease = 6;\n     */\n    firstDisease: Deathknight_Rotation_FirstDisease;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7;\n     */\n    deathAndDecayPrio: Deathknight_Rotation_DeathAndDecayPrio;\n    /**\n     * @generated from protobuf field: bool use_empower_rune_weapon = 8;\n     */\n    useEmpowerRuneWeapon: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9;\n     */\n    bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence starting_presence = 10;\n     */\n    startingPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodTap blood_tap = 11;\n     */\n    bloodTap: Deathknight_Rotation_BloodTap;\n    /**\n     * @generated from protobuf field: bool use_ams = 13;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 14;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 15;\n     */\n    avgAmsHit: number;\n    /**\n     * @generated from protobuf field: bool auto_rotation = 16;\n     */\n    autoRotation: boolean;\n    /**\n     * @generated from protobuf field: bool desync_rotation = 17;\n     */\n    desyncRotation: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence bl_presence = 18;\n     */\n    blPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence presence = 21;\n     */\n    presence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: bool hold_erw_army = 22;\n     */\n    holdErwArmy: boolean;\n    /**\n     * @generated from protobuf field: bool use_gargoyle = 23;\n     */\n    useGargoyle: boolean;\n    /**\n     * @generated from protobuf field: bool pre_nerfed_gargoyle = 24;\n     */\n    preNerfedGargoyle: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence gargoyle_presence = 25;\n     */\n    gargoylePresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.DrwDiseases drw_diseases = 26;\n     */\n    drwDiseases: Deathknight_Rotation_DrwDiseases;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodOpener blood_opener = 27;\n     */\n    bloodOpener: Deathknight_Rotation_BloodOpener;\n    /**\n     * @generated from protobuf field: bool enable_weapon_swap = 28;\n     */\n    enableWeaponSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap weapon_swap = 29;\n     */\n    weaponSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: bool use_dancing_rune_weapon = 30;\n     */\n    useDancingRuneWeapon: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodSpell blood_spender = 31;\n     */\n    bloodSpender: Deathknight_Rotation_BloodSpell;\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.DrwDiseases\n */\nexport enum Deathknight_Rotation_DrwDiseases {\n    /**\n     * @generated from protobuf enum value: DoNotApply = 0;\n     */\n    DoNotApply = 0,\n    /**\n     * @generated from protobuf enum value: Normal = 1;\n     */\n    Normal = 1,\n    /**\n     * @generated from protobuf enum value: Pestilence = 2;\n     */\n    Pestilence = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.ArmyOfTheDead\n */\nexport enum Deathknight_Rotation_ArmyOfTheDead {\n    /**\n     * @generated from protobuf enum value: DoNotUse = 0;\n     */\n    DoNotUse = 0,\n    /**\n     * @generated from protobuf enum value: PreCast = 1;\n     */\n    PreCast = 1,\n    /**\n     * @generated from protobuf enum value: AsMajorCd = 2;\n     */\n    AsMajorCd = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodTap\n */\nexport enum Deathknight_Rotation_BloodTap {\n    /**\n     * @generated from protobuf enum value: GhoulFrenzy = 0;\n     */\n    GhoulFrenzy = 0,\n    /**\n     * @generated from protobuf enum value: IcyTouch = 1;\n     */\n    IcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: BloodStrikeBT = 2;\n     */\n    BloodStrikeBT = 2,\n    /**\n     * @generated from protobuf enum value: BloodBoilBT = 3;\n     */\n    BloodBoilBT = 3\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.DeathAndDecayPrio\n */\nexport enum Deathknight_Rotation_DeathAndDecayPrio {\n    /**\n     * @generated from protobuf enum value: MaxRuneDowntime = 0;\n     */\n    MaxRuneDowntime = 0,\n    /**\n     * @generated from protobuf enum value: MaxDndUptime = 1;\n     */\n    MaxDndUptime = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FirstDisease\n */\nexport enum Deathknight_Rotation_FirstDisease {\n    /**\n     * @generated from protobuf enum value: FrostFever = 0;\n     */\n    FrostFever = 0,\n    /**\n     * @generated from protobuf enum value: BloodPlague = 1;\n     */\n    BloodPlague = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodRuneFiller\n */\nexport enum Deathknight_Rotation_BloodRuneFiller {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.Presence\n */\nexport enum Deathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Unholy = 1;\n     */\n    Unholy = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FrostRotationType\n */\nexport enum Deathknight_Rotation_FrostRotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodOpener\n */\nexport enum Deathknight_Rotation_BloodOpener {\n    /**\n     * @generated from protobuf enum value: Standard = 0;\n     */\n    Standard = 0,\n    /**\n     * @generated from protobuf enum value: Experimental_1 = 1;\n     */\n    Experimental_1 = 1,\n    /**\n     * @generated from protobuf enum value: Experimental_2 = 2;\n     */\n    Experimental_2 = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodSpell\n */\nexport enum Deathknight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: HS = 0;\n     */\n    HS = 0,\n    /**\n     * @generated from protobuf enum value: BB = 1;\n     */\n    BB = 1,\n    /**\n     * @generated from protobuf enum value: BS = 2;\n     */\n    BS = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.CustomSpellOption\n */\nexport enum Deathknight_Rotation_CustomSpellOption {\n    /**\n     * @generated from protobuf enum value: CustomNoSpell = 0;\n     */\n    CustomNoSpell = 0,\n    /**\n     * @generated from protobuf enum value: CustomIcyTouch = 1;\n     */\n    CustomIcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: CustomPlagueStrike = 2;\n     */\n    CustomPlagueStrike = 2,\n    /**\n     * @generated from protobuf enum value: CustomPestilence = 3;\n     */\n    CustomPestilence = 3,\n    /**\n     * @generated from protobuf enum value: CustomObliterate = 4;\n     */\n    CustomObliterate = 4,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlast = 5;\n     */\n    CustomHowlingBlast = 5,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlastRime = 6;\n     */\n    CustomHowlingBlastRime = 6,\n    /**\n     * @generated from protobuf enum value: CustomBloodBoil = 7;\n     */\n    CustomBloodBoil = 7,\n    /**\n     * @generated from protobuf enum value: CustomBloodStrike = 8;\n     */\n    CustomBloodStrike = 8,\n    /**\n     * @generated from protobuf enum value: CustomDeathAndDecay = 9;\n     */\n    CustomDeathAndDecay = 9,\n    /**\n     * @generated from protobuf enum value: CustomHornOfWinter = 10;\n     */\n    CustomHornOfWinter = 10,\n    /**\n     * @generated from protobuf enum value: CustomUnbreakableArmor = 11;\n     */\n    CustomUnbreakableArmor = 11,\n    /**\n     * @generated from protobuf enum value: CustomBloodTap = 12;\n     */\n    CustomBloodTap = 12,\n    /**\n     * @generated from protobuf enum value: CustomEmpoweredRuneWeapon = 13;\n     */\n    CustomEmpoweredRuneWeapon = 13,\n    /**\n     * @generated from protobuf enum value: CustomFrostStrike = 14;\n     */\n    CustomFrostStrike = 14\n}\n/**\n * @generated from protobuf message proto.Deathknight.Options\n */\nexport interface Deathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: bool precast_ghoul_frenzy = 3;\n     */\n    precastGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool precast_horn_of_winter = 4;\n     */\n    precastHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 5;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: bool drw_pesti_apply = 6;\n     */\n    drwPestiApply: boolean;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight\n */\nexport interface TankDeathknight {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation rotation = 1;\n     */\n    rotation?: TankDeathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Options options = 3;\n     */\n    options?: TankDeathknight_Options;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Rotation\n */\nexport interface TankDeathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Opener opener = 1;\n     */\n    opener: TankDeathknight_Rotation_Opener;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2;\n     */\n    optimizationSetting: TankDeathknight_Rotation_OptimizationSetting;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3;\n     */\n    bloodSpell: TankDeathknight_Rotation_BloodSpell;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Presence presence = 4;\n     */\n    presence: TankDeathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.BloodTapPrio blood_tap_prio = 5;\n     */\n    bloodTapPrio: TankDeathknight_Rotation_BloodTapPrio;\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Opener\n */\nexport enum TankDeathknight_Rotation_Opener {\n    /**\n     * @generated from protobuf enum value: Regular = 0;\n     */\n    Regular = 0,\n    /**\n     * @generated from protobuf enum value: Threat = 1;\n     */\n    Threat = 1\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.OptimizationSetting\n */\nexport enum TankDeathknight_Rotation_OptimizationSetting {\n    /**\n     * @generated from protobuf enum value: Hps = 0;\n     */\n    Hps = 0,\n    /**\n     * @generated from protobuf enum value: Tps = 1;\n     */\n    Tps = 1\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.BloodSpell\n */\nexport enum TankDeathknight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1,\n    /**\n     * @generated from protobuf enum value: HeartStrike = 2;\n     */\n    HeartStrike = 2\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.BloodTapPrio\n */\nexport enum TankDeathknight_Rotation_BloodTapPrio {\n    /**\n     * @generated from protobuf enum value: Defensive = 0;\n     */\n    Defensive = 0,\n    /**\n     * @generated from protobuf enum value: Offensive = 1;\n     */\n    Offensive = 1\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Presence\n */\nexport enum TankDeathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Frost = 1;\n     */\n    Frost = 1,\n    /**\n     * @generated from protobuf enum value: Unholy = 2;\n     */\n    Unholy = 2\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Options\n */\nexport interface TankDeathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 2;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: double defensive_delay = 3;\n     */\n    defensiveDelay: number;\n}\n/**\n * @generated from protobuf enum proto.DeathknightMajorGlyph\n */\nexport enum DeathknightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMajorGlyphNone = 0;\n     */\n    DeathknightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodStrike = 43826;\n     */\n    GlyphOfBloodStrike = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkCommand = 43538;\n     */\n    GlyphOfDarkCommand = 43538,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkDeath = 45804;\n     */\n    GlyphOfDarkDeath = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisease = 45805;\n     */\n    GlyphOfDisease = 45805,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceboundFortitude = 43545;\n     */\n    GlyphOfIceboundFortitude = 43545,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfPlagueStrike = 43548;\n     */\n    GlyphOfPlagueStrike = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheGhoul = 43549;\n     */\n    GlyphOfTheGhoul = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnbreakableArmor = 43553;\n     */\n    GlyphOfUnbreakableArmor = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnholyBlight = 45803;\n     */\n    GlyphOfUnholyBlight = 45803,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathknightMinorGlyph\n */\nexport enum DeathknightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMinorGlyphNone = 0;\n     */\n    DeathknightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorpseExplosion = 43671;\n     */\n    GlyphOfCorpseExplosion = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43672;\n     */\n    GlyphOfPestilence = 43672,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43673;\n     */\n    GlyphOfRaiseDead = 43673\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathknightTalents$Type extends MessageType<DeathknightTalents> {\n    constructor() {\n        super(\"proto.DeathknightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"subversion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"dark_conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"death_rune_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_rune_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"spell_deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"vendetta\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"bloody_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"veteran_of_the_third_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"mark_of_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"bloody_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bloodworms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"hysteria\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"heart_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"might_of_mograine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"blood_gorged\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_icy_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"black_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"icy_talons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"frigid_dreadplate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"glacier_rot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"deathchill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"blood_of_the_north\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"unbreakable_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"acclimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"frost_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"guile_of_gorefiend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"tundra_stalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"vicious_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"ravenous_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"outbreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"necrosis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"corpse_explosion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"night_of_the_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"impurity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"dirge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"reaping\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"master_of_ghouls\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"desolation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"crypt_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"wandering_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"scourge_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 87, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 88, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathknightTalents>): DeathknightTalents {\n        const message = { butchery: 0, subversion: 0, bladeBarrier: 0, bladedArmor: 0, scentOfBlood: 0, twoHandedWeaponSpecialization: 0, runeTap: false, darkConviction: 0, deathRuneMastery: 0, improvedRuneTap: 0, spellDeflection: 0, vendetta: 0, bloodyStrikes: 0, veteranOfTheThirdWar: 0, markOfBlood: false, bloodyVengeance: 0, abominationsMight: 0, bloodworms: 0, hysteria: false, improvedBloodPresence: 0, improvedDeathStrike: 0, suddenDoom: 0, vampiricBlood: false, willOfTheNecropolis: 0, heartStrike: false, mightOfMograine: 0, bloodGorged: 0, dancingRuneWeapon: false, improvedIcyTouch: 0, runicPowerMastery: 0, toughness: 0, icyReach: 0, blackIce: 0, nervesOfColdSteel: 0, icyTalons: 0, lichborne: false, annihilation: 0, killingMachine: 0, chillOfTheGrave: 0, endlessWinter: 0, frigidDreadplate: 0, glacierRot: 0, deathchill: false, improvedIcyTalons: false, mercilessCombat: 0, rime: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, bloodOfTheNorth: 0, unbreakableArmor: false, acclimation: 0, frostStrike: false, guileOfGorefiend: 0, tundraStalker: 0, howlingBlast: false, viciousStrikes: 0, virulence: 0, anticipation: 0, epidemic: 0, morbidity: 0, unholyCommand: 0, ravenousDead: 0, outbreak: 0, necrosis: 0, corpseExplosion: false, onAPaleHorse: 0, bloodCakedBlade: 0, nightOfTheDead: 0, unholyBlight: false, impurity: 0, dirge: 0, desecration: 0, magicSuppression: 0, reaping: 0, masterOfGhouls: false, desolation: 0, antiMagicZone: false, improvedUnholyPresence: 0, ghoulFrenzy: false, cryptFever: 0, boneShield: false, wanderingPlague: 0, ebonPlaguebringer: 0, scourgeStrike: false, rageOfRivendare: 0, summonGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathknightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathknightTalents): DeathknightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 subversion */ 2:\n                    message.subversion = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 3:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 4:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 6:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool rune_tap */ 7:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* int32 dark_conviction */ 8:\n                    message.darkConviction = reader.int32();\n                    break;\n                case /* int32 death_rune_mastery */ 9:\n                    message.deathRuneMastery = reader.int32();\n                    break;\n                case /* int32 improved_rune_tap */ 10:\n                    message.improvedRuneTap = reader.int32();\n                    break;\n                case /* int32 spell_deflection */ 11:\n                    message.spellDeflection = reader.int32();\n                    break;\n                case /* int32 vendetta */ 12:\n                    message.vendetta = reader.int32();\n                    break;\n                case /* int32 bloody_strikes */ 13:\n                    message.bloodyStrikes = reader.int32();\n                    break;\n                case /* int32 veteran_of_the_third_war */ 14:\n                    message.veteranOfTheThirdWar = reader.int32();\n                    break;\n                case /* bool mark_of_blood */ 15:\n                    message.markOfBlood = reader.bool();\n                    break;\n                case /* int32 bloody_vengeance */ 16:\n                    message.bloodyVengeance = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 17:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 bloodworms */ 18:\n                    message.bloodworms = reader.int32();\n                    break;\n                case /* bool hysteria */ 19:\n                    message.hysteria = reader.bool();\n                    break;\n                case /* int32 improved_blood_presence */ 20:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 improved_death_strike */ 21:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 22:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool vampiric_blood */ 23:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 will_of_the_necropolis */ 24:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool heart_strike */ 25:\n                    message.heartStrike = reader.bool();\n                    break;\n                case /* int32 might_of_mograine */ 26:\n                    message.mightOfMograine = reader.int32();\n                    break;\n                case /* int32 blood_gorged */ 27:\n                    message.bloodGorged = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 28:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 improved_icy_touch */ 29:\n                    message.improvedIcyTouch = reader.int32();\n                    break;\n                case /* int32 runic_power_mastery */ 30:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 31:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 32:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 black_ice */ 33:\n                    message.blackIce = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 34:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 icy_talons */ 35:\n                    message.icyTalons = reader.int32();\n                    break;\n                case /* bool lichborne */ 36:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 annihilation */ 37:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 38:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 39:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 40:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 frigid_dreadplate */ 41:\n                    message.frigidDreadplate = reader.int32();\n                    break;\n                case /* int32 glacier_rot */ 42:\n                    message.glacierRot = reader.int32();\n                    break;\n                case /* bool deathchill */ 43:\n                    message.deathchill = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 44:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 merciless_combat */ 45:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 rime */ 46:\n                    message.rime = reader.int32();\n                    break;\n                case /* int32 chilblains */ 47:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 48:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 49:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 50:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 blood_of_the_north */ 51:\n                    message.bloodOfTheNorth = reader.int32();\n                    break;\n                case /* bool unbreakable_armor */ 52:\n                    message.unbreakableArmor = reader.bool();\n                    break;\n                case /* int32 acclimation */ 53:\n                    message.acclimation = reader.int32();\n                    break;\n                case /* bool frost_strike */ 54:\n                    message.frostStrike = reader.bool();\n                    break;\n                case /* int32 guile_of_gorefiend */ 55:\n                    message.guileOfGorefiend = reader.int32();\n                    break;\n                case /* int32 tundra_stalker */ 56:\n                    message.tundraStalker = reader.int32();\n                    break;\n                case /* bool howling_blast */ 57:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 vicious_strikes */ 58:\n                    message.viciousStrikes = reader.int32();\n                    break;\n                case /* int32 virulence */ 59:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 anticipation */ 60:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 epidemic */ 61:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 morbidity */ 62:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 unholy_command */ 63:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 ravenous_dead */ 64:\n                    message.ravenousDead = reader.int32();\n                    break;\n                case /* int32 outbreak */ 65:\n                    message.outbreak = reader.int32();\n                    break;\n                case /* int32 necrosis */ 66:\n                    message.necrosis = reader.int32();\n                    break;\n                case /* bool corpse_explosion */ 67:\n                    message.corpseExplosion = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 68:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 69:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* int32 night_of_the_dead */ 70:\n                    message.nightOfTheDead = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 71:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* int32 impurity */ 72:\n                    message.impurity = reader.int32();\n                    break;\n                case /* int32 dirge */ 73:\n                    message.dirge = reader.int32();\n                    break;\n                case /* int32 desecration */ 74:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 75:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 reaping */ 76:\n                    message.reaping = reader.int32();\n                    break;\n                case /* bool master_of_ghouls */ 77:\n                    message.masterOfGhouls = reader.bool();\n                    break;\n                case /* int32 desolation */ 78:\n                    message.desolation = reader.int32();\n                    break;\n                case /* bool anti_magic_zone */ 79:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 80:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool ghoul_frenzy */ 81:\n                    message.ghoulFrenzy = reader.bool();\n                    break;\n                case /* int32 crypt_fever */ 82:\n                    message.cryptFever = reader.int32();\n                    break;\n                case /* bool bone_shield */ 83:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 wandering_plague */ 84:\n                    message.wanderingPlague = reader.int32();\n                    break;\n                case /* int32 ebon_plaguebringer */ 85:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* bool scourge_strike */ 86:\n                    message.scourgeStrike = reader.bool();\n                    break;\n                case /* int32 rage_of_rivendare */ 87:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 88:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathknightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 subversion = 2; */\n        if (message.subversion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.subversion);\n        /* int32 blade_barrier = 3; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 4; */\n        if (message.bladedArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bladedArmor);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 two_handed_weapon_specialization = 6; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(6, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool rune_tap = 7; */\n        if (message.runeTap !== false)\n            writer.tag(7, WireType.Varint).bool(message.runeTap);\n        /* int32 dark_conviction = 8; */\n        if (message.darkConviction !== 0)\n            writer.tag(8, WireType.Varint).int32(message.darkConviction);\n        /* int32 death_rune_mastery = 9; */\n        if (message.deathRuneMastery !== 0)\n            writer.tag(9, WireType.Varint).int32(message.deathRuneMastery);\n        /* int32 improved_rune_tap = 10; */\n        if (message.improvedRuneTap !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedRuneTap);\n        /* int32 spell_deflection = 11; */\n        if (message.spellDeflection !== 0)\n            writer.tag(11, WireType.Varint).int32(message.spellDeflection);\n        /* int32 vendetta = 12; */\n        if (message.vendetta !== 0)\n            writer.tag(12, WireType.Varint).int32(message.vendetta);\n        /* int32 bloody_strikes = 13; */\n        if (message.bloodyStrikes !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodyStrikes);\n        /* int32 veteran_of_the_third_war = 14; */\n        if (message.veteranOfTheThirdWar !== 0)\n            writer.tag(14, WireType.Varint).int32(message.veteranOfTheThirdWar);\n        /* bool mark_of_blood = 15; */\n        if (message.markOfBlood !== false)\n            writer.tag(15, WireType.Varint).bool(message.markOfBlood);\n        /* int32 bloody_vengeance = 16; */\n        if (message.bloodyVengeance !== 0)\n            writer.tag(16, WireType.Varint).int32(message.bloodyVengeance);\n        /* int32 abominations_might = 17; */\n        if (message.abominationsMight !== 0)\n            writer.tag(17, WireType.Varint).int32(message.abominationsMight);\n        /* int32 bloodworms = 18; */\n        if (message.bloodworms !== 0)\n            writer.tag(18, WireType.Varint).int32(message.bloodworms);\n        /* bool hysteria = 19; */\n        if (message.hysteria !== false)\n            writer.tag(19, WireType.Varint).bool(message.hysteria);\n        /* int32 improved_blood_presence = 20; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 improved_death_strike = 21; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 sudden_doom = 22; */\n        if (message.suddenDoom !== 0)\n            writer.tag(22, WireType.Varint).int32(message.suddenDoom);\n        /* bool vampiric_blood = 23; */\n        if (message.vampiricBlood !== false)\n            writer.tag(23, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 will_of_the_necropolis = 24; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool heart_strike = 25; */\n        if (message.heartStrike !== false)\n            writer.tag(25, WireType.Varint).bool(message.heartStrike);\n        /* int32 might_of_mograine = 26; */\n        if (message.mightOfMograine !== 0)\n            writer.tag(26, WireType.Varint).int32(message.mightOfMograine);\n        /* int32 blood_gorged = 27; */\n        if (message.bloodGorged !== 0)\n            writer.tag(27, WireType.Varint).int32(message.bloodGorged);\n        /* bool dancing_rune_weapon = 28; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(28, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 improved_icy_touch = 29; */\n        if (message.improvedIcyTouch !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedIcyTouch);\n        /* int32 runic_power_mastery = 30; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(30, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 toughness = 31; */\n        if (message.toughness !== 0)\n            writer.tag(31, WireType.Varint).int32(message.toughness);\n        /* int32 icy_reach = 32; */\n        if (message.icyReach !== 0)\n            writer.tag(32, WireType.Varint).int32(message.icyReach);\n        /* int32 black_ice = 33; */\n        if (message.blackIce !== 0)\n            writer.tag(33, WireType.Varint).int32(message.blackIce);\n        /* int32 nerves_of_cold_steel = 34; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 icy_talons = 35; */\n        if (message.icyTalons !== 0)\n            writer.tag(35, WireType.Varint).int32(message.icyTalons);\n        /* bool lichborne = 36; */\n        if (message.lichborne !== false)\n            writer.tag(36, WireType.Varint).bool(message.lichborne);\n        /* int32 annihilation = 37; */\n        if (message.annihilation !== 0)\n            writer.tag(37, WireType.Varint).int32(message.annihilation);\n        /* int32 killing_machine = 38; */\n        if (message.killingMachine !== 0)\n            writer.tag(38, WireType.Varint).int32(message.killingMachine);\n        /* int32 chill_of_the_grave = 39; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(39, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 endless_winter = 40; */\n        if (message.endlessWinter !== 0)\n            writer.tag(40, WireType.Varint).int32(message.endlessWinter);\n        /* int32 frigid_dreadplate = 41; */\n        if (message.frigidDreadplate !== 0)\n            writer.tag(41, WireType.Varint).int32(message.frigidDreadplate);\n        /* int32 glacier_rot = 42; */\n        if (message.glacierRot !== 0)\n            writer.tag(42, WireType.Varint).int32(message.glacierRot);\n        /* bool deathchill = 43; */\n        if (message.deathchill !== false)\n            writer.tag(43, WireType.Varint).bool(message.deathchill);\n        /* bool improved_icy_talons = 44; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(44, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 merciless_combat = 45; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(45, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 rime = 46; */\n        if (message.rime !== 0)\n            writer.tag(46, WireType.Varint).int32(message.rime);\n        /* int32 chilblains = 47; */\n        if (message.chilblains !== 0)\n            writer.tag(47, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 48; */\n        if (message.hungeringCold !== false)\n            writer.tag(48, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 49; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 50; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(50, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 blood_of_the_north = 51; */\n        if (message.bloodOfTheNorth !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bloodOfTheNorth);\n        /* bool unbreakable_armor = 52; */\n        if (message.unbreakableArmor !== false)\n            writer.tag(52, WireType.Varint).bool(message.unbreakableArmor);\n        /* int32 acclimation = 53; */\n        if (message.acclimation !== 0)\n            writer.tag(53, WireType.Varint).int32(message.acclimation);\n        /* bool frost_strike = 54; */\n        if (message.frostStrike !== false)\n            writer.tag(54, WireType.Varint).bool(message.frostStrike);\n        /* int32 guile_of_gorefiend = 55; */\n        if (message.guileOfGorefiend !== 0)\n            writer.tag(55, WireType.Varint).int32(message.guileOfGorefiend);\n        /* int32 tundra_stalker = 56; */\n        if (message.tundraStalker !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tundraStalker);\n        /* bool howling_blast = 57; */\n        if (message.howlingBlast !== false)\n            writer.tag(57, WireType.Varint).bool(message.howlingBlast);\n        /* int32 vicious_strikes = 58; */\n        if (message.viciousStrikes !== 0)\n            writer.tag(58, WireType.Varint).int32(message.viciousStrikes);\n        /* int32 virulence = 59; */\n        if (message.virulence !== 0)\n            writer.tag(59, WireType.Varint).int32(message.virulence);\n        /* int32 anticipation = 60; */\n        if (message.anticipation !== 0)\n            writer.tag(60, WireType.Varint).int32(message.anticipation);\n        /* int32 epidemic = 61; */\n        if (message.epidemic !== 0)\n            writer.tag(61, WireType.Varint).int32(message.epidemic);\n        /* int32 morbidity = 62; */\n        if (message.morbidity !== 0)\n            writer.tag(62, WireType.Varint).int32(message.morbidity);\n        /* int32 unholy_command = 63; */\n        if (message.unholyCommand !== 0)\n            writer.tag(63, WireType.Varint).int32(message.unholyCommand);\n        /* int32 ravenous_dead = 64; */\n        if (message.ravenousDead !== 0)\n            writer.tag(64, WireType.Varint).int32(message.ravenousDead);\n        /* int32 outbreak = 65; */\n        if (message.outbreak !== 0)\n            writer.tag(65, WireType.Varint).int32(message.outbreak);\n        /* int32 necrosis = 66; */\n        if (message.necrosis !== 0)\n            writer.tag(66, WireType.Varint).int32(message.necrosis);\n        /* bool corpse_explosion = 67; */\n        if (message.corpseExplosion !== false)\n            writer.tag(67, WireType.Varint).bool(message.corpseExplosion);\n        /* int32 on_a_pale_horse = 68; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(68, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 blood_caked_blade = 69; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(69, WireType.Varint).int32(message.bloodCakedBlade);\n        /* int32 night_of_the_dead = 70; */\n        if (message.nightOfTheDead !== 0)\n            writer.tag(70, WireType.Varint).int32(message.nightOfTheDead);\n        /* bool unholy_blight = 71; */\n        if (message.unholyBlight !== false)\n            writer.tag(71, WireType.Varint).bool(message.unholyBlight);\n        /* int32 impurity = 72; */\n        if (message.impurity !== 0)\n            writer.tag(72, WireType.Varint).int32(message.impurity);\n        /* int32 dirge = 73; */\n        if (message.dirge !== 0)\n            writer.tag(73, WireType.Varint).int32(message.dirge);\n        /* int32 desecration = 74; */\n        if (message.desecration !== 0)\n            writer.tag(74, WireType.Varint).int32(message.desecration);\n        /* int32 magic_suppression = 75; */\n        if (message.magicSuppression !== 0)\n            writer.tag(75, WireType.Varint).int32(message.magicSuppression);\n        /* int32 reaping = 76; */\n        if (message.reaping !== 0)\n            writer.tag(76, WireType.Varint).int32(message.reaping);\n        /* bool master_of_ghouls = 77; */\n        if (message.masterOfGhouls !== false)\n            writer.tag(77, WireType.Varint).bool(message.masterOfGhouls);\n        /* int32 desolation = 78; */\n        if (message.desolation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.desolation);\n        /* bool anti_magic_zone = 79; */\n        if (message.antiMagicZone !== false)\n            writer.tag(79, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 80; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(80, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool ghoul_frenzy = 81; */\n        if (message.ghoulFrenzy !== false)\n            writer.tag(81, WireType.Varint).bool(message.ghoulFrenzy);\n        /* int32 crypt_fever = 82; */\n        if (message.cryptFever !== 0)\n            writer.tag(82, WireType.Varint).int32(message.cryptFever);\n        /* bool bone_shield = 83; */\n        if (message.boneShield !== false)\n            writer.tag(83, WireType.Varint).bool(message.boneShield);\n        /* int32 wandering_plague = 84; */\n        if (message.wanderingPlague !== 0)\n            writer.tag(84, WireType.Varint).int32(message.wanderingPlague);\n        /* int32 ebon_plaguebringer = 85; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(85, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* bool scourge_strike = 86; */\n        if (message.scourgeStrike !== false)\n            writer.tag(86, WireType.Varint).bool(message.scourgeStrike);\n        /* int32 rage_of_rivendare = 87; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(87, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool summon_gargoyle = 88; */\n        if (message.summonGargoyle !== false)\n            writer.tag(88, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathknightTalents\n */\nexport const DeathknightTalents = new DeathknightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight$Type extends MessageType<Deathknight> {\n    constructor() {\n        super(\"proto.Deathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Deathknight_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Deathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight>): Deathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight): Deathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation rotation */ 1:\n                    message.rotation = Deathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Deathknight.Options options */ 3:\n                    message.options = Deathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            Deathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Options options = 3; */\n        if (message.options)\n            Deathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight\n */\nexport const Deathknight = new Deathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Rotation$Type extends MessageType<Deathknight_Rotation> {\n    constructor() {\n        super(\"proto.Deathknight.Rotation\", [\n            { no: 19, name: \"frost_rotation_type\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FrostRotationType\", Deathknight_Rotation_FrostRotationType] },\n            { no: 20, name: \"frost_custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 1, name: \"army_of_the_dead\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.ArmyOfTheDead\", Deathknight_Rotation_ArmyOfTheDead] },\n            { no: 2, name: \"use_death_and_decay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"bt_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disease_refresh_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"refresh_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"first_disease\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FirstDisease\", Deathknight_Rotation_FirstDisease] },\n            { no: 7, name: \"death_and_decay_prio\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.DeathAndDecayPrio\", Deathknight_Rotation_DeathAndDecayPrio] },\n            { no: 8, name: \"use_empower_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"blood_rune_filler\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodRuneFiller\", Deathknight_Rotation_BloodRuneFiller] },\n            { no: 10, name: \"starting_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 11, name: \"blood_tap\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodTap\", Deathknight_Rotation_BloodTap] },\n            { no: 13, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 16, name: \"auto_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"desync_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"bl_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 21, name: \"presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 22, name: \"hold_erw_army\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"use_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"pre_nerfed_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"gargoyle_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 26, name: \"drw_diseases\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.DrwDiseases\", Deathknight_Rotation_DrwDiseases] },\n            { no: 27, name: \"blood_opener\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodOpener\", Deathknight_Rotation_BloodOpener] },\n            { no: 28, name: \"enable_weapon_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"weapon_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 30, name: \"use_dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"blood_spender\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodSpell\", Deathknight_Rotation_BloodSpell] }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Rotation>): Deathknight_Rotation {\n        const message = { frostRotationType: 0, armyOfTheDead: 0, useDeathAndDecay: false, btGhoulFrenzy: false, diseaseRefreshDuration: 0, refreshHornOfWinter: false, firstDisease: 0, deathAndDecayPrio: 0, useEmpowerRuneWeapon: false, bloodRuneFiller: 0, startingPresence: 0, bloodTap: 0, useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0, autoRotation: false, desyncRotation: false, blPresence: 0, presence: 0, holdErwArmy: false, useGargoyle: false, preNerfedGargoyle: false, gargoylePresence: 0, drwDiseases: 0, bloodOpener: 0, enableWeaponSwap: false, useDancingRuneWeapon: false, bloodSpender: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Rotation): Deathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type */ 19:\n                    message.frostRotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation frost_custom_rotation */ 20:\n                    message.frostCustomRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.frostCustomRotation);\n                    break;\n                case /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead */ 1:\n                    message.armyOfTheDead = reader.int32();\n                    break;\n                case /* bool use_death_and_decay */ 2:\n                    message.useDeathAndDecay = reader.bool();\n                    break;\n                case /* bool bt_ghoul_frenzy */ 3:\n                    message.btGhoulFrenzy = reader.bool();\n                    break;\n                case /* double disease_refresh_duration */ 4:\n                    message.diseaseRefreshDuration = reader.double();\n                    break;\n                case /* bool refresh_horn_of_winter */ 5:\n                    message.refreshHornOfWinter = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.FirstDisease first_disease */ 6:\n                    message.firstDisease = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio */ 7:\n                    message.deathAndDecayPrio = reader.int32();\n                    break;\n                case /* bool use_empower_rune_weapon */ 8:\n                    message.useEmpowerRuneWeapon = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler */ 9:\n                    message.bloodRuneFiller = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence starting_presence */ 10:\n                    message.startingPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodTap blood_tap */ 11:\n                    message.bloodTap = reader.int32();\n                    break;\n                case /* bool use_ams */ 13:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 14:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 15:\n                    message.avgAmsHit = reader.double();\n                    break;\n                case /* bool auto_rotation */ 16:\n                    message.autoRotation = reader.bool();\n                    break;\n                case /* bool desync_rotation */ 17:\n                    message.desyncRotation = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence bl_presence */ 18:\n                    message.blPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence presence */ 21:\n                    message.presence = reader.int32();\n                    break;\n                case /* bool hold_erw_army */ 22:\n                    message.holdErwArmy = reader.bool();\n                    break;\n                case /* bool use_gargoyle */ 23:\n                    message.useGargoyle = reader.bool();\n                    break;\n                case /* bool pre_nerfed_gargoyle */ 24:\n                    message.preNerfedGargoyle = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence gargoyle_presence */ 25:\n                    message.gargoylePresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.DrwDiseases drw_diseases */ 26:\n                    message.drwDiseases = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodOpener blood_opener */ 27:\n                    message.bloodOpener = reader.int32();\n                    break;\n                case /* bool enable_weapon_swap */ 28:\n                    message.enableWeaponSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap weapon_swap */ 29:\n                    message.weaponSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.weaponSwap);\n                    break;\n                case /* bool use_dancing_rune_weapon */ 30:\n                    message.useDancingRuneWeapon = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodSpell blood_spender */ 31:\n                    message.bloodSpender = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19; */\n        if (message.frostRotationType !== 0)\n            writer.tag(19, WireType.Varint).int32(message.frostRotationType);\n        /* proto.CustomRotation frost_custom_rotation = 20; */\n        if (message.frostCustomRotation)\n            CustomRotation.internalBinaryWrite(message.frostCustomRotation, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1; */\n        if (message.armyOfTheDead !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armyOfTheDead);\n        /* bool use_death_and_decay = 2; */\n        if (message.useDeathAndDecay !== false)\n            writer.tag(2, WireType.Varint).bool(message.useDeathAndDecay);\n        /* bool bt_ghoul_frenzy = 3; */\n        if (message.btGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.btGhoulFrenzy);\n        /* double disease_refresh_duration = 4; */\n        if (message.diseaseRefreshDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.diseaseRefreshDuration);\n        /* bool refresh_horn_of_winter = 5; */\n        if (message.refreshHornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.refreshHornOfWinter);\n        /* proto.Deathknight.Rotation.FirstDisease first_disease = 6; */\n        if (message.firstDisease !== 0)\n            writer.tag(6, WireType.Varint).int32(message.firstDisease);\n        /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7; */\n        if (message.deathAndDecayPrio !== 0)\n            writer.tag(7, WireType.Varint).int32(message.deathAndDecayPrio);\n        /* bool use_empower_rune_weapon = 8; */\n        if (message.useEmpowerRuneWeapon !== false)\n            writer.tag(8, WireType.Varint).bool(message.useEmpowerRuneWeapon);\n        /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9; */\n        if (message.bloodRuneFiller !== 0)\n            writer.tag(9, WireType.Varint).int32(message.bloodRuneFiller);\n        /* proto.Deathknight.Rotation.Presence starting_presence = 10; */\n        if (message.startingPresence !== 0)\n            writer.tag(10, WireType.Varint).int32(message.startingPresence);\n        /* proto.Deathknight.Rotation.BloodTap blood_tap = 11; */\n        if (message.bloodTap !== 0)\n            writer.tag(11, WireType.Varint).int32(message.bloodTap);\n        /* bool use_ams = 13; */\n        if (message.useAms !== false)\n            writer.tag(13, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 14; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(14, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 15; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(15, WireType.Bit64).double(message.avgAmsHit);\n        /* bool auto_rotation = 16; */\n        if (message.autoRotation !== false)\n            writer.tag(16, WireType.Varint).bool(message.autoRotation);\n        /* bool desync_rotation = 17; */\n        if (message.desyncRotation !== false)\n            writer.tag(17, WireType.Varint).bool(message.desyncRotation);\n        /* proto.Deathknight.Rotation.Presence bl_presence = 18; */\n        if (message.blPresence !== 0)\n            writer.tag(18, WireType.Varint).int32(message.blPresence);\n        /* proto.Deathknight.Rotation.Presence presence = 21; */\n        if (message.presence !== 0)\n            writer.tag(21, WireType.Varint).int32(message.presence);\n        /* bool hold_erw_army = 22; */\n        if (message.holdErwArmy !== false)\n            writer.tag(22, WireType.Varint).bool(message.holdErwArmy);\n        /* bool use_gargoyle = 23; */\n        if (message.useGargoyle !== false)\n            writer.tag(23, WireType.Varint).bool(message.useGargoyle);\n        /* bool pre_nerfed_gargoyle = 24; */\n        if (message.preNerfedGargoyle !== false)\n            writer.tag(24, WireType.Varint).bool(message.preNerfedGargoyle);\n        /* proto.Deathknight.Rotation.Presence gargoyle_presence = 25; */\n        if (message.gargoylePresence !== 0)\n            writer.tag(25, WireType.Varint).int32(message.gargoylePresence);\n        /* proto.Deathknight.Rotation.DrwDiseases drw_diseases = 26; */\n        if (message.drwDiseases !== 0)\n            writer.tag(26, WireType.Varint).int32(message.drwDiseases);\n        /* proto.Deathknight.Rotation.BloodOpener blood_opener = 27; */\n        if (message.bloodOpener !== 0)\n            writer.tag(27, WireType.Varint).int32(message.bloodOpener);\n        /* bool enable_weapon_swap = 28; */\n        if (message.enableWeaponSwap !== false)\n            writer.tag(28, WireType.Varint).bool(message.enableWeaponSwap);\n        /* proto.ItemSwap weapon_swap = 29; */\n        if (message.weaponSwap)\n            ItemSwap.internalBinaryWrite(message.weaponSwap, writer.tag(29, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_dancing_rune_weapon = 30; */\n        if (message.useDancingRuneWeapon !== false)\n            writer.tag(30, WireType.Varint).bool(message.useDancingRuneWeapon);\n        /* proto.Deathknight.Rotation.BloodSpell blood_spender = 31; */\n        if (message.bloodSpender !== 0)\n            writer.tag(31, WireType.Varint).int32(message.bloodSpender);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Rotation\n */\nexport const Deathknight_Rotation = new Deathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Options$Type extends MessageType<Deathknight_Options> {\n    constructor() {\n        super(\"proto.Deathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"precast_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"precast_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 6, name: \"drw_pesti_apply\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Options>): Deathknight_Options {\n        const message = { startingRunicPower: 0, petUptime: 0, precastGhoulFrenzy: false, precastHornOfWinter: false, drwPestiApply: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Options): Deathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                case /* bool precast_ghoul_frenzy */ 3:\n                    message.precastGhoulFrenzy = reader.bool();\n                    break;\n                case /* bool precast_horn_of_winter */ 4:\n                    message.precastHornOfWinter = reader.bool();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 5:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                case /* bool drw_pesti_apply */ 6:\n                    message.drwPestiApply = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        /* bool precast_ghoul_frenzy = 3; */\n        if (message.precastGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.precastGhoulFrenzy);\n        /* bool precast_horn_of_winter = 4; */\n        if (message.precastHornOfWinter !== false)\n            writer.tag(4, WireType.Varint).bool(message.precastHornOfWinter);\n        /* proto.RaidTarget unholy_frenzy_target = 5; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* bool drw_pesti_apply = 6; */\n        if (message.drwPestiApply !== false)\n            writer.tag(6, WireType.Varint).bool(message.drwPestiApply);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Options\n */\nexport const Deathknight_Options = new Deathknight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight$Type extends MessageType<TankDeathknight> {\n    constructor() {\n        super(\"proto.TankDeathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => TankDeathknight_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => TankDeathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight>): TankDeathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight): TankDeathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation rotation */ 1:\n                    message.rotation = TankDeathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.TankDeathknight.Options options */ 3:\n                    message.options = TankDeathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            TankDeathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight.Options options = 3; */\n        if (message.options)\n            TankDeathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight\n */\nexport const TankDeathknight = new TankDeathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Rotation$Type extends MessageType<TankDeathknight_Rotation> {\n    constructor() {\n        super(\"proto.TankDeathknight.Rotation\", [\n            { no: 1, name: \"opener\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Opener\", TankDeathknight_Rotation_Opener] },\n            { no: 2, name: \"optimization_setting\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.OptimizationSetting\", TankDeathknight_Rotation_OptimizationSetting] },\n            { no: 3, name: \"blood_spell\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.BloodSpell\", TankDeathknight_Rotation_BloodSpell] },\n            { no: 4, name: \"presence\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Presence\", TankDeathknight_Rotation_Presence] },\n            { no: 5, name: \"blood_tap_prio\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.BloodTapPrio\", TankDeathknight_Rotation_BloodTapPrio] }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Rotation>): TankDeathknight_Rotation {\n        const message = { opener: 0, optimizationSetting: 0, bloodSpell: 0, presence: 0, bloodTapPrio: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Rotation): TankDeathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation.Opener opener */ 1:\n                    message.opener = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting */ 2:\n                    message.optimizationSetting = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.BloodSpell blood_spell */ 3:\n                    message.bloodSpell = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.Presence presence */ 4:\n                    message.presence = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.BloodTapPrio blood_tap_prio */ 5:\n                    message.bloodTapPrio = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation.Opener opener = 1; */\n        if (message.opener !== 0)\n            writer.tag(1, WireType.Varint).int32(message.opener);\n        /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2; */\n        if (message.optimizationSetting !== 0)\n            writer.tag(2, WireType.Varint).int32(message.optimizationSetting);\n        /* proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3; */\n        if (message.bloodSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bloodSpell);\n        /* proto.TankDeathknight.Rotation.Presence presence = 4; */\n        if (message.presence !== 0)\n            writer.tag(4, WireType.Varint).int32(message.presence);\n        /* proto.TankDeathknight.Rotation.BloodTapPrio blood_tap_prio = 5; */\n        if (message.bloodTapPrio !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodTapPrio);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Rotation\n */\nexport const TankDeathknight_Rotation = new TankDeathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Options$Type extends MessageType<TankDeathknight_Options> {\n    constructor() {\n        super(\"proto.TankDeathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 3, name: \"defensive_delay\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Options>): TankDeathknight_Options {\n        const message = { startingRunicPower: 0, defensiveDelay: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Options): TankDeathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 2:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                case /* double defensive_delay */ 3:\n                    message.defensiveDelay = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* proto.RaidTarget unholy_frenzy_target = 2; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* double defensive_delay = 3; */\n        if (message.defensiveDelay !== 0)\n            writer.tag(3, WireType.Bit64).double(message.defensiveDelay);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Options\n */\nexport const TankDeathknight_Options = new TankDeathknight_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 improved_heroic_strike = 1;\n     */\n    improvedHeroicStrike: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 2;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_rend = 3;\n     */\n    improvedRend: number;\n    /**\n     * @generated from protobuf field: int32 improved_charge = 4;\n     */\n    improvedCharge: number;\n    /**\n     * @generated from protobuf field: int32 iron_will = 5;\n     */\n    ironWill: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 6;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_overpower = 7;\n     */\n    improvedOverpower: number;\n    /**\n     * @generated from protobuf field: bool anger_management = 8;\n     */\n    angerManagement: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 9;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 10;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 11;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 12;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: int32 poleaxe_specialization = 13;\n     */\n    poleaxeSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 14;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 15;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 sword_specialization = 16;\n     */\n    swordSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 17;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 18;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 trauma = 19;\n     */\n    trauma: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 20;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: bool mortal_strike = 21;\n     */\n    mortalStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 strength_of_arms = 22;\n     */\n    strengthOfArms: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 23;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 24;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mortal_strike = 25;\n     */\n    improvedMortalStrike: number;\n    /**\n     * @generated from protobuf field: int32 unrelenting_assault = 26;\n     */\n    unrelentingAssault: number;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 27;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: bool endless_rage = 28;\n     */\n    endlessRage: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 29;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 30;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool bladestorm = 31;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 armored_to_the_teeth = 32;\n     */\n    armoredToTheTeeth: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 33;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 34;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 improved_demoralizing_shout = 35;\n     */\n    improvedDemoralizingShout: number;\n    /**\n     * @generated from protobuf field: int32 unbridled_wrath = 36;\n     */\n    unbridledWrath: number;\n    /**\n     * @generated from protobuf field: int32 improved_cleave = 37;\n     */\n    improvedCleave: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 38;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_craze = 39;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 commanding_presence = 40;\n     */\n    commandingPresence: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 41;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_execute = 42;\n     */\n    improvedExecute: number;\n    /**\n     * @generated from protobuf field: int32 enrage = 43;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 precision = 44;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 45;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_intercept = 46;\n     */\n    improvedIntercept: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_rage = 47;\n     */\n    improvedBerserkerRage: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 48;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 49;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: bool bloodthirst = 50;\n     */\n    bloodthirst: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_whirlwind = 51;\n     */\n    improvedWhirlwind: number;\n    /**\n     * @generated from protobuf field: int32 furious_attacks = 52;\n     */\n    furiousAttacks: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_stance = 53;\n     */\n    improvedBerserkerStance: number;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 54;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 55;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 56;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 unending_fury = 57;\n     */\n    unendingFury: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 58;\n     */\n    titansGrip: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 improved_bloodrage = 59;\n     */\n    improvedBloodrage: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 60;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_thunder_clap = 61;\n     */\n    improvedThunderClap: number;\n    /**\n     * @generated from protobuf field: int32 incite = 62;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 63;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 64;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 65;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 66;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 67;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_spell_reflection = 68;\n     */\n    improvedSpellReflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_disarm = 69;\n     */\n    improvedDisarm: number;\n    /**\n     * @generated from protobuf field: int32 puncture = 70;\n     */\n    puncture: number;\n    /**\n     * @generated from protobuf field: int32 improved_disciplines = 71;\n     */\n    improvedDisciplines: number;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 72;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 gag_order = 73;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 74;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_defensive_stance = 75;\n     */\n    improvedDefensiveStance: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 76;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_rage = 77;\n     */\n    focusedRage: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 78;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 79;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 80;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: bool devastate = 81;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 critical_block = 82;\n     */\n    criticalBlock: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 83;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: int32 damage_shield = 84;\n     */\n    damageShield: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 85;\n     */\n    shockwave: boolean;\n}\n/**\n * @generated from protobuf message proto.Warrior\n */\nexport interface Warrior {\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation rotation = 1;\n     */\n    rotation?: Warrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.Warrior.Options options = 3;\n     */\n    options?: Warrior_Options;\n}\n/**\n * @generated from protobuf message proto.Warrior.Rotation\n */\nexport interface Warrior_Rotation {\n    /**\n     * @generated from protobuf field: bool use_cleave = 1;\n     */\n    useCleave: boolean;\n    /**\n     * @generated from protobuf field: bool use_rend = 2;\n     */\n    useRend: boolean;\n    /**\n     * @generated from protobuf field: bool use_ms = 18;\n     */\n    useMs: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam = 3;\n     */\n    useSlam: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.MainGcd main_gcd = 4;\n     */\n    mainGcd: Warrior_Rotation_MainGcd;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.SunderArmor sunderArmor = 5;\n     */\n    sunderArmor: Warrior_Rotation_SunderArmor;\n    /**\n     * @generated from protobuf field: bool maintain_demo_shout = 6;\n     */\n    maintainDemoShout: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_thunder_clap = 7;\n     */\n    maintainThunderClap: boolean;\n    /**\n     * Queue HS or Cleave when over this threshold.\n     *\n     * @generated from protobuf field: double hs_rage_threshold = 8;\n     */\n    hsRageThreshold: number;\n    /**\n     * Use Mortal Strike when over this threshold.\n     *\n     * @generated from protobuf field: double ms_rage_threshold = 9;\n     */\n    msRageThreshold: number;\n    /**\n     * Use Rend when below this threshold.\n     *\n     * @generated from protobuf field: double rend_rage_threshold_below = 10;\n     */\n    rendRageThresholdBelow: number;\n    /**\n     * Use Slam when over this threshold.\n     *\n     * @generated from protobuf field: double slam_rage_threshold = 11;\n     */\n    slamRageThreshold: number;\n    /**\n     * Refresh Rend when remaining duration is less than this threshold.\n     *\n     * @generated from protobuf field: double rend_cd_threshold = 12;\n     */\n    rendCdThreshold: number;\n    /**\n     * @generated from protobuf field: bool use_hs_during_execute = 13;\n     */\n    useHsDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_bt_during_execute = 14;\n     */\n    useBtDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool spam_execute = 15;\n     */\n    spamExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_ww_during_execute = 16;\n     */\n    useWwDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam_over_execute = 17;\n     */\n    useSlamOverExecute: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.StanceOption stance_option = 19;\n     */\n    stanceOption: Warrior_Rotation_StanceOption;\n    /**\n     * @generated from protobuf field: double rend_health_threshold_above = 20;\n     */\n    rendHealthThresholdAbove: number;\n    /**\n     * Only used for Fury\n     *\n     * @generated from protobuf field: bool use_overpower = 21;\n     */\n    useOverpower: boolean;\n    /**\n     * @generated from protobuf field: bool execute_phase_overpower = 22;\n     */\n    executePhaseOverpower: boolean;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 23;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: bool custom_rotation_option = 24;\n     */\n    customRotationOption: boolean;\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.MainGcd\n */\nexport enum Warrior_Rotation_MainGcd {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Slam = 1;\n     */\n    Slam = 1,\n    /**\n     * @generated from protobuf enum value: Bloodthirst = 2;\n     */\n    Bloodthirst = 2,\n    /**\n     * @generated from protobuf enum value: Whirlwind = 3;\n     */\n    Whirlwind = 3\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.SunderArmor\n */\nexport enum Warrior_Rotation_SunderArmor {\n    /**\n     * @generated from protobuf enum value: SunderArmorNone = 0;\n     */\n    SunderArmorNone = 0,\n    /**\n     * @generated from protobuf enum value: SunderArmorHelpStack = 1;\n     */\n    SunderArmorHelpStack = 1,\n    /**\n     * @generated from protobuf enum value: SunderArmorMaintain = 2;\n     */\n    SunderArmorMaintain = 2\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.StanceOption\n */\nexport enum Warrior_Rotation_StanceOption {\n    /**\n     * @generated from protobuf enum value: DefaultStance = 0;\n     */\n    DefaultStance = 0,\n    /**\n     * @generated from protobuf enum value: BattleStance = 1;\n     */\n    BattleStance = 1,\n    /**\n     * @generated from protobuf enum value: BerserkerStance = 2;\n     */\n    BerserkerStance = 2\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.SpellOption\n */\nexport enum Warrior_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: BloodthirstCustom = 1;\n     */\n    BloodthirstCustom = 1,\n    /**\n     * @generated from protobuf enum value: MortalStrike = 2;\n     */\n    MortalStrike = 2,\n    /**\n     * @generated from protobuf enum value: WhirlwindCustom = 3;\n     */\n    WhirlwindCustom = 3,\n    /**\n     * @generated from protobuf enum value: SlamCustom = 4;\n     */\n    SlamCustom = 4,\n    /**\n     * @generated from protobuf enum value: Rend = 5;\n     */\n    Rend = 5,\n    /**\n     * @generated from protobuf enum value: Overpower = 6;\n     */\n    Overpower = 6,\n    /**\n     * @generated from protobuf enum value: Execute = 7;\n     */\n    Execute = 7\n}\n/**\n * @generated from protobuf message proto.Warrior.Options\n */\nexport interface Warrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 4;\n     */\n    useShatteringThrow: boolean;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 3;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool munch = 5;\n     */\n    munch: boolean;\n    /**\n     * @generated from protobuf field: bool stance_snapshot = 6;\n     */\n    stanceSnapshot: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation rotation = 1;\n     */\n    rotation?: ProtectionWarrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 3;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1;\n     */\n    demoShoutChoice: ProtectionWarrior_Rotation_DemoShoutChoice;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2;\n     */\n    thunderClapChoice: ProtectionWarrior_Rotation_ThunderClapChoice;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: double hs_rage_threshold = 4;\n     */\n    hsRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool prio_sslam_on_shield_block = 5;\n     */\n    prioSslamOnShieldBlock: boolean;\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.DemoShoutChoice\n */\nexport enum ProtectionWarrior_Rotation_DemoShoutChoice {\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceNone = 0;\n     */\n    DemoShoutChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceMaintain = 1;\n     */\n    DemoShoutChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceFiller = 2;\n     */\n    DemoShoutChoiceFiller = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.ThunderClapChoice\n */\nexport enum ProtectionWarrior_Rotation_ThunderClapChoice {\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceNone = 0;\n     */\n    ThunderClapChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceMaintain = 1;\n     */\n    ThunderClapChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceOnCD = 2;\n     */\n    ThunderClapChoiceOnCD = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.SpellOption\n */\nexport enum ProtectionWarrior_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Revenge = 1;\n     */\n    Revenge = 1,\n    /**\n     * @generated from protobuf enum value: ShieldSlam = 2;\n     */\n    ShieldSlam = 2,\n    /**\n     * @generated from protobuf enum value: Devastate = 3;\n     */\n    Devastate = 3,\n    /**\n     * @generated from protobuf enum value: SunderArmor = 4;\n     */\n    SunderArmor = 4,\n    /**\n     * @generated from protobuf enum value: Shout = 5;\n     */\n    Shout = 5,\n    /**\n     * @generated from protobuf enum value: DemoralizingShout = 6;\n     */\n    DemoralizingShout = 6,\n    /**\n     * @generated from protobuf enum value: ThunderClap = 7;\n     */\n    ThunderClap = 7,\n    /**\n     * @generated from protobuf enum value: MortalStrike = 8;\n     */\n    MortalStrike = 8,\n    /**\n     * @generated from protobuf enum value: ConcussionBlow = 9;\n     */\n    ConcussionBlow = 9,\n    /**\n     * @generated from protobuf enum value: Shockwave = 10;\n     */\n    Shockwave = 10\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 4;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 8;\n     */\n    useShatteringThrow: boolean;\n    /**\n     * @generated from protobuf field: bool munch = 9;\n     */\n    munch: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarbaricInsults = 43420;\n     */\n    GlyphOfBarbaricInsults = 43420,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlocking = 43425;\n     */\n    GlyphOfBlocking = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43412;\n     */\n    GlyphOfBloodthirst = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnragedRegeneration = 45794;\n     */\n    GlyphOfEnragedRegeneration = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfExecution = 43416;\n     */\n    GlyphOfExecution = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfHamstring = 43417;\n     */\n    GlyphOfHamstring = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicStrike = 43418;\n     */\n    GlyphOfHeroicStrike = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLastStand = 43426;\n     */\n    GlyphOfLastStand = 43426,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfRending = 43423;\n     */\n    GlyphOfRending = 43423,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfTaunt = 43429;\n     */\n    GlyphOfTaunt = 43429,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigilance = 45793;\n     */\n    GlyphOfVigilance = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfWhirlwind = 43432;\n     */\n    GlyphOfWhirlwind = 43432\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodrage = 43396;\n     */\n    GlyphOfBloodrage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfCharge = 43397;\n     */\n    GlyphOfCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfMockingBlow = 43398;\n     */\n    GlyphOfMockingBlow = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"improved_heroic_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_rend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_charge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"iron_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_overpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"anger_management\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"poleaxe_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"sword_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"trauma\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"mortal_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"strength_of_arms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"improved_mortal_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"unrelenting_assault\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"endless_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"armored_to_the_teeth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"improved_demoralizing_shout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"unbridled_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_cleave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"commanding_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"improved_execute\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_intercept\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_berserker_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"bloodthirst\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_whirlwind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"furious_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"improved_berserker_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"unending_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_bloodrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"improved_thunder_clap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_spell_reflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_disarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"puncture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"improved_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"improved_defensive_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"focused_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"critical_block\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"damage_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { improvedHeroicStrike: 0, deflection: 0, improvedRend: 0, improvedCharge: 0, ironWill: 0, tacticalMastery: 0, improvedOverpower: 0, angerManagement: false, impale: 0, deepWounds: 0, twoHandedWeaponSpecialization: 0, tasteForBlood: 0, poleaxeSpecialization: 0, sweepingStrikes: false, maceSpecialization: 0, swordSpecialization: 0, weaponMastery: 0, improvedHamstring: 0, trauma: 0, secondWind: 0, mortalStrike: false, strengthOfArms: 0, improvedSlam: 0, juggernaut: false, improvedMortalStrike: 0, unrelentingAssault: 0, suddenDeath: 0, endlessRage: false, bloodFrenzy: 0, wreckingCrew: 0, bladestorm: false, armoredToTheTeeth: 0, boomingVoice: 0, cruelty: 0, improvedDemoralizingShout: 0, unbridledWrath: 0, improvedCleave: 0, piercingHowl: false, bloodCraze: 0, commandingPresence: 0, dualWieldSpecialization: 0, improvedExecute: 0, enrage: 0, precision: 0, deathWish: false, improvedIntercept: 0, improvedBerserkerRage: 0, flurry: 0, intensifyRage: 0, bloodthirst: false, improvedWhirlwind: 0, furiousAttacks: 0, improvedBerserkerStance: 0, heroicFury: false, rampage: false, bloodsurge: 0, unendingFury: 0, titansGrip: false, improvedBloodrage: 0, shieldSpecialization: 0, improvedThunderClap: 0, incite: 0, anticipation: 0, lastStand: false, improvedRevenge: 0, shieldMastery: 0, toughness: 0, improvedSpellReflection: 0, improvedDisarm: 0, puncture: 0, improvedDisciplines: 0, concussionBlow: false, gagOrder: 0, oneHandedWeaponSpecialization: 0, improvedDefensiveStance: 0, vigilance: false, focusedRage: 0, vitality: 0, safeguard: 0, warbringer: false, devastate: false, criticalBlock: 0, swordAndBoard: 0, damageShield: 0, shockwave: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_heroic_strike */ 1:\n                    message.improvedHeroicStrike = reader.int32();\n                    break;\n                case /* int32 deflection */ 2:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 improved_rend */ 3:\n                    message.improvedRend = reader.int32();\n                    break;\n                case /* int32 improved_charge */ 4:\n                    message.improvedCharge = reader.int32();\n                    break;\n                case /* int32 iron_will */ 5:\n                    message.ironWill = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 6:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 improved_overpower */ 7:\n                    message.improvedOverpower = reader.int32();\n                    break;\n                case /* bool anger_management */ 8:\n                    message.angerManagement = reader.bool();\n                    break;\n                case /* int32 impale */ 9:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 10:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 11:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 12:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* int32 poleaxe_specialization */ 13:\n                    message.poleaxeSpecialization = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 14:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 mace_specialization */ 15:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* int32 sword_specialization */ 16:\n                    message.swordSpecialization = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 17:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 18:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 trauma */ 19:\n                    message.trauma = reader.int32();\n                    break;\n                case /* int32 second_wind */ 20:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* bool mortal_strike */ 21:\n                    message.mortalStrike = reader.bool();\n                    break;\n                case /* int32 strength_of_arms */ 22:\n                    message.strengthOfArms = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 23:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool juggernaut */ 24:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 improved_mortal_strike */ 25:\n                    message.improvedMortalStrike = reader.int32();\n                    break;\n                case /* int32 unrelenting_assault */ 26:\n                    message.unrelentingAssault = reader.int32();\n                    break;\n                case /* int32 sudden_death */ 27:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* bool endless_rage */ 28:\n                    message.endlessRage = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 29:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 30:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool bladestorm */ 31:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 armored_to_the_teeth */ 32:\n                    message.armoredToTheTeeth = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 33:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 cruelty */ 34:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 improved_demoralizing_shout */ 35:\n                    message.improvedDemoralizingShout = reader.int32();\n                    break;\n                case /* int32 unbridled_wrath */ 36:\n                    message.unbridledWrath = reader.int32();\n                    break;\n                case /* int32 improved_cleave */ 37:\n                    message.improvedCleave = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 38:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 39:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 commanding_presence */ 40:\n                    message.commandingPresence = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 41:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_execute */ 42:\n                    message.improvedExecute = reader.int32();\n                    break;\n                case /* int32 enrage */ 43:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 precision */ 44:\n                    message.precision = reader.int32();\n                    break;\n                case /* bool death_wish */ 45:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 improved_intercept */ 46:\n                    message.improvedIntercept = reader.int32();\n                    break;\n                case /* int32 improved_berserker_rage */ 47:\n                    message.improvedBerserkerRage = reader.int32();\n                    break;\n                case /* int32 flurry */ 48:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 49:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* bool bloodthirst */ 50:\n                    message.bloodthirst = reader.bool();\n                    break;\n                case /* int32 improved_whirlwind */ 51:\n                    message.improvedWhirlwind = reader.int32();\n                    break;\n                case /* int32 furious_attacks */ 52:\n                    message.furiousAttacks = reader.int32();\n                    break;\n                case /* int32 improved_berserker_stance */ 53:\n                    message.improvedBerserkerStance = reader.int32();\n                    break;\n                case /* bool heroic_fury */ 54:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool rampage */ 55:\n                    message.rampage = reader.bool();\n                    break;\n                case /* int32 bloodsurge */ 56:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 unending_fury */ 57:\n                    message.unendingFury = reader.int32();\n                    break;\n                case /* bool titans_grip */ 58:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* int32 improved_bloodrage */ 59:\n                    message.improvedBloodrage = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 60:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_thunder_clap */ 61:\n                    message.improvedThunderClap = reader.int32();\n                    break;\n                case /* int32 incite */ 62:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 anticipation */ 63:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool last_stand */ 64:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 65:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 66:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 67:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_spell_reflection */ 68:\n                    message.improvedSpellReflection = reader.int32();\n                    break;\n                case /* int32 improved_disarm */ 69:\n                    message.improvedDisarm = reader.int32();\n                    break;\n                case /* int32 puncture */ 70:\n                    message.puncture = reader.int32();\n                    break;\n                case /* int32 improved_disciplines */ 71:\n                    message.improvedDisciplines = reader.int32();\n                    break;\n                case /* bool concussion_blow */ 72:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 gag_order */ 73:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 74:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_defensive_stance */ 75:\n                    message.improvedDefensiveStance = reader.int32();\n                    break;\n                case /* bool vigilance */ 76:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 focused_rage */ 77:\n                    message.focusedRage = reader.int32();\n                    break;\n                case /* int32 vitality */ 78:\n                    message.vitality = reader.int32();\n                    break;\n                case /* int32 safeguard */ 79:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* bool warbringer */ 80:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* bool devastate */ 81:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 critical_block */ 82:\n                    message.criticalBlock = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 83:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* int32 damage_shield */ 84:\n                    message.damageShield = reader.int32();\n                    break;\n                case /* bool shockwave */ 85:\n                    message.shockwave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_heroic_strike = 1; */\n        if (message.improvedHeroicStrike !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedHeroicStrike);\n        /* int32 deflection = 2; */\n        if (message.deflection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.deflection);\n        /* int32 improved_rend = 3; */\n        if (message.improvedRend !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedRend);\n        /* int32 improved_charge = 4; */\n        if (message.improvedCharge !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCharge);\n        /* int32 iron_will = 5; */\n        if (message.ironWill !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ironWill);\n        /* int32 tactical_mastery = 6; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 improved_overpower = 7; */\n        if (message.improvedOverpower !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedOverpower);\n        /* bool anger_management = 8; */\n        if (message.angerManagement !== false)\n            writer.tag(8, WireType.Varint).bool(message.angerManagement);\n        /* int32 impale = 9; */\n        if (message.impale !== 0)\n            writer.tag(9, WireType.Varint).int32(message.impale);\n        /* int32 deep_wounds = 10; */\n        if (message.deepWounds !== 0)\n            writer.tag(10, WireType.Varint).int32(message.deepWounds);\n        /* int32 two_handed_weapon_specialization = 11; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(11, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* int32 taste_for_blood = 12; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(12, WireType.Varint).int32(message.tasteForBlood);\n        /* int32 poleaxe_specialization = 13; */\n        if (message.poleaxeSpecialization !== 0)\n            writer.tag(13, WireType.Varint).int32(message.poleaxeSpecialization);\n        /* bool sweeping_strikes = 14; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(14, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 mace_specialization = 15; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(15, WireType.Varint).int32(message.maceSpecialization);\n        /* int32 sword_specialization = 16; */\n        if (message.swordSpecialization !== 0)\n            writer.tag(16, WireType.Varint).int32(message.swordSpecialization);\n        /* int32 weapon_mastery = 17; */\n        if (message.weaponMastery !== 0)\n            writer.tag(17, WireType.Varint).int32(message.weaponMastery);\n        /* int32 improved_hamstring = 18; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 trauma = 19; */\n        if (message.trauma !== 0)\n            writer.tag(19, WireType.Varint).int32(message.trauma);\n        /* int32 second_wind = 20; */\n        if (message.secondWind !== 0)\n            writer.tag(20, WireType.Varint).int32(message.secondWind);\n        /* bool mortal_strike = 21; */\n        if (message.mortalStrike !== false)\n            writer.tag(21, WireType.Varint).bool(message.mortalStrike);\n        /* int32 strength_of_arms = 22; */\n        if (message.strengthOfArms !== 0)\n            writer.tag(22, WireType.Varint).int32(message.strengthOfArms);\n        /* int32 improved_slam = 23; */\n        if (message.improvedSlam !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSlam);\n        /* bool juggernaut = 24; */\n        if (message.juggernaut !== false)\n            writer.tag(24, WireType.Varint).bool(message.juggernaut);\n        /* int32 improved_mortal_strike = 25; */\n        if (message.improvedMortalStrike !== 0)\n            writer.tag(25, WireType.Varint).int32(message.improvedMortalStrike);\n        /* int32 unrelenting_assault = 26; */\n        if (message.unrelentingAssault !== 0)\n            writer.tag(26, WireType.Varint).int32(message.unrelentingAssault);\n        /* int32 sudden_death = 27; */\n        if (message.suddenDeath !== 0)\n            writer.tag(27, WireType.Varint).int32(message.suddenDeath);\n        /* bool endless_rage = 28; */\n        if (message.endlessRage !== false)\n            writer.tag(28, WireType.Varint).bool(message.endlessRage);\n        /* int32 blood_frenzy = 29; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 wrecking_crew = 30; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wreckingCrew);\n        /* bool bladestorm = 31; */\n        if (message.bladestorm !== false)\n            writer.tag(31, WireType.Varint).bool(message.bladestorm);\n        /* int32 armored_to_the_teeth = 32; */\n        if (message.armoredToTheTeeth !== 0)\n            writer.tag(32, WireType.Varint).int32(message.armoredToTheTeeth);\n        /* int32 booming_voice = 33; */\n        if (message.boomingVoice !== 0)\n            writer.tag(33, WireType.Varint).int32(message.boomingVoice);\n        /* int32 cruelty = 34; */\n        if (message.cruelty !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cruelty);\n        /* int32 improved_demoralizing_shout = 35; */\n        if (message.improvedDemoralizingShout !== 0)\n            writer.tag(35, WireType.Varint).int32(message.improvedDemoralizingShout);\n        /* int32 unbridled_wrath = 36; */\n        if (message.unbridledWrath !== 0)\n            writer.tag(36, WireType.Varint).int32(message.unbridledWrath);\n        /* int32 improved_cleave = 37; */\n        if (message.improvedCleave !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedCleave);\n        /* bool piercing_howl = 38; */\n        if (message.piercingHowl !== false)\n            writer.tag(38, WireType.Varint).bool(message.piercingHowl);\n        /* int32 blood_craze = 39; */\n        if (message.bloodCraze !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodCraze);\n        /* int32 commanding_presence = 40; */\n        if (message.commandingPresence !== 0)\n            writer.tag(40, WireType.Varint).int32(message.commandingPresence);\n        /* int32 dual_wield_specialization = 41; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_execute = 42; */\n        if (message.improvedExecute !== 0)\n            writer.tag(42, WireType.Varint).int32(message.improvedExecute);\n        /* int32 enrage = 43; */\n        if (message.enrage !== 0)\n            writer.tag(43, WireType.Varint).int32(message.enrage);\n        /* int32 precision = 44; */\n        if (message.precision !== 0)\n            writer.tag(44, WireType.Varint).int32(message.precision);\n        /* bool death_wish = 45; */\n        if (message.deathWish !== false)\n            writer.tag(45, WireType.Varint).bool(message.deathWish);\n        /* int32 improved_intercept = 46; */\n        if (message.improvedIntercept !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedIntercept);\n        /* int32 improved_berserker_rage = 47; */\n        if (message.improvedBerserkerRage !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedBerserkerRage);\n        /* int32 flurry = 48; */\n        if (message.flurry !== 0)\n            writer.tag(48, WireType.Varint).int32(message.flurry);\n        /* int32 intensify_rage = 49; */\n        if (message.intensifyRage !== 0)\n            writer.tag(49, WireType.Varint).int32(message.intensifyRage);\n        /* bool bloodthirst = 50; */\n        if (message.bloodthirst !== false)\n            writer.tag(50, WireType.Varint).bool(message.bloodthirst);\n        /* int32 improved_whirlwind = 51; */\n        if (message.improvedWhirlwind !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedWhirlwind);\n        /* int32 furious_attacks = 52; */\n        if (message.furiousAttacks !== 0)\n            writer.tag(52, WireType.Varint).int32(message.furiousAttacks);\n        /* int32 improved_berserker_stance = 53; */\n        if (message.improvedBerserkerStance !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedBerserkerStance);\n        /* bool heroic_fury = 54; */\n        if (message.heroicFury !== false)\n            writer.tag(54, WireType.Varint).bool(message.heroicFury);\n        /* bool rampage = 55; */\n        if (message.rampage !== false)\n            writer.tag(55, WireType.Varint).bool(message.rampage);\n        /* int32 bloodsurge = 56; */\n        if (message.bloodsurge !== 0)\n            writer.tag(56, WireType.Varint).int32(message.bloodsurge);\n        /* int32 unending_fury = 57; */\n        if (message.unendingFury !== 0)\n            writer.tag(57, WireType.Varint).int32(message.unendingFury);\n        /* bool titans_grip = 58; */\n        if (message.titansGrip !== false)\n            writer.tag(58, WireType.Varint).bool(message.titansGrip);\n        /* int32 improved_bloodrage = 59; */\n        if (message.improvedBloodrage !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedBloodrage);\n        /* int32 shield_specialization = 60; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(60, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 improved_thunder_clap = 61; */\n        if (message.improvedThunderClap !== 0)\n            writer.tag(61, WireType.Varint).int32(message.improvedThunderClap);\n        /* int32 incite = 62; */\n        if (message.incite !== 0)\n            writer.tag(62, WireType.Varint).int32(message.incite);\n        /* int32 anticipation = 63; */\n        if (message.anticipation !== 0)\n            writer.tag(63, WireType.Varint).int32(message.anticipation);\n        /* bool last_stand = 64; */\n        if (message.lastStand !== false)\n            writer.tag(64, WireType.Varint).bool(message.lastStand);\n        /* int32 improved_revenge = 65; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(65, WireType.Varint).int32(message.improvedRevenge);\n        /* int32 shield_mastery = 66; */\n        if (message.shieldMastery !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shieldMastery);\n        /* int32 toughness = 67; */\n        if (message.toughness !== 0)\n            writer.tag(67, WireType.Varint).int32(message.toughness);\n        /* int32 improved_spell_reflection = 68; */\n        if (message.improvedSpellReflection !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedSpellReflection);\n        /* int32 improved_disarm = 69; */\n        if (message.improvedDisarm !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedDisarm);\n        /* int32 puncture = 70; */\n        if (message.puncture !== 0)\n            writer.tag(70, WireType.Varint).int32(message.puncture);\n        /* int32 improved_disciplines = 71; */\n        if (message.improvedDisciplines !== 0)\n            writer.tag(71, WireType.Varint).int32(message.improvedDisciplines);\n        /* bool concussion_blow = 72; */\n        if (message.concussionBlow !== false)\n            writer.tag(72, WireType.Varint).bool(message.concussionBlow);\n        /* int32 gag_order = 73; */\n        if (message.gagOrder !== 0)\n            writer.tag(73, WireType.Varint).int32(message.gagOrder);\n        /* int32 one_handed_weapon_specialization = 74; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(74, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 improved_defensive_stance = 75; */\n        if (message.improvedDefensiveStance !== 0)\n            writer.tag(75, WireType.Varint).int32(message.improvedDefensiveStance);\n        /* bool vigilance = 76; */\n        if (message.vigilance !== false)\n            writer.tag(76, WireType.Varint).bool(message.vigilance);\n        /* int32 focused_rage = 77; */\n        if (message.focusedRage !== 0)\n            writer.tag(77, WireType.Varint).int32(message.focusedRage);\n        /* int32 vitality = 78; */\n        if (message.vitality !== 0)\n            writer.tag(78, WireType.Varint).int32(message.vitality);\n        /* int32 safeguard = 79; */\n        if (message.safeguard !== 0)\n            writer.tag(79, WireType.Varint).int32(message.safeguard);\n        /* bool warbringer = 80; */\n        if (message.warbringer !== false)\n            writer.tag(80, WireType.Varint).bool(message.warbringer);\n        /* bool devastate = 81; */\n        if (message.devastate !== false)\n            writer.tag(81, WireType.Varint).bool(message.devastate);\n        /* int32 critical_block = 82; */\n        if (message.criticalBlock !== 0)\n            writer.tag(82, WireType.Varint).int32(message.criticalBlock);\n        /* int32 sword_and_board = 83; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(83, WireType.Varint).int32(message.swordAndBoard);\n        /* int32 damage_shield = 84; */\n        if (message.damageShield !== 0)\n            writer.tag(84, WireType.Varint).int32(message.damageShield);\n        /* bool shockwave = 85; */\n        if (message.shockwave !== false)\n            writer.tag(85, WireType.Varint).bool(message.shockwave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior$Type extends MessageType<Warrior> {\n    constructor() {\n        super(\"proto.Warrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warrior_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior>): Warrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior): Warrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warrior.Rotation rotation */ 1:\n                    message.rotation = Warrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Warrior.Options options */ 3:\n                    message.options = Warrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warrior.Rotation rotation = 1; */\n        if (message.rotation)\n            Warrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior.Options options = 3; */\n        if (message.options)\n            Warrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior\n */\nexport const Warrior = new Warrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Rotation$Type extends MessageType<Warrior_Rotation> {\n    constructor() {\n        super(\"proto.Warrior.Rotation\", [\n            { no: 1, name: \"use_cleave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_rend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"use_ms\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_slam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"main_gcd\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.MainGcd\", Warrior_Rotation_MainGcd] },\n            { no: 5, name: \"sunderArmor\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.SunderArmor\", Warrior_Rotation_SunderArmor] },\n            { no: 6, name: \"maintain_demo_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"maintain_thunder_clap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"ms_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"rend_rage_threshold_below\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"slam_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"rend_cd_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_hs_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"use_bt_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"spam_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"use_ww_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"use_slam_over_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stance_option\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.StanceOption\", Warrior_Rotation_StanceOption] },\n            { no: 20, name: \"rend_health_threshold_above\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 21, name: \"use_overpower\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"execute_phase_overpower\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 24, name: \"custom_rotation_option\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Rotation>): Warrior_Rotation {\n        const message = { useCleave: false, useRend: false, useMs: false, useSlam: false, mainGcd: 0, sunderArmor: 0, maintainDemoShout: false, maintainThunderClap: false, hsRageThreshold: 0, msRageThreshold: 0, rendRageThresholdBelow: 0, slamRageThreshold: 0, rendCdThreshold: 0, useHsDuringExecute: false, useBtDuringExecute: false, spamExecute: false, useWwDuringExecute: false, useSlamOverExecute: false, stanceOption: 0, rendHealthThresholdAbove: 0, useOverpower: false, executePhaseOverpower: false, customRotationOption: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Rotation): Warrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_cleave */ 1:\n                    message.useCleave = reader.bool();\n                    break;\n                case /* bool use_rend */ 2:\n                    message.useRend = reader.bool();\n                    break;\n                case /* bool use_ms */ 18:\n                    message.useMs = reader.bool();\n                    break;\n                case /* bool use_slam */ 3:\n                    message.useSlam = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.MainGcd main_gcd */ 4:\n                    message.mainGcd = reader.int32();\n                    break;\n                case /* proto.Warrior.Rotation.SunderArmor sunderArmor */ 5:\n                    message.sunderArmor = reader.int32();\n                    break;\n                case /* bool maintain_demo_shout */ 6:\n                    message.maintainDemoShout = reader.bool();\n                    break;\n                case /* bool maintain_thunder_clap */ 7:\n                    message.maintainThunderClap = reader.bool();\n                    break;\n                case /* double hs_rage_threshold */ 8:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* double ms_rage_threshold */ 9:\n                    message.msRageThreshold = reader.double();\n                    break;\n                case /* double rend_rage_threshold_below */ 10:\n                    message.rendRageThresholdBelow = reader.double();\n                    break;\n                case /* double slam_rage_threshold */ 11:\n                    message.slamRageThreshold = reader.double();\n                    break;\n                case /* double rend_cd_threshold */ 12:\n                    message.rendCdThreshold = reader.double();\n                    break;\n                case /* bool use_hs_during_execute */ 13:\n                    message.useHsDuringExecute = reader.bool();\n                    break;\n                case /* bool use_bt_during_execute */ 14:\n                    message.useBtDuringExecute = reader.bool();\n                    break;\n                case /* bool spam_execute */ 15:\n                    message.spamExecute = reader.bool();\n                    break;\n                case /* bool use_ww_during_execute */ 16:\n                    message.useWwDuringExecute = reader.bool();\n                    break;\n                case /* bool use_slam_over_execute */ 17:\n                    message.useSlamOverExecute = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.StanceOption stance_option */ 19:\n                    message.stanceOption = reader.int32();\n                    break;\n                case /* double rend_health_threshold_above */ 20:\n                    message.rendHealthThresholdAbove = reader.double();\n                    break;\n                case /* bool use_overpower */ 21:\n                    message.useOverpower = reader.bool();\n                    break;\n                case /* bool execute_phase_overpower */ 22:\n                    message.executePhaseOverpower = reader.bool();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 23:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* bool custom_rotation_option */ 24:\n                    message.customRotationOption = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_cleave = 1; */\n        if (message.useCleave !== false)\n            writer.tag(1, WireType.Varint).bool(message.useCleave);\n        /* bool use_rend = 2; */\n        if (message.useRend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRend);\n        /* bool use_ms = 18; */\n        if (message.useMs !== false)\n            writer.tag(18, WireType.Varint).bool(message.useMs);\n        /* bool use_slam = 3; */\n        if (message.useSlam !== false)\n            writer.tag(3, WireType.Varint).bool(message.useSlam);\n        /* proto.Warrior.Rotation.MainGcd main_gcd = 4; */\n        if (message.mainGcd !== 0)\n            writer.tag(4, WireType.Varint).int32(message.mainGcd);\n        /* proto.Warrior.Rotation.SunderArmor sunderArmor = 5; */\n        if (message.sunderArmor !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sunderArmor);\n        /* bool maintain_demo_shout = 6; */\n        if (message.maintainDemoShout !== false)\n            writer.tag(6, WireType.Varint).bool(message.maintainDemoShout);\n        /* bool maintain_thunder_clap = 7; */\n        if (message.maintainThunderClap !== false)\n            writer.tag(7, WireType.Varint).bool(message.maintainThunderClap);\n        /* double hs_rage_threshold = 8; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.hsRageThreshold);\n        /* double ms_rage_threshold = 9; */\n        if (message.msRageThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.msRageThreshold);\n        /* double rend_rage_threshold_below = 10; */\n        if (message.rendRageThresholdBelow !== 0)\n            writer.tag(10, WireType.Bit64).double(message.rendRageThresholdBelow);\n        /* double slam_rage_threshold = 11; */\n        if (message.slamRageThreshold !== 0)\n            writer.tag(11, WireType.Bit64).double(message.slamRageThreshold);\n        /* double rend_cd_threshold = 12; */\n        if (message.rendCdThreshold !== 0)\n            writer.tag(12, WireType.Bit64).double(message.rendCdThreshold);\n        /* bool use_hs_during_execute = 13; */\n        if (message.useHsDuringExecute !== false)\n            writer.tag(13, WireType.Varint).bool(message.useHsDuringExecute);\n        /* bool use_bt_during_execute = 14; */\n        if (message.useBtDuringExecute !== false)\n            writer.tag(14, WireType.Varint).bool(message.useBtDuringExecute);\n        /* bool spam_execute = 15; */\n        if (message.spamExecute !== false)\n            writer.tag(15, WireType.Varint).bool(message.spamExecute);\n        /* bool use_ww_during_execute = 16; */\n        if (message.useWwDuringExecute !== false)\n            writer.tag(16, WireType.Varint).bool(message.useWwDuringExecute);\n        /* bool use_slam_over_execute = 17; */\n        if (message.useSlamOverExecute !== false)\n            writer.tag(17, WireType.Varint).bool(message.useSlamOverExecute);\n        /* proto.Warrior.Rotation.StanceOption stance_option = 19; */\n        if (message.stanceOption !== 0)\n            writer.tag(19, WireType.Varint).int32(message.stanceOption);\n        /* double rend_health_threshold_above = 20; */\n        if (message.rendHealthThresholdAbove !== 0)\n            writer.tag(20, WireType.Bit64).double(message.rendHealthThresholdAbove);\n        /* bool use_overpower = 21; */\n        if (message.useOverpower !== false)\n            writer.tag(21, WireType.Varint).bool(message.useOverpower);\n        /* bool execute_phase_overpower = 22; */\n        if (message.executePhaseOverpower !== false)\n            writer.tag(22, WireType.Varint).bool(message.executePhaseOverpower);\n        /* proto.CustomRotation custom_rotation = 23; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* bool custom_rotation_option = 24; */\n        if (message.customRotationOption !== false)\n            writer.tag(24, WireType.Varint).bool(message.customRotationOption);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Rotation\n */\nexport const Warrior_Rotation = new Warrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Options$Type extends MessageType<Warrior_Options> {\n    constructor() {\n        super(\"proto.Warrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 5, name: \"munch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"stance_snapshot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Options>): Warrior_Options {\n        const message = { startingRage: 0, useRecklessness: false, useShatteringThrow: false, shout: 0, munch: false, stanceSnapshot: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Options): Warrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool use_shattering_throw */ 4:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                case /* proto.WarriorShout shout */ 3:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool munch */ 5:\n                    message.munch = reader.bool();\n                    break;\n                case /* bool stance_snapshot */ 6:\n                    message.stanceSnapshot = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool use_shattering_throw = 4; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(4, WireType.Varint).bool(message.useShatteringThrow);\n        /* proto.WarriorShout shout = 3; */\n        if (message.shout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.shout);\n        /* bool munch = 5; */\n        if (message.munch !== false)\n            writer.tag(5, WireType.Varint).bool(message.munch);\n        /* bool stance_snapshot = 6; */\n        if (message.stanceSnapshot !== false)\n            writer.tag(6, WireType.Varint).bool(message.stanceSnapshot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Options\n */\nexport const Warrior_Options = new Warrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionWarrior_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation rotation */ 1:\n                    message.rotation = ProtectionWarrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ProtectionWarrior.Options options */ 3:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionWarrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior.Options options = 3; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", [\n            { no: 1, name: \"demo_shout_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.DemoShoutChoice\", ProtectionWarrior_Rotation_DemoShoutChoice] },\n            { no: 2, name: \"thunder_clap_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.ThunderClapChoice\", ProtectionWarrior_Rotation_ThunderClapChoice] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"prio_sslam_on_shield_block\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = { demoShoutChoice: 0, thunderClapChoice: 0, hsRageThreshold: 0, prioSslamOnShieldBlock: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice */ 1:\n                    message.demoShoutChoice = reader.int32();\n                    break;\n                case /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice */ 2:\n                    message.thunderClapChoice = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double hs_rage_threshold */ 4:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* bool prio_sslam_on_shield_block */ 5:\n                    message.prioSslamOnShieldBlock = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1; */\n        if (message.demoShoutChoice !== 0)\n            writer.tag(1, WireType.Varint).int32(message.demoShoutChoice);\n        /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2; */\n        if (message.thunderClapChoice !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderClapChoice);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double hs_rage_threshold = 4; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(4, WireType.Bit64).double(message.hsRageThreshold);\n        /* bool prio_sslam_on_shield_block = 5; */\n        if (message.prioSslamOnShieldBlock !== false)\n            writer.tag(5, WireType.Varint).bool(message.prioSslamOnShieldBlock);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 8, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"munch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = { startingRage: 0, shout: 0, useShatteringThrow: false, munch: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* proto.WarriorShout shout */ 4:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool use_shattering_throw */ 8:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                case /* bool munch */ 9:\n                    message.munch = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* proto.WarriorShout shout = 4; */\n        if (message.shout !== 0)\n            writer.tag(4, WireType.Varint).int32(message.shout);\n        /* bool use_shattering_throw = 8; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(8, WireType.Varint).bool(message.useShatteringThrow);\n        /* bool munch = 9; */\n        if (message.munch !== false)\n            writer.tag(9, WireType.Varint).bool(message.munch);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ItemSwap } from \"./common\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 improved_curse_of_agony = 1;\n     */\n    improvedCurseOfAgony: number;\n    /**\n     * @generated from protobuf field: int32 suppression = 2;\n     */\n    suppression: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 improved_curse_of_weakness = 4;\n     */\n    improvedCurseOfWeakness: number;\n    /**\n     * @generated from protobuf field: int32 improved_drain_soul = 5;\n     */\n    improvedDrainSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 6;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 7;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 fel_concentration = 9;\n     */\n    felConcentration: number;\n    /**\n     * @generated from protobuf field: bool amplify_curse = 10;\n     */\n    amplifyCurse: boolean;\n    /**\n     * @generated from protobuf field: int32 grim_reach = 11;\n     */\n    grimReach: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 12;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: int32 empowered_corruption = 13;\n     */\n    empoweredCorruption: number;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 14;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: bool siphon_life = 15;\n     */\n    siphonLife: boolean;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 16;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_felhunter = 17;\n     */\n    improvedFelhunter: number;\n    /**\n     * @generated from protobuf field: int32 shadow_mastery = 18;\n     */\n    shadowMastery: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 19;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 contagion = 20;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: bool dark_pact = 21;\n     */\n    darkPact: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 22;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: int32 malediction = 23;\n     */\n    malediction: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 24;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: bool unstable_affliction = 25;\n     */\n    unstableAffliction: boolean;\n    /**\n     * @generated from protobuf field: bool pandemic = 26;\n     */\n    pandemic: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 27;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: bool haunt = 28;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 improved_healthstone = 29;\n     */\n    improvedHealthstone: number;\n    /**\n     * @generated from protobuf field: int32 improved_imp = 30;\n     */\n    improvedImp: number;\n    /**\n     * @generated from protobuf field: int32 demonic_embrace = 31;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 32;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 33;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 demonic_brutality = 34;\n     */\n    demonicBrutality: number;\n    /**\n     * @generated from protobuf field: int32 fel_vitality = 35;\n     */\n    felVitality: number;\n    /**\n     * @generated from protobuf field: int32 improved_sayaad = 36;\n     */\n    improvedSayaad: number;\n    /**\n     * @generated from protobuf field: bool soul_link = 37;\n     */\n    soulLink: boolean;\n    /**\n     * @generated from protobuf field: bool fel_domination = 38;\n     */\n    felDomination: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 39;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 unholy_power = 40;\n     */\n    unholyPower: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 41;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: bool mana_feed = 42;\n     */\n    manaFeed: boolean;\n    /**\n     * @generated from protobuf field: int32 master_conjuror = 43;\n     */\n    masterConjuror: number;\n    /**\n     * @generated from protobuf field: int32 master_demonologist = 44;\n     */\n    masterDemonologist: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 45;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: int32 demonic_resilience = 46;\n     */\n    demonicResilience: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 47;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_knowledge = 48;\n     */\n    demonicKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 demonic_tactics = 49;\n     */\n    demonicTactics: number;\n    /**\n     * @generated from protobuf field: int32 decimation = 50;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 improved_demonic_tactics = 51;\n     */\n    improvedDemonicTactics: number;\n    /**\n     * @generated from protobuf field: bool summon_felguard = 52;\n     */\n    summonFelguard: boolean;\n    /**\n     * @generated from protobuf field: int32 nemesis = 53;\n     */\n    nemesis: number;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 54;\n     */\n    demonicPact: number;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 55;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 improved_shadow_bolt = 56;\n     */\n    improvedShadowBolt: number;\n    /**\n     * @generated from protobuf field: int32 bane = 57;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 58;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 molten_skin = 59;\n     */\n    moltenSkin: number;\n    /**\n     * @generated from protobuf field: int32 cataclysm = 60;\n     */\n    cataclysm: number;\n    /**\n     * @generated from protobuf field: int32 demonic_power = 61;\n     */\n    demonicPower: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 62;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 ruin = 63;\n     */\n    ruin: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 64;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: int32 destructive_reach = 65;\n     */\n    destructiveReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 66;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 67;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 68;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: bool devastation = 69;\n     */\n    devastation: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 70;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 71;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: bool conflagrate = 72;\n     */\n    conflagrate: boolean;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 73;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 pyroclasm = 74;\n     */\n    pyroclasm: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 75;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_leech = 76;\n     */\n    improvedSoulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 77;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 78;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 79;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 80;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 81;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.Warlock\n */\nexport interface Warlock {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation rotation = 1;\n     */\n    rotation?: Warlock_Rotation;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options options = 3;\n     */\n    options?: Warlock_Options;\n}\n/**\n * @generated from protobuf message proto.Warlock.Rotation\n */\nexport interface Warlock_Rotation {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Preset preset = 1;\n     */\n    preset: Warlock_Rotation_Preset;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Curse curse = 2;\n     */\n    curse: Warlock_Rotation_Curse;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.PrimarySpell primary_spell = 3;\n     */\n    primarySpell: Warlock_Rotation_PrimarySpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SecondaryDot secondary_dot = 4;\n     */\n    secondaryDot: Warlock_Rotation_SecondaryDot;\n    /**\n     * @generated from protobuf field: bool corruption = 5;\n     */\n    corruption: boolean;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 6;\n     */\n    detonateSeed: boolean;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SpecSpell spec_spell = 7;\n     */\n    specSpell: Warlock_Rotation_SpecSpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Type type = 8;\n     */\n    type: Warlock_Rotation_Type;\n    /**\n     * @generated from protobuf field: bool use_infernal = 9;\n     */\n    useInfernal: boolean;\n    /**\n     * @generated from protobuf field: bool enable_weapon_swap = 10;\n     */\n    enableWeaponSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap weapon_swap = 11;\n     */\n    weaponSwap?: ItemSwap;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Preset\n */\nexport enum Warlock_Rotation_Preset {\n    /**\n     * @generated from protobuf enum value: Manual = 0;\n     */\n    Manual = 0,\n    /**\n     * @generated from protobuf enum value: Automatic = 1;\n     */\n    Automatic = 1\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Type\n */\nexport enum Warlock_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Affliction = 0;\n     */\n    Affliction = 0,\n    /**\n     * @generated from protobuf enum value: Demonology = 1;\n     */\n    Demonology = 1,\n    /**\n     * @generated from protobuf enum value: Destruction = 2;\n     */\n    Destruction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.PrimarySpell\n */\nexport enum Warlock_Rotation_PrimarySpell {\n    /**\n     * @generated from protobuf enum value: UnknownSpell = 0;\n     */\n    UnknownSpell = 0,\n    /**\n     * @generated from protobuf enum value: ShadowBolt = 1;\n     */\n    ShadowBolt = 1,\n    /**\n     * @generated from protobuf enum value: Incinerate = 2;\n     */\n    Incinerate = 2,\n    /**\n     * @generated from protobuf enum value: Seed = 3;\n     */\n    Seed = 3\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Curse\n */\nexport enum Warlock_Rotation_Curse {\n    /**\n     * @generated from protobuf enum value: NoCurse = 0;\n     */\n    NoCurse = 0,\n    /**\n     * @generated from protobuf enum value: Elements = 1;\n     */\n    Elements = 1,\n    /**\n     * @generated from protobuf enum value: Weakness = 2;\n     */\n    Weakness = 2,\n    /**\n     * @generated from protobuf enum value: Doom = 3;\n     */\n    Doom = 3,\n    /**\n     * @generated from protobuf enum value: Agony = 4;\n     */\n    Agony = 4,\n    /**\n     * @generated from protobuf enum value: Tongues = 5;\n     */\n    Tongues = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SecondaryDot\n */\nexport enum Warlock_Rotation_SecondaryDot {\n    /**\n     * @generated from protobuf enum value: NoSecondaryDot = 0;\n     */\n    NoSecondaryDot = 0,\n    /**\n     * @generated from protobuf enum value: Immolate = 1;\n     */\n    Immolate = 1,\n    /**\n     * @generated from protobuf enum value: UnstableAffliction = 2;\n     */\n    UnstableAffliction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SpecSpell\n */\nexport enum Warlock_Rotation_SpecSpell {\n    /**\n     * @generated from protobuf enum value: NoSpecSpell = 0;\n     */\n    NoSpecSpell = 0,\n    /**\n     * @generated from protobuf enum value: ChaosBolt = 1;\n     */\n    ChaosBolt = 1,\n    /**\n     * @generated from protobuf enum value: Haunt = 2;\n     */\n    Haunt = 2\n}\n/**\n * @generated from protobuf message proto.Warlock.Options\n */\nexport interface Warlock_Options {\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Armor armor = 1;\n     */\n    armor: Warlock_Options_Armor;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Summon summon = 2;\n     */\n    summon: Warlock_Options_Summon;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.WeaponImbue weaponImbue = 3;\n     */\n    weaponImbue: Warlock_Options_WeaponImbue;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Summon\n */\nexport enum Warlock_Options_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Armor\n */\nexport enum Warlock_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: FelArmor = 1;\n     */\n    FelArmor = 1,\n    /**\n     * @generated from protobuf enum value: DemonArmor = 2;\n     */\n    DemonArmor = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.WeaponImbue\n */\nexport enum Warlock_Options_WeaponImbue {\n    /**\n     * @generated from protobuf enum value: NoWeaponImbue = 0;\n     */\n    NoWeaponImbue = 0,\n    /**\n     * @generated from protobuf enum value: GrandSpellstone = 1;\n     */\n    GrandSpellstone = 1,\n    /**\n     * @generated from protobuf enum value: GrandFirestone = 2;\n     */\n    GrandFirestone = 2\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfAgony = 42456;\n     */\n    GlyphOfCurseOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 42457;\n     */\n    GlyphOfDeathCoil = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfQuickDecay = 50077;\n     */\n    GlyphOfQuickDecay = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfSearingPain = 42466;\n     */\n    GlyphOfSearingPain = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSiphonLife = 42469;\n     */\n    GlyphOfSiphonLife = 42469,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfSuccubus = 42471;\n     */\n    GlyphOfSuccubus = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhausion = 43392;\n     */\n    GlyphOfCurseOfExhausion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfSubjugateDemon = 43393;\n     */\n    GlyphOfSubjugateDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfKilrogg = 43391;\n     */\n    GlyphOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfSouls = 43394;\n     */\n    GlyphOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"improved_curse_of_agony\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_curse_of_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_drain_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fel_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"amplify_curse\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"grim_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"empowered_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"siphon_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_felhunter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"shadow_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"dark_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"malediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"unstable_affliction\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"pandemic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_healthstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"demonic_brutality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"fel_vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_sayaad\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"soul_link\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"fel_domination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"unholy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"mana_feed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"master_conjuror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"master_demonologist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"demonic_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"demonic_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"improved_demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"summon_felguard\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nemesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_shadow_bolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"molten_skin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"cataclysm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"demonic_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ruin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"destructive_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"devastation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"conflagrate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"pyroclasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { improvedCurseOfAgony: 0, suppression: 0, improvedCorruption: 0, improvedCurseOfWeakness: 0, improvedDrainSoul: 0, improvedLifeTap: 0, soulSiphon: 0, improvedFear: 0, felConcentration: 0, amplifyCurse: false, grimReach: 0, nightfall: 0, empoweredCorruption: 0, shadowEmbrace: 0, siphonLife: false, curseOfExhaustion: false, improvedFelhunter: 0, shadowMastery: 0, eradication: 0, contagion: 0, darkPact: false, improvedHowlOfTerror: 0, malediction: 0, deathsEmbrace: 0, unstableAffliction: false, pandemic: false, everlastingAffliction: 0, haunt: false, improvedHealthstone: 0, improvedImp: 0, demonicEmbrace: 0, felSynergy: 0, improvedHealthFunnel: 0, demonicBrutality: 0, felVitality: 0, improvedSayaad: 0, soulLink: false, felDomination: false, demonicAegis: 0, unholyPower: 0, masterSummoner: 0, manaFeed: false, masterConjuror: 0, masterDemonologist: 0, moltenCore: 0, demonicResilience: 0, demonicEmpowerment: false, demonicKnowledge: 0, demonicTactics: 0, decimation: 0, improvedDemonicTactics: 0, summonFelguard: false, nemesis: 0, demonicPact: 0, metamorphosis: false, improvedShadowBolt: 0, bane: 0, aftermath: 0, moltenSkin: 0, cataclysm: 0, demonicPower: 0, shadowburn: false, ruin: 0, intensity: 0, destructiveReach: 0, improvedSearingPain: 0, backlash: 0, improvedImmolate: 0, devastation: false, netherProtection: 0, emberstorm: 0, conflagrate: false, soulLeech: 0, pyroclasm: 0, shadowAndFlame: 0, improvedSoulLeech: 0, backdraft: 0, shadowfury: false, empoweredImp: 0, fireAndBrimstone: 0, chaosBolt: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_curse_of_agony */ 1:\n                    message.improvedCurseOfAgony = reader.int32();\n                    break;\n                case /* int32 suppression */ 2:\n                    message.suppression = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 improved_curse_of_weakness */ 4:\n                    message.improvedCurseOfWeakness = reader.int32();\n                    break;\n                case /* int32 improved_drain_soul */ 5:\n                    message.improvedDrainSoul = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 6:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 7:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 fel_concentration */ 9:\n                    message.felConcentration = reader.int32();\n                    break;\n                case /* bool amplify_curse */ 10:\n                    message.amplifyCurse = reader.bool();\n                    break;\n                case /* int32 grim_reach */ 11:\n                    message.grimReach = reader.int32();\n                    break;\n                case /* int32 nightfall */ 12:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* int32 empowered_corruption */ 13:\n                    message.empoweredCorruption = reader.int32();\n                    break;\n                case /* int32 shadow_embrace */ 14:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* bool siphon_life */ 15:\n                    message.siphonLife = reader.bool();\n                    break;\n                case /* bool curse_of_exhaustion */ 16:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_felhunter */ 17:\n                    message.improvedFelhunter = reader.int32();\n                    break;\n                case /* int32 shadow_mastery */ 18:\n                    message.shadowMastery = reader.int32();\n                    break;\n                case /* int32 eradication */ 19:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 contagion */ 20:\n                    message.contagion = reader.int32();\n                    break;\n                case /* bool dark_pact */ 21:\n                    message.darkPact = reader.bool();\n                    break;\n                case /* int32 improved_howl_of_terror */ 22:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* int32 malediction */ 23:\n                    message.malediction = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 24:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* bool unstable_affliction */ 25:\n                    message.unstableAffliction = reader.bool();\n                    break;\n                case /* bool pandemic */ 26:\n                    message.pandemic = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 27:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* bool haunt */ 28:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 improved_healthstone */ 29:\n                    message.improvedHealthstone = reader.int32();\n                    break;\n                case /* int32 improved_imp */ 30:\n                    message.improvedImp = reader.int32();\n                    break;\n                case /* int32 demonic_embrace */ 31:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 32:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 improved_health_funnel */ 33:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 demonic_brutality */ 34:\n                    message.demonicBrutality = reader.int32();\n                    break;\n                case /* int32 fel_vitality */ 35:\n                    message.felVitality = reader.int32();\n                    break;\n                case /* int32 improved_sayaad */ 36:\n                    message.improvedSayaad = reader.int32();\n                    break;\n                case /* bool soul_link */ 37:\n                    message.soulLink = reader.bool();\n                    break;\n                case /* bool fel_domination */ 38:\n                    message.felDomination = reader.bool();\n                    break;\n                case /* int32 demonic_aegis */ 39:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 unholy_power */ 40:\n                    message.unholyPower = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 41:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* bool mana_feed */ 42:\n                    message.manaFeed = reader.bool();\n                    break;\n                case /* int32 master_conjuror */ 43:\n                    message.masterConjuror = reader.int32();\n                    break;\n                case /* int32 master_demonologist */ 44:\n                    message.masterDemonologist = reader.int32();\n                    break;\n                case /* int32 molten_core */ 45:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* int32 demonic_resilience */ 46:\n                    message.demonicResilience = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 47:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 demonic_knowledge */ 48:\n                    message.demonicKnowledge = reader.int32();\n                    break;\n                case /* int32 demonic_tactics */ 49:\n                    message.demonicTactics = reader.int32();\n                    break;\n                case /* int32 decimation */ 50:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 improved_demonic_tactics */ 51:\n                    message.improvedDemonicTactics = reader.int32();\n                    break;\n                case /* bool summon_felguard */ 52:\n                    message.summonFelguard = reader.bool();\n                    break;\n                case /* int32 nemesis */ 53:\n                    message.nemesis = reader.int32();\n                    break;\n                case /* int32 demonic_pact */ 54:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool metamorphosis */ 55:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 improved_shadow_bolt */ 56:\n                    message.improvedShadowBolt = reader.int32();\n                    break;\n                case /* int32 bane */ 57:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 aftermath */ 58:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 molten_skin */ 59:\n                    message.moltenSkin = reader.int32();\n                    break;\n                case /* int32 cataclysm */ 60:\n                    message.cataclysm = reader.int32();\n                    break;\n                case /* int32 demonic_power */ 61:\n                    message.demonicPower = reader.int32();\n                    break;\n                case /* bool shadowburn */ 62:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 ruin */ 63:\n                    message.ruin = reader.int32();\n                    break;\n                case /* int32 intensity */ 64:\n                    message.intensity = reader.int32();\n                    break;\n                case /* int32 destructive_reach */ 65:\n                    message.destructiveReach = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 66:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 backlash */ 67:\n                    message.backlash = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 68:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* bool devastation */ 69:\n                    message.devastation = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 70:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 71:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* bool conflagrate */ 72:\n                    message.conflagrate = reader.bool();\n                    break;\n                case /* int32 soul_leech */ 73:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 pyroclasm */ 74:\n                    message.pyroclasm = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 75:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_soul_leech */ 76:\n                    message.improvedSoulLeech = reader.int32();\n                    break;\n                case /* int32 backdraft */ 77:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowfury */ 78:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 empowered_imp */ 79:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* int32 fire_and_brimstone */ 80:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool chaos_bolt */ 81:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_curse_of_agony = 1; */\n        if (message.improvedCurseOfAgony !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedCurseOfAgony);\n        /* int32 suppression = 2; */\n        if (message.suppression !== 0)\n            writer.tag(2, WireType.Varint).int32(message.suppression);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 improved_curse_of_weakness = 4; */\n        if (message.improvedCurseOfWeakness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCurseOfWeakness);\n        /* int32 improved_drain_soul = 5; */\n        if (message.improvedDrainSoul !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedDrainSoul);\n        /* int32 improved_life_tap = 6; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 soul_siphon = 7; */\n        if (message.soulSiphon !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulSiphon);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 fel_concentration = 9; */\n        if (message.felConcentration !== 0)\n            writer.tag(9, WireType.Varint).int32(message.felConcentration);\n        /* bool amplify_curse = 10; */\n        if (message.amplifyCurse !== false)\n            writer.tag(10, WireType.Varint).bool(message.amplifyCurse);\n        /* int32 grim_reach = 11; */\n        if (message.grimReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.grimReach);\n        /* int32 nightfall = 12; */\n        if (message.nightfall !== 0)\n            writer.tag(12, WireType.Varint).int32(message.nightfall);\n        /* int32 empowered_corruption = 13; */\n        if (message.empoweredCorruption !== 0)\n            writer.tag(13, WireType.Varint).int32(message.empoweredCorruption);\n        /* int32 shadow_embrace = 14; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(14, WireType.Varint).int32(message.shadowEmbrace);\n        /* bool siphon_life = 15; */\n        if (message.siphonLife !== false)\n            writer.tag(15, WireType.Varint).bool(message.siphonLife);\n        /* bool curse_of_exhaustion = 16; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(16, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_felhunter = 17; */\n        if (message.improvedFelhunter !== 0)\n            writer.tag(17, WireType.Varint).int32(message.improvedFelhunter);\n        /* int32 shadow_mastery = 18; */\n        if (message.shadowMastery !== 0)\n            writer.tag(18, WireType.Varint).int32(message.shadowMastery);\n        /* int32 eradication = 19; */\n        if (message.eradication !== 0)\n            writer.tag(19, WireType.Varint).int32(message.eradication);\n        /* int32 contagion = 20; */\n        if (message.contagion !== 0)\n            writer.tag(20, WireType.Varint).int32(message.contagion);\n        /* bool dark_pact = 21; */\n        if (message.darkPact !== false)\n            writer.tag(21, WireType.Varint).bool(message.darkPact);\n        /* int32 improved_howl_of_terror = 22; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* int32 malediction = 23; */\n        if (message.malediction !== 0)\n            writer.tag(23, WireType.Varint).int32(message.malediction);\n        /* int32 deaths_embrace = 24; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(24, WireType.Varint).int32(message.deathsEmbrace);\n        /* bool unstable_affliction = 25; */\n        if (message.unstableAffliction !== false)\n            writer.tag(25, WireType.Varint).bool(message.unstableAffliction);\n        /* bool pandemic = 26; */\n        if (message.pandemic !== false)\n            writer.tag(26, WireType.Varint).bool(message.pandemic);\n        /* int32 everlasting_affliction = 27; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(27, WireType.Varint).int32(message.everlastingAffliction);\n        /* bool haunt = 28; */\n        if (message.haunt !== false)\n            writer.tag(28, WireType.Varint).bool(message.haunt);\n        /* int32 improved_healthstone = 29; */\n        if (message.improvedHealthstone !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedHealthstone);\n        /* int32 improved_imp = 30; */\n        if (message.improvedImp !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedImp);\n        /* int32 demonic_embrace = 31; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(31, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 fel_synergy = 32; */\n        if (message.felSynergy !== 0)\n            writer.tag(32, WireType.Varint).int32(message.felSynergy);\n        /* int32 improved_health_funnel = 33; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 demonic_brutality = 34; */\n        if (message.demonicBrutality !== 0)\n            writer.tag(34, WireType.Varint).int32(message.demonicBrutality);\n        /* int32 fel_vitality = 35; */\n        if (message.felVitality !== 0)\n            writer.tag(35, WireType.Varint).int32(message.felVitality);\n        /* int32 improved_sayaad = 36; */\n        if (message.improvedSayaad !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedSayaad);\n        /* bool soul_link = 37; */\n        if (message.soulLink !== false)\n            writer.tag(37, WireType.Varint).bool(message.soulLink);\n        /* bool fel_domination = 38; */\n        if (message.felDomination !== false)\n            writer.tag(38, WireType.Varint).bool(message.felDomination);\n        /* int32 demonic_aegis = 39; */\n        if (message.demonicAegis !== 0)\n            writer.tag(39, WireType.Varint).int32(message.demonicAegis);\n        /* int32 unholy_power = 40; */\n        if (message.unholyPower !== 0)\n            writer.tag(40, WireType.Varint).int32(message.unholyPower);\n        /* int32 master_summoner = 41; */\n        if (message.masterSummoner !== 0)\n            writer.tag(41, WireType.Varint).int32(message.masterSummoner);\n        /* bool mana_feed = 42; */\n        if (message.manaFeed !== false)\n            writer.tag(42, WireType.Varint).bool(message.manaFeed);\n        /* int32 master_conjuror = 43; */\n        if (message.masterConjuror !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterConjuror);\n        /* int32 master_demonologist = 44; */\n        if (message.masterDemonologist !== 0)\n            writer.tag(44, WireType.Varint).int32(message.masterDemonologist);\n        /* int32 molten_core = 45; */\n        if (message.moltenCore !== 0)\n            writer.tag(45, WireType.Varint).int32(message.moltenCore);\n        /* int32 demonic_resilience = 46; */\n        if (message.demonicResilience !== 0)\n            writer.tag(46, WireType.Varint).int32(message.demonicResilience);\n        /* bool demonic_empowerment = 47; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(47, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 demonic_knowledge = 48; */\n        if (message.demonicKnowledge !== 0)\n            writer.tag(48, WireType.Varint).int32(message.demonicKnowledge);\n        /* int32 demonic_tactics = 49; */\n        if (message.demonicTactics !== 0)\n            writer.tag(49, WireType.Varint).int32(message.demonicTactics);\n        /* int32 decimation = 50; */\n        if (message.decimation !== 0)\n            writer.tag(50, WireType.Varint).int32(message.decimation);\n        /* int32 improved_demonic_tactics = 51; */\n        if (message.improvedDemonicTactics !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedDemonicTactics);\n        /* bool summon_felguard = 52; */\n        if (message.summonFelguard !== false)\n            writer.tag(52, WireType.Varint).bool(message.summonFelguard);\n        /* int32 nemesis = 53; */\n        if (message.nemesis !== 0)\n            writer.tag(53, WireType.Varint).int32(message.nemesis);\n        /* int32 demonic_pact = 54; */\n        if (message.demonicPact !== 0)\n            writer.tag(54, WireType.Varint).int32(message.demonicPact);\n        /* bool metamorphosis = 55; */\n        if (message.metamorphosis !== false)\n            writer.tag(55, WireType.Varint).bool(message.metamorphosis);\n        /* int32 improved_shadow_bolt = 56; */\n        if (message.improvedShadowBolt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedShadowBolt);\n        /* int32 bane = 57; */\n        if (message.bane !== 0)\n            writer.tag(57, WireType.Varint).int32(message.bane);\n        /* int32 aftermath = 58; */\n        if (message.aftermath !== 0)\n            writer.tag(58, WireType.Varint).int32(message.aftermath);\n        /* int32 molten_skin = 59; */\n        if (message.moltenSkin !== 0)\n            writer.tag(59, WireType.Varint).int32(message.moltenSkin);\n        /* int32 cataclysm = 60; */\n        if (message.cataclysm !== 0)\n            writer.tag(60, WireType.Varint).int32(message.cataclysm);\n        /* int32 demonic_power = 61; */\n        if (message.demonicPower !== 0)\n            writer.tag(61, WireType.Varint).int32(message.demonicPower);\n        /* bool shadowburn = 62; */\n        if (message.shadowburn !== false)\n            writer.tag(62, WireType.Varint).bool(message.shadowburn);\n        /* int32 ruin = 63; */\n        if (message.ruin !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ruin);\n        /* int32 intensity = 64; */\n        if (message.intensity !== 0)\n            writer.tag(64, WireType.Varint).int32(message.intensity);\n        /* int32 destructive_reach = 65; */\n        if (message.destructiveReach !== 0)\n            writer.tag(65, WireType.Varint).int32(message.destructiveReach);\n        /* int32 improved_searing_pain = 66; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(66, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 backlash = 67; */\n        if (message.backlash !== 0)\n            writer.tag(67, WireType.Varint).int32(message.backlash);\n        /* int32 improved_immolate = 68; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedImmolate);\n        /* bool devastation = 69; */\n        if (message.devastation !== false)\n            writer.tag(69, WireType.Varint).bool(message.devastation);\n        /* int32 nether_protection = 70; */\n        if (message.netherProtection !== 0)\n            writer.tag(70, WireType.Varint).int32(message.netherProtection);\n        /* int32 emberstorm = 71; */\n        if (message.emberstorm !== 0)\n            writer.tag(71, WireType.Varint).int32(message.emberstorm);\n        /* bool conflagrate = 72; */\n        if (message.conflagrate !== false)\n            writer.tag(72, WireType.Varint).bool(message.conflagrate);\n        /* int32 soul_leech = 73; */\n        if (message.soulLeech !== 0)\n            writer.tag(73, WireType.Varint).int32(message.soulLeech);\n        /* int32 pyroclasm = 74; */\n        if (message.pyroclasm !== 0)\n            writer.tag(74, WireType.Varint).int32(message.pyroclasm);\n        /* int32 shadow_and_flame = 75; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_soul_leech = 76; */\n        if (message.improvedSoulLeech !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedSoulLeech);\n        /* int32 backdraft = 77; */\n        if (message.backdraft !== 0)\n            writer.tag(77, WireType.Varint).int32(message.backdraft);\n        /* bool shadowfury = 78; */\n        if (message.shadowfury !== false)\n            writer.tag(78, WireType.Varint).bool(message.shadowfury);\n        /* int32 empowered_imp = 79; */\n        if (message.empoweredImp !== 0)\n            writer.tag(79, WireType.Varint).int32(message.empoweredImp);\n        /* int32 fire_and_brimstone = 80; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(80, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool chaos_bolt = 81; */\n        if (message.chaosBolt !== false)\n            writer.tag(81, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock$Type extends MessageType<Warlock> {\n    constructor() {\n        super(\"proto.Warlock\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warlock_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock>): Warlock {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock): Warlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation rotation */ 1:\n                    message.rotation = Warlock_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Warlock.Options options */ 3:\n                    message.options = Warlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation rotation = 1; */\n        if (message.rotation)\n            Warlock_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock.Options options = 3; */\n        if (message.options)\n            Warlock_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock\n */\nexport const Warlock = new Warlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Rotation$Type extends MessageType<Warlock_Rotation> {\n    constructor() {\n        super(\"proto.Warlock.Rotation\", [\n            { no: 1, name: \"preset\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Preset\", Warlock_Rotation_Preset] },\n            { no: 2, name: \"curse\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Curse\", Warlock_Rotation_Curse] },\n            { no: 3, name: \"primary_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.PrimarySpell\", Warlock_Rotation_PrimarySpell] },\n            { no: 4, name: \"secondary_dot\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SecondaryDot\", Warlock_Rotation_SecondaryDot] },\n            { no: 5, name: \"corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"spec_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SpecSpell\", Warlock_Rotation_SpecSpell] },\n            { no: 8, name: \"type\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Type\", Warlock_Rotation_Type] },\n            { no: 9, name: \"use_infernal\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"enable_weapon_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"weapon_swap\", kind: \"message\", T: () => ItemSwap }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Rotation>): Warlock_Rotation {\n        const message = { preset: 0, curse: 0, primarySpell: 0, secondaryDot: 0, corruption: false, detonateSeed: false, specSpell: 0, type: 0, useInfernal: false, enableWeaponSwap: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Rotation): Warlock_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation.Preset preset */ 1:\n                    message.preset = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Curse curse */ 2:\n                    message.curse = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.PrimarySpell primary_spell */ 3:\n                    message.primarySpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.SecondaryDot secondary_dot */ 4:\n                    message.secondaryDot = reader.int32();\n                    break;\n                case /* bool corruption */ 5:\n                    message.corruption = reader.bool();\n                    break;\n                case /* bool detonate_seed */ 6:\n                    message.detonateSeed = reader.bool();\n                    break;\n                case /* proto.Warlock.Rotation.SpecSpell spec_spell */ 7:\n                    message.specSpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Type type */ 8:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_infernal */ 9:\n                    message.useInfernal = reader.bool();\n                    break;\n                case /* bool enable_weapon_swap */ 10:\n                    message.enableWeaponSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap weapon_swap */ 11:\n                    message.weaponSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.weaponSwap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation.Preset preset = 1; */\n        if (message.preset !== 0)\n            writer.tag(1, WireType.Varint).int32(message.preset);\n        /* proto.Warlock.Rotation.Curse curse = 2; */\n        if (message.curse !== 0)\n            writer.tag(2, WireType.Varint).int32(message.curse);\n        /* proto.Warlock.Rotation.PrimarySpell primary_spell = 3; */\n        if (message.primarySpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primarySpell);\n        /* proto.Warlock.Rotation.SecondaryDot secondary_dot = 4; */\n        if (message.secondaryDot !== 0)\n            writer.tag(4, WireType.Varint).int32(message.secondaryDot);\n        /* bool corruption = 5; */\n        if (message.corruption !== false)\n            writer.tag(5, WireType.Varint).bool(message.corruption);\n        /* bool detonate_seed = 6; */\n        if (message.detonateSeed !== false)\n            writer.tag(6, WireType.Varint).bool(message.detonateSeed);\n        /* proto.Warlock.Rotation.SpecSpell spec_spell = 7; */\n        if (message.specSpell !== 0)\n            writer.tag(7, WireType.Varint).int32(message.specSpell);\n        /* proto.Warlock.Rotation.Type type = 8; */\n        if (message.type !== 0)\n            writer.tag(8, WireType.Varint).int32(message.type);\n        /* bool use_infernal = 9; */\n        if (message.useInfernal !== false)\n            writer.tag(9, WireType.Varint).bool(message.useInfernal);\n        /* bool enable_weapon_swap = 10; */\n        if (message.enableWeaponSwap !== false)\n            writer.tag(10, WireType.Varint).bool(message.enableWeaponSwap);\n        /* proto.ItemSwap weapon_swap = 11; */\n        if (message.weaponSwap)\n            ItemSwap.internalBinaryWrite(message.weaponSwap, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Rotation\n */\nexport const Warlock_Rotation = new Warlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Options$Type extends MessageType<Warlock_Options> {\n    constructor() {\n        super(\"proto.Warlock.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Armor\", Warlock_Options_Armor] },\n            { no: 2, name: \"summon\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Summon\", Warlock_Options_Summon] },\n            { no: 3, name: \"weaponImbue\", kind: \"enum\", T: () => [\"proto.Warlock.Options.WeaponImbue\", Warlock_Options_WeaponImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Options>): Warlock_Options {\n        const message = { armor: 0, summon: 0, weaponImbue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Options): Warlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Options.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.Summon summon */ 2:\n                    message.summon = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.WeaponImbue weaponImbue */ 3:\n                    message.weaponImbue = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Options.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* proto.Warlock.Options.Summon summon = 2; */\n        if (message.summon !== 0)\n            writer.tag(2, WireType.Varint).int32(message.summon);\n        /* proto.Warlock.Options.WeaponImbue weaponImbue = 3; */\n        if (message.weaponImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.weaponImbue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Options\n */\nexport const Warlock_Options = new Warlock_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ItemSwap } from \"./common\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 convection = 1;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 2;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 3;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 4;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 5;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 7;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_fury = 8;\n     */\n    elementalFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_nova = 9;\n     */\n    improvedFireNova: number;\n    /**\n     * @generated from protobuf field: int32 eye_of_the_storm = 10;\n     */\n    eyeOfTheStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 11;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: bool call_of_thunder = 12;\n     */\n    callOfThunder: boolean;\n    /**\n     * @generated from protobuf field: int32 unrelenting_storm = 13;\n     */\n    unrelentingStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 14;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 lightning_mastery = 15;\n     */\n    lightningMastery: number;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 16;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 storm_earth_and_fire = 17;\n     */\n    stormEarthAndFire: number;\n    /**\n     * @generated from protobuf field: int32 booming_echoes = 18;\n     */\n    boomingEchoes: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 19;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lightning_overload = 20;\n     */\n    lightningOverload: number;\n    /**\n     * @generated from protobuf field: int32 astral_shift = 21;\n     */\n    astralShift: number;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 22;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 23;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: int32 shamanism = 24;\n     */\n    shamanism: number;\n    /**\n     * @generated from protobuf field: bool thunderstorm = 25;\n     */\n    thunderstorm: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 enhancing_totems = 26;\n     */\n    enhancingTotems: number;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 27;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_knowledge = 28;\n     */\n    ancestralKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 guardian_totems = 29;\n     */\n    guardianTotems: number;\n    /**\n     * @generated from protobuf field: int32 thundering_strikes = 30;\n     */\n    thunderingStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_ghost_wolf = 31;\n     */\n    improvedGhostWolf: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 32;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_weapons = 33;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_focus = 34;\n     */\n    shamanisticFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 anticipation = 35;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 36;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 37;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_windfury_totem = 38;\n     */\n    improvedWindfuryTotem: number;\n    /**\n     * @generated from protobuf field: bool spirit_weapons = 39;\n     */\n    spiritWeapons: boolean;\n    /**\n     * @generated from protobuf field: int32 mental_dexterity = 40;\n     */\n    mentalDexterity: number;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 41;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 42;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 43;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 44;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 45;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool stormstrike = 46;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 47;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: bool lava_lash = 48;\n     */\n    lavaLash: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_stormstrike = 49;\n     */\n    improvedStormstrike: number;\n    /**\n     * @generated from protobuf field: int32 mental_quickness = 50;\n     */\n    mentalQuickness: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 51;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 52;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 53;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 54;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_healing_wave = 55;\n     */\n    improvedHealingWave: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 56;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_reincarnation = 57;\n     */\n    improvedReincarnation: number;\n    /**\n     * @generated from protobuf field: int32 healing_grace = 58;\n     */\n    healingGrace: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 59;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_water_shield = 60;\n     */\n    improvedWaterShield: number;\n    /**\n     * @generated from protobuf field: int32 healing_focus = 61;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: bool tidal_force = 62;\n     */\n    tidalForce: boolean;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 63;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: int32 restorative_totems = 64;\n     */\n    restorativeTotems: number;\n    /**\n     * @generated from protobuf field: int32 tidal_mastery = 65;\n     */\n    tidalMastery: number;\n    /**\n     * @generated from protobuf field: int32 healing_way = 66;\n     */\n    healingWay: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 67;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 68;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 purification = 69;\n     */\n    purification: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 70;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 71;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: bool cleanse_spirit = 72;\n     */\n    cleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 73;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: int32 improved_chain_heal = 74;\n     */\n    improvedChainHeal: number;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 75;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 76;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool earth_shield = 77;\n     */\n    earthShield: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_earth_shield = 78;\n     */\n    improvedEarthShield: number;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 79;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: bool riptide = 80;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use mana tide when appropriate.\n     *\n     * @generated from protobuf field: bool use_mana_tide = 5;\n     */\n    useManaTide: boolean;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 6;\n     */\n    useFireElemental: boolean;\n    /**\n     * If set, will revert to regular fire totems when fire elemental goes OOM,\n     * instead of waiting the full 2 minutes.\n     *\n     * @generated from protobuf field: bool recall_fire_elemental_on_oom = 7;\n     */\n    recallFireElementalOnOom: boolean;\n    /**\n     * If set, any time a 2-minute totem is about to expire, will recall and\n     * replace all totems.\n     *\n     * @generated from protobuf field: bool recall_totems = 8;\n     */\n    recallTotems: boolean;\n    /**\n     * If set will use fire totems as an MCD instead of manually controlling when to place them.\n     *\n     * @generated from protobuf field: bool use_fire_mcd = 9;\n     */\n    useFireMcd: boolean;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation rotation = 1;\n     */\n    rotation?: ElementalShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 3;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation.RotationType type = 1;\n     */\n    type: ElementalShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool in_thunderstorm_range = 2;\n     */\n    inThunderstormRange: boolean;\n    /**\n     * These options are used for the manual rotation.\n     *\n     * @generated from protobuf field: bool use_fire_nova = 4;\n     */\n    useFireNova: boolean;\n    /**\n     * @generated from protobuf field: double fn_min_mana_per = 9;\n     */\n    fnMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool use_chain_lightning = 5;\n     */\n    useChainLightning: boolean;\n    /**\n     * @generated from protobuf field: bool use_cl_only_gap = 11;\n     */\n    useClOnlyGap: boolean;\n    /**\n     * @generated from protobuf field: double cl_min_mana_per = 10;\n     */\n    clMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool overwrite_flameshock = 6;\n     */\n    overwriteFlameshock: boolean;\n    /**\n     * @generated from protobuf field: bool always_crit_lvb = 7;\n     */\n    alwaysCritLvb: boolean;\n    /**\n     * @generated from protobuf field: bool use_thunderstorm = 8;\n     */\n    useThunderstorm: boolean;\n    /**\n     * @generated from protobuf field: double lvb_fs_wait_ms = 12;\n     */\n    lvbFsWaitMs: number;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Rotation.RotationType\n */\nexport enum ElementalShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation rotation = 1;\n     */\n    rotation?: EnhancementShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 1;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.RotationType rotation_type = 2;\n     */\n    rotationType: EnhancementShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * weaving options\n     *\n     * @generated from protobuf field: bool lavaburst_weave = 4;\n     */\n    lavaburstWeave: boolean;\n    /**\n     * @generated from protobuf field: bool lightningbolt_weave = 5;\n     */\n    lightningboltWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 maelstromweapon_min_stack = 6;\n     */\n    maelstromweaponMinStack: number;\n    /**\n     * @generated from protobuf field: double auto_weave_delay = 7;\n     */\n    autoWeaveDelay: number;\n    /**\n     * other general rotation config options\n     *\n     * @generated from protobuf field: double firenova_mana_threshold = 8;\n     */\n    firenovaManaThreshold: number;\n    /**\n     * @generated from protobuf field: double shamanistic_rage_mana_threshold = 9;\n     */\n    shamanisticRageManaThreshold: number;\n    /**\n     * @generated from protobuf field: bool weave_flame_shock = 10;\n     */\n    weaveFlameShock: boolean;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11;\n     */\n    primaryShock: EnhancementShaman_Rotation_PrimaryShock;\n    /**\n     * @generated from protobuf field: int32 flame_shock_clip_ticks = 12;\n     */\n    flameShockClipTicks: number;\n    /**\n     * @generated from protobuf field: double delay_gcd_weave = 13;\n     */\n    delayGcdWeave: number;\n    /**\n     * @generated from protobuf field: proto.ItemSwap item_swap = 14;\n     */\n    itemSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: bool enable_item_swap = 15;\n     */\n    enableItemSwap: boolean;\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.RotationType\n */\nexport enum EnhancementShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Priority = 1;\n     */\n    Priority = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * TODO: add spells here for custom rotation (if nessecary?)\n *\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.CustomRotationSpell\n */\nexport enum EnhancementShaman_Rotation_CustomRotationSpell {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Stormstrike = 1;\n     */\n    Stormstrike = 1,\n    /**\n     * find a way to differentiate tooltips for this, lightning bolt weaves, and downranked flametongue\n     *\n     * @generated from protobuf enum value: StormstrikeDebuffMissing = 2;\n     */\n    StormstrikeDebuffMissing = 2,\n    /**\n     * @generated from protobuf enum value: LightningBolt = 3;\n     */\n    LightningBolt = 3,\n    /**\n     * @generated from protobuf enum value: LightningBoltWeave = 4;\n     */\n    LightningBoltWeave = 4,\n    /**\n     * @generated from protobuf enum value: FlameShock = 5;\n     */\n    FlameShock = 5,\n    /**\n     * @generated from protobuf enum value: EarthShock = 6;\n     */\n    EarthShock = 6,\n    /**\n     * @generated from protobuf enum value: LavaLash = 7;\n     */\n    LavaLash = 7,\n    /**\n     * @generated from protobuf enum value: LavaBurst = 8;\n     */\n    LavaBurst = 8,\n    /**\n     * @generated from protobuf enum value: LightningShield = 9;\n     */\n    LightningShield = 9,\n    /**\n     * @generated from protobuf enum value: FireNova = 10;\n     */\n    FireNova = 10,\n    /**\n     * @generated from protobuf enum value: ChainLightning = 11;\n     */\n    ChainLightning = 11,\n    /**\n     * @generated from protobuf enum value: FrostShock = 12;\n     */\n    FrostShock = 12,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 13;\n     */\n    MagmaTotem = 13,\n    /**\n     * @generated from protobuf enum value: LightningBoltDelayedWeave = 14;\n     */\n    LightningBoltDelayedWeave = 14\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.PrimaryShock\n */\nexport enum EnhancementShaman_Rotation_PrimaryShock {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Earth = 1;\n     */\n    Earth = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 3;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 5;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman\n */\nexport interface RestorationShaman {\n    /**\n     * @generated from protobuf field: proto.RestorationShaman.Rotation rotation = 1;\n     */\n    rotation?: RestorationShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.RestorationShaman.Options options = 3;\n     */\n    options?: RestorationShaman_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Rotation\n */\nexport interface RestorationShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 1;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: bool use_earth_shield = 2;\n     */\n    useEarthShield: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanHealSpell primary_heal = 3;\n     */\n    primaryHeal: ShamanHealSpell;\n    /**\n     * @generated from protobuf field: bool use_riptide = 4;\n     */\n    useRiptide: boolean;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Options\n */\nexport interface RestorationShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n    /**\n     * @generated from protobuf field: int32 earth_shield_p_p_m = 5;\n     */\n    earthShieldPPM: number;\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLava = 41524;\n     */\n    GlyphOfLava = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserHealingWave = 41535;\n     */\n    GlyphOfLesserHealingWave = 41535,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaTide = 41538;\n     */\n    GlyphOfManaTide = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemOfWrath = 45776;\n     */\n    GlyphOfTotemOfWrath = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterMastery = 41541;\n     */\n    GlyphOfWaterMastery = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 43386;\n     */\n    GlyphOfWaterShield = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2,\n    /**\n     * @generated from protobuf enum value: StoneskinTotem = 3;\n     */\n    StoneskinTotem = 3\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfWrath = 3;\n     */\n    TotemOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 4;\n     */\n    FlametongueTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1,\n    /**\n     * @generated from protobuf enum value: HealingStreamTotem = 2;\n     */\n    HealingStreamTotem = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueWeaponDownrank = 3;\n     */\n    FlametongueWeaponDownrank = 3,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 4;\n     */\n    FrostbrandWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2,\n    /**\n     * @generated from protobuf enum value: Auto = 3;\n     */\n    Auto = 3\n}\n/**\n * @generated from protobuf enum proto.ShamanHealSpell\n */\nexport enum ShamanHealSpell {\n    /**\n     * @generated from protobuf enum value: AutoHeal = 0;\n     */\n    AutoHeal = 0,\n    /**\n     * @generated from protobuf enum value: HealingWave = 1;\n     */\n    HealingWave = 1,\n    /**\n     * @generated from protobuf enum value: LesserHealingWave = 2;\n     */\n    LesserHealingWave = 2,\n    /**\n     * @generated from protobuf enum value: ChainHeal = 3;\n     */\n    ChainHeal = 3\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"elemental_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_fire_nova\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"eye_of_the_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"call_of_thunder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"unrelenting_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lightning_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"storm_earth_and_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"booming_echoes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"lightning_overload\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"astral_shift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"shamanism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"enhancing_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"ancestral_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"guardian_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"thundering_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_ghost_wolf\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_windfury_totem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"spirit_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"mental_dexterity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"lava_lash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_stormstrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mental_quickness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_healing_wave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_reincarnation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"healing_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_water_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"tidal_force\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"restorative_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"tidal_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"healing_way\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"purification\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"improved_chain_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"earth_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"improved_earth_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, elementalDevastation: 0, reverberation: 0, elementalFocus: false, elementalFury: 0, improvedFireNova: 0, eyeOfTheStorm: 0, elementalReach: 0, callOfThunder: false, unrelentingStorm: 0, elementalPrecision: 0, lightningMastery: 0, elementalMastery: false, stormEarthAndFire: 0, boomingEchoes: 0, elementalOath: 0, lightningOverload: 0, astralShift: 0, totemOfWrath: false, lavaFlows: 0, shamanism: 0, thunderstorm: false, enhancingTotems: 0, earthsGrasp: 0, ancestralKnowledge: 0, guardianTotems: 0, thunderingStrikes: 0, improvedGhostWolf: 0, improvedShields: 0, elementalWeapons: 0, shamanisticFocus: false, anticipation: 0, flurry: 0, toughness: 0, improvedWindfuryTotem: 0, spiritWeapons: false, mentalDexterity: 0, unleashedRage: 0, weaponMastery: 0, frozenPower: 0, dualWieldSpecialization: 0, dualWield: false, stormstrike: false, staticShock: 0, lavaLash: false, improvedStormstrike: 0, mentalQuickness: 0, shamanisticRage: false, earthenPower: 0, maelstromWeapon: 0, feralSpirit: false, improvedHealingWave: 0, totemicFocus: 0, improvedReincarnation: 0, healingGrace: 0, tidalFocus: 0, improvedWaterShield: 0, healingFocus: 0, tidalForce: false, ancestralHealing: 0, restorativeTotems: 0, tidalMastery: 0, healingWay: 0, naturesSwiftness: false, focusedMind: 0, purification: 0, naturesGuardian: 0, manaTideTotem: false, cleanseSpirit: false, blessingOfTheEternals: 0, improvedChainHeal: 0, naturesBlessing: 0, ancestralAwakening: 0, earthShield: false, improvedEarthShield: 0, tidalWaves: 0, riptide: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 convection */ 1:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 2:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 3:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 4:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 5:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 7:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_fury */ 8:\n                    message.elementalFury = reader.int32();\n                    break;\n                case /* int32 improved_fire_nova */ 9:\n                    message.improvedFireNova = reader.int32();\n                    break;\n                case /* int32 eye_of_the_storm */ 10:\n                    message.eyeOfTheStorm = reader.int32();\n                    break;\n                case /* int32 elemental_reach */ 11:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* bool call_of_thunder */ 12:\n                    message.callOfThunder = reader.bool();\n                    break;\n                case /* int32 unrelenting_storm */ 13:\n                    message.unrelentingStorm = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 14:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 lightning_mastery */ 15:\n                    message.lightningMastery = reader.int32();\n                    break;\n                case /* bool elemental_mastery */ 16:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 storm_earth_and_fire */ 17:\n                    message.stormEarthAndFire = reader.int32();\n                    break;\n                case /* int32 booming_echoes */ 18:\n                    message.boomingEchoes = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 19:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lightning_overload */ 20:\n                    message.lightningOverload = reader.int32();\n                    break;\n                case /* int32 astral_shift */ 21:\n                    message.astralShift = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 22:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* int32 lava_flows */ 23:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* int32 shamanism */ 24:\n                    message.shamanism = reader.int32();\n                    break;\n                case /* bool thunderstorm */ 25:\n                    message.thunderstorm = reader.bool();\n                    break;\n                case /* int32 enhancing_totems */ 26:\n                    message.enhancingTotems = reader.int32();\n                    break;\n                case /* int32 earths_grasp */ 27:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* int32 ancestral_knowledge */ 28:\n                    message.ancestralKnowledge = reader.int32();\n                    break;\n                case /* int32 guardian_totems */ 29:\n                    message.guardianTotems = reader.int32();\n                    break;\n                case /* int32 thundering_strikes */ 30:\n                    message.thunderingStrikes = reader.int32();\n                    break;\n                case /* int32 improved_ghost_wolf */ 31:\n                    message.improvedGhostWolf = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 32:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_weapons */ 33:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* bool shamanistic_focus */ 34:\n                    message.shamanisticFocus = reader.bool();\n                    break;\n                case /* int32 anticipation */ 35:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 flurry */ 36:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 toughness */ 37:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_windfury_totem */ 38:\n                    message.improvedWindfuryTotem = reader.int32();\n                    break;\n                case /* bool spirit_weapons */ 39:\n                    message.spiritWeapons = reader.bool();\n                    break;\n                case /* int32 mental_dexterity */ 40:\n                    message.mentalDexterity = reader.int32();\n                    break;\n                case /* int32 unleashed_rage */ 41:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 42:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 43:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 44:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* bool dual_wield */ 45:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool stormstrike */ 46:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 47:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* bool lava_lash */ 48:\n                    message.lavaLash = reader.bool();\n                    break;\n                case /* int32 improved_stormstrike */ 49:\n                    message.improvedStormstrike = reader.int32();\n                    break;\n                case /* int32 mental_quickness */ 50:\n                    message.mentalQuickness = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 51:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 earthen_power */ 52:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 53:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 54:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 improved_healing_wave */ 55:\n                    message.improvedHealingWave = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 56:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 improved_reincarnation */ 57:\n                    message.improvedReincarnation = reader.int32();\n                    break;\n                case /* int32 healing_grace */ 58:\n                    message.healingGrace = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 59:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 improved_water_shield */ 60:\n                    message.improvedWaterShield = reader.int32();\n                    break;\n                case /* int32 healing_focus */ 61:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* bool tidal_force */ 62:\n                    message.tidalForce = reader.bool();\n                    break;\n                case /* int32 ancestral_healing */ 63:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* int32 restorative_totems */ 64:\n                    message.restorativeTotems = reader.int32();\n                    break;\n                case /* int32 tidal_mastery */ 65:\n                    message.tidalMastery = reader.int32();\n                    break;\n                case /* int32 healing_way */ 66:\n                    message.healingWay = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 67:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 focused_mind */ 68:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 purification */ 69:\n                    message.purification = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 70:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 71:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* bool cleanse_spirit */ 72:\n                    message.cleanseSpirit = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 73:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* int32 improved_chain_heal */ 74:\n                    message.improvedChainHeal = reader.int32();\n                    break;\n                case /* int32 natures_blessing */ 75:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 76:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool earth_shield */ 77:\n                    message.earthShield = reader.bool();\n                    break;\n                case /* int32 improved_earth_shield */ 78:\n                    message.improvedEarthShield = reader.int32();\n                    break;\n                case /* int32 tidal_waves */ 79:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* bool riptide */ 80:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 convection = 1; */\n        if (message.convection !== 0)\n            writer.tag(1, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 2; */\n        if (message.concussion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 3; */\n        if (message.callOfFlame !== 0)\n            writer.tag(3, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 4; */\n        if (message.elementalWarding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.elementalWarding);\n        /* int32 elemental_devastation = 5; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* bool elemental_focus = 7; */\n        if (message.elementalFocus !== false)\n            writer.tag(7, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_fury = 8; */\n        if (message.elementalFury !== 0)\n            writer.tag(8, WireType.Varint).int32(message.elementalFury);\n        /* int32 improved_fire_nova = 9; */\n        if (message.improvedFireNova !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedFireNova);\n        /* int32 eye_of_the_storm = 10; */\n        if (message.eyeOfTheStorm !== 0)\n            writer.tag(10, WireType.Varint).int32(message.eyeOfTheStorm);\n        /* int32 elemental_reach = 11; */\n        if (message.elementalReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalReach);\n        /* bool call_of_thunder = 12; */\n        if (message.callOfThunder !== false)\n            writer.tag(12, WireType.Varint).bool(message.callOfThunder);\n        /* int32 unrelenting_storm = 13; */\n        if (message.unrelentingStorm !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unrelentingStorm);\n        /* int32 elemental_precision = 14; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(14, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 lightning_mastery = 15; */\n        if (message.lightningMastery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lightningMastery);\n        /* bool elemental_mastery = 16; */\n        if (message.elementalMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.elementalMastery);\n        /* int32 storm_earth_and_fire = 17; */\n        if (message.stormEarthAndFire !== 0)\n            writer.tag(17, WireType.Varint).int32(message.stormEarthAndFire);\n        /* int32 booming_echoes = 18; */\n        if (message.boomingEchoes !== 0)\n            writer.tag(18, WireType.Varint).int32(message.boomingEchoes);\n        /* int32 elemental_oath = 19; */\n        if (message.elementalOath !== 0)\n            writer.tag(19, WireType.Varint).int32(message.elementalOath);\n        /* int32 lightning_overload = 20; */\n        if (message.lightningOverload !== 0)\n            writer.tag(20, WireType.Varint).int32(message.lightningOverload);\n        /* int32 astral_shift = 21; */\n        if (message.astralShift !== 0)\n            writer.tag(21, WireType.Varint).int32(message.astralShift);\n        /* bool totem_of_wrath = 22; */\n        if (message.totemOfWrath !== false)\n            writer.tag(22, WireType.Varint).bool(message.totemOfWrath);\n        /* int32 lava_flows = 23; */\n        if (message.lavaFlows !== 0)\n            writer.tag(23, WireType.Varint).int32(message.lavaFlows);\n        /* int32 shamanism = 24; */\n        if (message.shamanism !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shamanism);\n        /* bool thunderstorm = 25; */\n        if (message.thunderstorm !== false)\n            writer.tag(25, WireType.Varint).bool(message.thunderstorm);\n        /* int32 enhancing_totems = 26; */\n        if (message.enhancingTotems !== 0)\n            writer.tag(26, WireType.Varint).int32(message.enhancingTotems);\n        /* int32 earths_grasp = 27; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthsGrasp);\n        /* int32 ancestral_knowledge = 28; */\n        if (message.ancestralKnowledge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.ancestralKnowledge);\n        /* int32 guardian_totems = 29; */\n        if (message.guardianTotems !== 0)\n            writer.tag(29, WireType.Varint).int32(message.guardianTotems);\n        /* int32 thundering_strikes = 30; */\n        if (message.thunderingStrikes !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thunderingStrikes);\n        /* int32 improved_ghost_wolf = 31; */\n        if (message.improvedGhostWolf !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedGhostWolf);\n        /* int32 improved_shields = 32; */\n        if (message.improvedShields !== 0)\n            writer.tag(32, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_weapons = 33; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(33, WireType.Varint).int32(message.elementalWeapons);\n        /* bool shamanistic_focus = 34; */\n        if (message.shamanisticFocus !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticFocus);\n        /* int32 anticipation = 35; */\n        if (message.anticipation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.anticipation);\n        /* int32 flurry = 36; */\n        if (message.flurry !== 0)\n            writer.tag(36, WireType.Varint).int32(message.flurry);\n        /* int32 toughness = 37; */\n        if (message.toughness !== 0)\n            writer.tag(37, WireType.Varint).int32(message.toughness);\n        /* int32 improved_windfury_totem = 38; */\n        if (message.improvedWindfuryTotem !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedWindfuryTotem);\n        /* bool spirit_weapons = 39; */\n        if (message.spiritWeapons !== false)\n            writer.tag(39, WireType.Varint).bool(message.spiritWeapons);\n        /* int32 mental_dexterity = 40; */\n        if (message.mentalDexterity !== 0)\n            writer.tag(40, WireType.Varint).int32(message.mentalDexterity);\n        /* int32 unleashed_rage = 41; */\n        if (message.unleashedRage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unleashedRage);\n        /* int32 weapon_mastery = 42; */\n        if (message.weaponMastery !== 0)\n            writer.tag(42, WireType.Varint).int32(message.weaponMastery);\n        /* int32 frozen_power = 43; */\n        if (message.frozenPower !== 0)\n            writer.tag(43, WireType.Varint).int32(message.frozenPower);\n        /* int32 dual_wield_specialization = 44; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(44, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* bool dual_wield = 45; */\n        if (message.dualWield !== false)\n            writer.tag(45, WireType.Varint).bool(message.dualWield);\n        /* bool stormstrike = 46; */\n        if (message.stormstrike !== false)\n            writer.tag(46, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 47; */\n        if (message.staticShock !== 0)\n            writer.tag(47, WireType.Varint).int32(message.staticShock);\n        /* bool lava_lash = 48; */\n        if (message.lavaLash !== false)\n            writer.tag(48, WireType.Varint).bool(message.lavaLash);\n        /* int32 improved_stormstrike = 49; */\n        if (message.improvedStormstrike !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedStormstrike);\n        /* int32 mental_quickness = 50; */\n        if (message.mentalQuickness !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mentalQuickness);\n        /* bool shamanistic_rage = 51; */\n        if (message.shamanisticRage !== false)\n            writer.tag(51, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 earthen_power = 52; */\n        if (message.earthenPower !== 0)\n            writer.tag(52, WireType.Varint).int32(message.earthenPower);\n        /* int32 maelstrom_weapon = 53; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(53, WireType.Varint).int32(message.maelstromWeapon);\n        /* bool feral_spirit = 54; */\n        if (message.feralSpirit !== false)\n            writer.tag(54, WireType.Varint).bool(message.feralSpirit);\n        /* int32 improved_healing_wave = 55; */\n        if (message.improvedHealingWave !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedHealingWave);\n        /* int32 totemic_focus = 56; */\n        if (message.totemicFocus !== 0)\n            writer.tag(56, WireType.Varint).int32(message.totemicFocus);\n        /* int32 improved_reincarnation = 57; */\n        if (message.improvedReincarnation !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedReincarnation);\n        /* int32 healing_grace = 58; */\n        if (message.healingGrace !== 0)\n            writer.tag(58, WireType.Varint).int32(message.healingGrace);\n        /* int32 tidal_focus = 59; */\n        if (message.tidalFocus !== 0)\n            writer.tag(59, WireType.Varint).int32(message.tidalFocus);\n        /* int32 improved_water_shield = 60; */\n        if (message.improvedWaterShield !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedWaterShield);\n        /* int32 healing_focus = 61; */\n        if (message.healingFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.healingFocus);\n        /* bool tidal_force = 62; */\n        if (message.tidalForce !== false)\n            writer.tag(62, WireType.Varint).bool(message.tidalForce);\n        /* int32 ancestral_healing = 63; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ancestralHealing);\n        /* int32 restorative_totems = 64; */\n        if (message.restorativeTotems !== 0)\n            writer.tag(64, WireType.Varint).int32(message.restorativeTotems);\n        /* int32 tidal_mastery = 65; */\n        if (message.tidalMastery !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tidalMastery);\n        /* int32 healing_way = 66; */\n        if (message.healingWay !== 0)\n            writer.tag(66, WireType.Varint).int32(message.healingWay);\n        /* bool natures_swiftness = 67; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(67, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 focused_mind = 68; */\n        if (message.focusedMind !== 0)\n            writer.tag(68, WireType.Varint).int32(message.focusedMind);\n        /* int32 purification = 69; */\n        if (message.purification !== 0)\n            writer.tag(69, WireType.Varint).int32(message.purification);\n        /* int32 natures_guardian = 70; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(70, WireType.Varint).int32(message.naturesGuardian);\n        /* bool mana_tide_totem = 71; */\n        if (message.manaTideTotem !== false)\n            writer.tag(71, WireType.Varint).bool(message.manaTideTotem);\n        /* bool cleanse_spirit = 72; */\n        if (message.cleanseSpirit !== false)\n            writer.tag(72, WireType.Varint).bool(message.cleanseSpirit);\n        /* int32 blessing_of_the_eternals = 73; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(73, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* int32 improved_chain_heal = 74; */\n        if (message.improvedChainHeal !== 0)\n            writer.tag(74, WireType.Varint).int32(message.improvedChainHeal);\n        /* int32 natures_blessing = 75; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(75, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 ancestral_awakening = 76; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(76, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool earth_shield = 77; */\n        if (message.earthShield !== false)\n            writer.tag(77, WireType.Varint).bool(message.earthShield);\n        /* int32 improved_earth_shield = 78; */\n        if (message.improvedEarthShield !== 0)\n            writer.tag(78, WireType.Varint).int32(message.improvedEarthShield);\n        /* int32 tidal_waves = 79; */\n        if (message.tidalWaves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.tidalWaves);\n        /* bool riptide = 80; */\n        if (message.riptide !== false)\n            writer.tag(80, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 5, name: \"use_mana_tide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"recall_fire_elemental_on_oom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"recall_totems\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"use_fire_mcd\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useManaTide: false, useFireElemental: false, recallFireElementalOnOom: false, recallTotems: false, useFireMcd: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_mana_tide */ 5:\n                    message.useManaTide = reader.bool();\n                    break;\n                case /* bool use_fire_elemental */ 6:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* bool recall_fire_elemental_on_oom */ 7:\n                    message.recallFireElementalOnOom = reader.bool();\n                    break;\n                case /* bool recall_totems */ 8:\n                    message.recallTotems = reader.bool();\n                    break;\n                case /* bool use_fire_mcd */ 9:\n                    message.useFireMcd = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        /* bool use_mana_tide = 5; */\n        if (message.useManaTide !== false)\n            writer.tag(5, WireType.Varint).bool(message.useManaTide);\n        /* bool use_fire_elemental = 6; */\n        if (message.useFireElemental !== false)\n            writer.tag(6, WireType.Varint).bool(message.useFireElemental);\n        /* bool recall_fire_elemental_on_oom = 7; */\n        if (message.recallFireElementalOnOom !== false)\n            writer.tag(7, WireType.Varint).bool(message.recallFireElementalOnOom);\n        /* bool recall_totems = 8; */\n        if (message.recallTotems !== false)\n            writer.tag(8, WireType.Varint).bool(message.recallTotems);\n        /* bool use_fire_mcd = 9; */\n        if (message.useFireMcd !== false)\n            writer.tag(9, WireType.Varint).bool(message.useFireMcd);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ElementalShaman_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Rotation rotation */ 1:\n                    message.rotation = ElementalShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            ElementalShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", [\n            { no: 3, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Rotation.RotationType\", ElementalShaman_Rotation_RotationType] },\n            { no: 2, name: \"in_thunderstorm_range\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_fire_nova\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"fn_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_chain_lightning\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"use_cl_only_gap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"cl_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"overwrite_flameshock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"always_crit_lvb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"lvb_fs_wait_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = { type: 0, inThunderstormRange: false, useFireNova: false, fnMinManaPer: 0, useChainLightning: false, useClOnlyGap: false, clMinManaPer: 0, overwriteFlameshock: false, alwaysCritLvb: false, useThunderstorm: false, lvbFsWaitMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 3:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.ElementalShaman.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* bool in_thunderstorm_range */ 2:\n                    message.inThunderstormRange = reader.bool();\n                    break;\n                case /* bool use_fire_nova */ 4:\n                    message.useFireNova = reader.bool();\n                    break;\n                case /* double fn_min_mana_per */ 9:\n                    message.fnMinManaPer = reader.double();\n                    break;\n                case /* bool use_chain_lightning */ 5:\n                    message.useChainLightning = reader.bool();\n                    break;\n                case /* bool use_cl_only_gap */ 11:\n                    message.useClOnlyGap = reader.bool();\n                    break;\n                case /* double cl_min_mana_per */ 10:\n                    message.clMinManaPer = reader.double();\n                    break;\n                case /* bool overwrite_flameshock */ 6:\n                    message.overwriteFlameshock = reader.bool();\n                    break;\n                case /* bool always_crit_lvb */ 7:\n                    message.alwaysCritLvb = reader.bool();\n                    break;\n                case /* bool use_thunderstorm */ 8:\n                    message.useThunderstorm = reader.bool();\n                    break;\n                case /* double lvb_fs_wait_ms */ 12:\n                    message.lvbFsWaitMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 3; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* bool in_thunderstorm_range = 2; */\n        if (message.inThunderstormRange !== false)\n            writer.tag(2, WireType.Varint).bool(message.inThunderstormRange);\n        /* bool use_fire_nova = 4; */\n        if (message.useFireNova !== false)\n            writer.tag(4, WireType.Varint).bool(message.useFireNova);\n        /* double fn_min_mana_per = 9; */\n        if (message.fnMinManaPer !== 0)\n            writer.tag(9, WireType.Bit64).double(message.fnMinManaPer);\n        /* bool use_chain_lightning = 5; */\n        if (message.useChainLightning !== false)\n            writer.tag(5, WireType.Varint).bool(message.useChainLightning);\n        /* bool use_cl_only_gap = 11; */\n        if (message.useClOnlyGap !== false)\n            writer.tag(11, WireType.Varint).bool(message.useClOnlyGap);\n        /* double cl_min_mana_per = 10; */\n        if (message.clMinManaPer !== 0)\n            writer.tag(10, WireType.Bit64).double(message.clMinManaPer);\n        /* bool overwrite_flameshock = 6; */\n        if (message.overwriteFlameshock !== false)\n            writer.tag(6, WireType.Varint).bool(message.overwriteFlameshock);\n        /* bool always_crit_lvb = 7; */\n        if (message.alwaysCritLvb !== false)\n            writer.tag(7, WireType.Varint).bool(message.alwaysCritLvb);\n        /* bool use_thunderstorm = 8; */\n        if (message.useThunderstorm !== false)\n            writer.tag(8, WireType.Varint).bool(message.useThunderstorm);\n        /* double lvb_fs_wait_ms = 12; */\n        if (message.lvbFsWaitMs !== 0)\n            writer.tag(12, WireType.Bit64).double(message.lvbFsWaitMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { shield: 0, bloodlust: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => EnhancementShaman_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Rotation rotation */ 1:\n                    message.rotation = EnhancementShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            EnhancementShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", [\n            { no: 1, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 2, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.RotationType\", EnhancementShaman_Rotation_RotationType] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"lavaburst_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"lightningbolt_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"maelstromweapon_min_stack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"auto_weave_delay\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"firenova_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"shamanistic_rage_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"weave_flame_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"primary_shock\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.PrimaryShock\", EnhancementShaman_Rotation_PrimaryShock] },\n            { no: 12, name: \"flame_shock_clip_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"delay_gcd_weave\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"item_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 15, name: \"enable_item_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = { rotationType: 0, lavaburstWeave: false, lightningboltWeave: false, maelstromweaponMinStack: 0, autoWeaveDelay: 0, firenovaManaThreshold: 0, shamanisticRageManaThreshold: 0, weaveFlameShock: false, primaryShock: 0, flameShockClipTicks: 0, delayGcdWeave: 0, enableItemSwap: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 1:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.EnhancementShaman.Rotation.RotationType rotation_type */ 2:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* bool lavaburst_weave */ 4:\n                    message.lavaburstWeave = reader.bool();\n                    break;\n                case /* bool lightningbolt_weave */ 5:\n                    message.lightningboltWeave = reader.bool();\n                    break;\n                case /* int32 maelstromweapon_min_stack */ 6:\n                    message.maelstromweaponMinStack = reader.int32();\n                    break;\n                case /* double auto_weave_delay */ 7:\n                    message.autoWeaveDelay = reader.double();\n                    break;\n                case /* double firenova_mana_threshold */ 8:\n                    message.firenovaManaThreshold = reader.double();\n                    break;\n                case /* double shamanistic_rage_mana_threshold */ 9:\n                    message.shamanisticRageManaThreshold = reader.double();\n                    break;\n                case /* bool weave_flame_shock */ 10:\n                    message.weaveFlameShock = reader.bool();\n                    break;\n                case /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock */ 11:\n                    message.primaryShock = reader.int32();\n                    break;\n                case /* int32 flame_shock_clip_ticks */ 12:\n                    message.flameShockClipTicks = reader.int32();\n                    break;\n                case /* double delay_gcd_weave */ 13:\n                    message.delayGcdWeave = reader.double();\n                    break;\n                case /* proto.ItemSwap item_swap */ 14:\n                    message.itemSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.itemSwap);\n                    break;\n                case /* bool enable_item_swap */ 15:\n                    message.enableItemSwap = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 1; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Rotation.RotationType rotation_type = 2; */\n        if (message.rotationType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.rotationType);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* bool lavaburst_weave = 4; */\n        if (message.lavaburstWeave !== false)\n            writer.tag(4, WireType.Varint).bool(message.lavaburstWeave);\n        /* bool lightningbolt_weave = 5; */\n        if (message.lightningboltWeave !== false)\n            writer.tag(5, WireType.Varint).bool(message.lightningboltWeave);\n        /* int32 maelstromweapon_min_stack = 6; */\n        if (message.maelstromweaponMinStack !== 0)\n            writer.tag(6, WireType.Varint).int32(message.maelstromweaponMinStack);\n        /* double auto_weave_delay = 7; */\n        if (message.autoWeaveDelay !== 0)\n            writer.tag(7, WireType.Bit64).double(message.autoWeaveDelay);\n        /* double firenova_mana_threshold = 8; */\n        if (message.firenovaManaThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.firenovaManaThreshold);\n        /* double shamanistic_rage_mana_threshold = 9; */\n        if (message.shamanisticRageManaThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.shamanisticRageManaThreshold);\n        /* bool weave_flame_shock = 10; */\n        if (message.weaveFlameShock !== false)\n            writer.tag(10, WireType.Varint).bool(message.weaveFlameShock);\n        /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11; */\n        if (message.primaryShock !== 0)\n            writer.tag(11, WireType.Varint).int32(message.primaryShock);\n        /* int32 flame_shock_clip_ticks = 12; */\n        if (message.flameShockClipTicks !== 0)\n            writer.tag(12, WireType.Varint).int32(message.flameShockClipTicks);\n        /* double delay_gcd_weave = 13; */\n        if (message.delayGcdWeave !== 0)\n            writer.tag(13, WireType.Bit64).double(message.delayGcdWeave);\n        /* proto.ItemSwap item_swap = 14; */\n        if (message.itemSwap)\n            ItemSwap.internalBinaryWrite(message.itemSwap, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* bool enable_item_swap = 15; */\n        if (message.enableItemSwap !== false)\n            writer.tag(15, WireType.Varint).bool(message.enableItemSwap);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] },\n            { no: 5, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { shield: 0, bloodlust: false, syncType: 0, imbueMh: 0, imbueOh: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 3:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 5:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        /* proto.ShamanSyncType sync_type = 3; */\n        if (message.syncType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        /* proto.ShamanImbue imbue_oh = 5; */\n        if (message.imbueOh !== 0)\n            writer.tag(5, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman$Type extends MessageType<RestorationShaman> {\n    constructor() {\n        super(\"proto.RestorationShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RestorationShaman_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman>): RestorationShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman): RestorationShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationShaman.Rotation rotation */ 1:\n                    message.rotation = RestorationShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RestorationShaman.Options options */ 3:\n                    message.options = RestorationShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            RestorationShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationShaman.Options options = 3; */\n        if (message.options)\n            RestorationShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman\n */\nexport const RestorationShaman = new RestorationShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Rotation$Type extends MessageType<RestorationShaman_Rotation> {\n    constructor() {\n        super(\"proto.RestorationShaman.Rotation\", [\n            { no: 1, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 2, name: \"use_earth_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"primary_heal\", kind: \"enum\", T: () => [\"proto.ShamanHealSpell\", ShamanHealSpell] },\n            { no: 4, name: \"use_riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman_Rotation>): RestorationShaman_Rotation {\n        const message = { useEarthShield: false, primaryHeal: 0, useRiptide: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Rotation): RestorationShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 1:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* bool use_earth_shield */ 2:\n                    message.useEarthShield = reader.bool();\n                    break;\n                case /* proto.ShamanHealSpell primary_heal */ 3:\n                    message.primaryHeal = reader.int32();\n                    break;\n                case /* bool use_riptide */ 4:\n                    message.useRiptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 1; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_earth_shield = 2; */\n        if (message.useEarthShield !== false)\n            writer.tag(2, WireType.Varint).bool(message.useEarthShield);\n        /* proto.ShamanHealSpell primary_heal = 3; */\n        if (message.primaryHeal !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primaryHeal);\n        /* bool use_riptide = 4; */\n        if (message.useRiptide !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRiptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Rotation\n */\nexport const RestorationShaman_Rotation = new RestorationShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Options$Type extends MessageType<RestorationShaman_Options> {\n    constructor() {\n        super(\"proto.RestorationShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] },\n            { no: 5, name: \"earth_shield_p_p_m\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman_Options>): RestorationShaman_Options {\n        const message = { shield: 0, bloodlust: false, imbueMh: 0, earthShieldPPM: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Options): RestorationShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                case /* int32 earth_shield_p_p_m */ 5:\n                    message.earthShieldPPM = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        /* int32 earth_shield_p_p_m = 5; */\n        if (message.earthShieldPPM !== 0)\n            writer.tag(5, WireType.Varint).int32(message.earthShieldPPM);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Options\n */\nexport const RestorationShaman_Options = new RestorationShaman_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 improved_eviscerate = 1;\n     */\n    improvedEviscerate: number;\n    /**\n     * @generated from protobuf field: int32 remorseless_attacks = 2;\n     */\n    remorselessAttacks: number;\n    /**\n     * @generated from protobuf field: int32 malice = 3;\n     */\n    malice: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 blood_spatter = 5;\n     */\n    bloodSpatter: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: bool vigor = 7;\n     */\n    vigor: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 8;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 9;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 improved_poisons = 11;\n     */\n    improvedPoisons: number;\n    /**\n     * @generated from protobuf field: int32 fleet_footed = 12;\n     */\n    fleetFooted: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 13;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_kidney_shot = 14;\n     */\n    improvedKidneyShot: number;\n    /**\n     * @generated from protobuf field: int32 quick_recovery = 15;\n     */\n    quickRecovery: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 16;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murder = 17;\n     */\n    murder: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 18;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool overkill = 19;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 20;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 focused_attacks = 21;\n     */\n    focusedAttacks: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 22;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: int32 master_poisoner = 23;\n     */\n    masterPoisoner: number;\n    /**\n     * @generated from protobuf field: bool mutilate = 24;\n     */\n    mutilate: boolean;\n    /**\n     * @generated from protobuf field: int32 turn_the_tables = 25;\n     */\n    turnTheTables: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 26;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: bool hunger_for_blood = 27;\n     */\n    hungerForBlood: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_gouge = 28;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 29;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 30;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 31;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 32;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 precision = 33;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 endurance = 34;\n     */\n    endurance: number;\n    /**\n     * @generated from protobuf field: bool riposte = 35;\n     */\n    riposte: boolean;\n    /**\n     * @generated from protobuf field: int32 close_quarters_combat = 36;\n     */\n    closeQuartersCombat: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 37;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 38;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 39;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 40;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 41;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: bool blade_flurry = 42;\n     */\n    bladeFlurry: boolean;\n    /**\n     * @generated from protobuf field: int32 hack_and_slash = 43;\n     */\n    hackAndSlash: number;\n    /**\n     * @generated from protobuf field: int32 weapon_expertise = 44;\n     */\n    weaponExpertise: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 45;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 46;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 47;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 nerves_of_steel = 48;\n     */\n    nervesOfSteel: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 49;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 50;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 unfair_advantage = 51;\n     */\n    unfairAdvantage: number;\n    /**\n     * @generated from protobuf field: bool surprise_attacks = 52;\n     */\n    surpriseAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 53;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 prey_on_the_weak = 54;\n     */\n    preyOnTheWeak: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 55;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 relentless_strikes = 56;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 master_of_deception = 57;\n     */\n    masterOfDeception: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 58;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 sleight_of_hand = 59;\n     */\n    sleightOfHand: number;\n    /**\n     * @generated from protobuf field: int32 dirty_tricks = 60;\n     */\n    dirtyTricks: number;\n    /**\n     * @generated from protobuf field: int32 camouflage = 61;\n     */\n    camouflage: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 62;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: bool ghostly_strike = 63;\n     */\n    ghostlyStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 64;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: int32 setup = 65;\n     */\n    setup: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 66;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 67;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 heightened_senses = 68;\n     */\n    heightenedSenses: number;\n    /**\n     * @generated from protobuf field: bool preparation = 69;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 dirty_deeds = 70;\n     */\n    dirtyDeeds: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 71;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 master_of_subtlety = 72;\n     */\n    masterOfSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 deadliness = 73;\n     */\n    deadliness: number;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 74;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 75;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 76;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: int32 sinister_calling = 77;\n     */\n    sinisterCalling: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 78;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 79;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool shadowstep = 80;\n     */\n    shadowstep: boolean;\n    /**\n     * @generated from protobuf field: int32 filthy_tricks = 81;\n     */\n    filthyTricks: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 82;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 83;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.Rogue\n */\nexport interface Rogue {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation rotation = 1;\n     */\n    rotation?: Rogue_Rotation;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options options = 3;\n     */\n    options?: Rogue_Options;\n}\n/**\n * @generated from protobuf message proto.Rogue.Rotation\n */\nexport interface Rogue_Rotation {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency expose_armor_frequency = 1;\n     */\n    exposeArmorFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_expose_armor = 2;\n     */\n    minimumComboPointsExposeArmor: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3;\n     */\n    tricksOfTheTradeFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4;\n     */\n    combatFinisherPriority: Rogue_Rotation_CombatPriority;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.CombatBuilder combat_builder = 25;\n     */\n    combatBuilder: Rogue_Rotation_CombatBuilder;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5;\n     */\n    assassinationFinisherPriority: Rogue_Rotation_AssassinationPriority;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.SubtletyPriority subtlety_finisher_priority = 6;\n     */\n    subtletyFinisherPriority: Rogue_Rotation_SubtletyPriority;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_primary_finisher = 7;\n     */\n    minimumComboPointsPrimaryFinisher: number;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_secondary_finisher = 8;\n     */\n    minimumComboPointsSecondaryFinisher: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 9 [json_name = \"MultiTargetSliceFrequency\"];\n     */\n    multiTargetSliceFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_multi_target_slice = 10;\n     */\n    minimumComboPointsMultiTargetSlice: number;\n    /**\n     * @generated from protobuf field: bool use_feint = 12;\n     */\n    useFeint: boolean;\n    /**\n     * @generated from protobuf field: bool open_with_garrote = 15;\n     */\n    openWithGarrote: boolean;\n    /**\n     * @generated from protobuf field: bool open_with_premeditation = 16;\n     */\n    openWithPremeditation: boolean;\n    /**\n     * @generated from protobuf field: bool open_with_shadowstep = 17;\n     */\n    openWithShadowstep: boolean;\n    /**\n     * @generated from protobuf field: bool rupture_for_bleed = 18;\n     */\n    ruptureForBleed: boolean;\n    /**\n     * @generated from protobuf field: bool hemo_with_dagger = 20;\n     */\n    hemoWithDagger: boolean;\n    /**\n     * @generated from protobuf field: bool use_ghostly_strike = 24;\n     */\n    useGhostlyStrike: boolean;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.Frequency\n */\nexport enum Rogue_Rotation_Frequency {\n    /**\n     * @generated from protobuf enum value: Never = 0;\n     */\n    Never = 0,\n    /**\n     * @generated from protobuf enum value: Once = 1;\n     */\n    Once = 1,\n    /**\n     * @generated from protobuf enum value: Maintain = 2;\n     */\n    Maintain = 2,\n    /**\n     * @generated from protobuf enum value: FrequencyUnknown = 5;\n     */\n    FrequencyUnknown = 5\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.CombatPriority\n */\nexport enum Rogue_Rotation_CombatPriority {\n    /**\n     * @generated from protobuf enum value: RuptureEviscerate = 0;\n     */\n    RuptureEviscerate = 0,\n    /**\n     * @generated from protobuf enum value: EviscerateRupture = 1;\n     */\n    EviscerateRupture = 1,\n    /**\n     * @generated from protobuf enum value: CombatPriorityUnknown = 2;\n     */\n    CombatPriorityUnknown = 2\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.CombatBuilder\n */\nexport enum Rogue_Rotation_CombatBuilder {\n    /**\n     * @generated from protobuf enum value: SinisterStrike = 0;\n     */\n    SinisterStrike = 0,\n    /**\n     * @generated from protobuf enum value: Backstab = 1;\n     */\n    Backstab = 1\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.AssassinationPriority\n */\nexport enum Rogue_Rotation_AssassinationPriority {\n    /**\n     * @generated from protobuf enum value: EnvenomRupture = 0;\n     */\n    EnvenomRupture = 0,\n    /**\n     * @generated from protobuf enum value: RuptureEnvenom = 1;\n     */\n    RuptureEnvenom = 1,\n    /**\n     * @generated from protobuf enum value: AssassinationPriorityUnknown = 2;\n     */\n    AssassinationPriorityUnknown = 2\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.SubtletyPriority\n */\nexport enum Rogue_Rotation_SubtletyPriority {\n    /**\n     * @generated from protobuf enum value: SubtletyEviscerate = 0;\n     */\n    SubtletyEviscerate = 0,\n    /**\n     * @generated from protobuf enum value: SubtletyEnvenom = 1;\n     */\n    SubtletyEnvenom = 1,\n    /**\n     * @generated from protobuf enum value: SubtletyPriorityUnknown = 2;\n     */\n    SubtletyPriorityUnknown = 2\n}\n/**\n * @generated from protobuf message proto.Rogue.Options\n */\nexport interface Rogue_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: int32 starting_overkill_duration = 4;\n     */\n    startingOverkillDuration: number;\n    /**\n     * @generated from protobuf field: bool apply_poisons_manually = 5;\n     */\n    applyPoisonsManually: boolean;\n    /**\n     * @generated from protobuf field: int32 honor_of_thieves_crit_rate = 6;\n     */\n    honorOfThievesCritRate: number;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Options.PoisonImbue\n */\nexport enum Rogue_Options_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2,\n    /**\n     * @generated from protobuf enum value: WoundPoison = 3;\n     */\n    WoundPoison = 3\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostlyStrike = 42965;\n     */\n    GlyphOfGhostlyStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungerForBlood = 45761;\n     */\n    GlyphOfHungerForBlood = 45761,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigor = 42971;\n     */\n    GlyphOfVigor = 42971\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 43380;\n     */\n    GlyphOfVanish = 43380\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"improved_eviscerate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"remorseless_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"malice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"blood_spatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"vigor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"fleet_footed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_kidney_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"quick_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"murder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"master_poisoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"mutilate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"turn_the_tables\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hunger_for_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"endurance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"riposte\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"close_quarters_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"blade_flurry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"hack_and_slash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"weapon_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"nerves_of_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"unfair_advantage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"surprise_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"prey_on_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"master_of_deception\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sleight_of_hand\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"dirty_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"camouflage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"ghostly_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 64, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"setup\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"heightened_senses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"dirty_deeds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"master_of_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"deadliness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"sinister_calling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"shadowstep\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"filthy_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { improvedEviscerate: 0, remorselessAttacks: 0, malice: 0, ruthlessness: 0, bloodSpatter: 0, puncturingWounds: 0, vigor: false, improvedExposeArmor: 0, lethality: 0, vilePoisons: 0, improvedPoisons: 0, fleetFooted: 0, coldBlood: false, improvedKidneyShot: 0, quickRecovery: 0, sealFate: 0, murder: 0, deadlyBrew: 0, overkill: false, deadenedNerves: 0, focusedAttacks: 0, findWeakness: 0, masterPoisoner: 0, mutilate: false, turnTheTables: 0, cutToTheChase: 0, hungerForBlood: false, improvedGouge: 0, improvedSinisterStrike: 0, dualWieldSpecialization: 0, improvedSliceAndDice: 0, deflection: 0, precision: 0, endurance: 0, riposte: false, closeQuartersCombat: 0, improvedKick: 0, improvedSprint: 0, lightningReflexes: 0, aggression: 0, maceSpecialization: 0, bladeFlurry: false, hackAndSlash: 0, weaponExpertise: 0, bladeTwisting: 0, vitality: 0, adrenalineRush: false, nervesOfSteel: 0, throwingSpecialization: 0, combatPotency: 0, unfairAdvantage: 0, surpriseAttacks: false, savageCombat: 0, preyOnTheWeak: 0, killingSpree: false, relentlessStrikes: 0, masterOfDeception: 0, opportunity: 0, sleightOfHand: 0, dirtyTricks: 0, camouflage: 0, elusiveness: 0, ghostlyStrike: false, serratedBlades: 0, setup: 0, initiative: 0, improvedAmbush: 0, heightenedSenses: 0, preparation: false, dirtyDeeds: 0, hemorrhage: false, masterOfSubtlety: 0, deadliness: 0, envelopingShadows: 0, premeditation: false, cheatDeath: 0, sinisterCalling: 0, waylay: 0, honorAmongThieves: 0, shadowstep: false, filthyTricks: 0, slaughterFromTheShadows: 0, shadowDance: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_eviscerate */ 1:\n                    message.improvedEviscerate = reader.int32();\n                    break;\n                case /* int32 remorseless_attacks */ 2:\n                    message.remorselessAttacks = reader.int32();\n                    break;\n                case /* int32 malice */ 3:\n                    message.malice = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 blood_spatter */ 5:\n                    message.bloodSpatter = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* bool vigor */ 7:\n                    message.vigor = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 8:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 lethality */ 9:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 improved_poisons */ 11:\n                    message.improvedPoisons = reader.int32();\n                    break;\n                case /* int32 fleet_footed */ 12:\n                    message.fleetFooted = reader.int32();\n                    break;\n                case /* bool cold_blood */ 13:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 improved_kidney_shot */ 14:\n                    message.improvedKidneyShot = reader.int32();\n                    break;\n                case /* int32 quick_recovery */ 15:\n                    message.quickRecovery = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 16:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murder */ 17:\n                    message.murder = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 18:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool overkill */ 19:\n                    message.overkill = reader.bool();\n                    break;\n                case /* int32 deadened_nerves */ 20:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 focused_attacks */ 21:\n                    message.focusedAttacks = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 22:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* int32 master_poisoner */ 23:\n                    message.masterPoisoner = reader.int32();\n                    break;\n                case /* bool mutilate */ 24:\n                    message.mutilate = reader.bool();\n                    break;\n                case /* int32 turn_the_tables */ 25:\n                    message.turnTheTables = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 26:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* bool hunger_for_blood */ 27:\n                    message.hungerForBlood = reader.bool();\n                    break;\n                case /* int32 improved_gouge */ 28:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 29:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 30:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 31:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 deflection */ 32:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 precision */ 33:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 endurance */ 34:\n                    message.endurance = reader.int32();\n                    break;\n                case /* bool riposte */ 35:\n                    message.riposte = reader.bool();\n                    break;\n                case /* int32 close_quarters_combat */ 36:\n                    message.closeQuartersCombat = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 37:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 38:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 39:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 aggression */ 40:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 mace_specialization */ 41:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* bool blade_flurry */ 42:\n                    message.bladeFlurry = reader.bool();\n                    break;\n                case /* int32 hack_and_slash */ 43:\n                    message.hackAndSlash = reader.int32();\n                    break;\n                case /* int32 weapon_expertise */ 44:\n                    message.weaponExpertise = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 45:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 vitality */ 46:\n                    message.vitality = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 47:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 nerves_of_steel */ 48:\n                    message.nervesOfSteel = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 49:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 50:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 unfair_advantage */ 51:\n                    message.unfairAdvantage = reader.int32();\n                    break;\n                case /* bool surprise_attacks */ 52:\n                    message.surpriseAttacks = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 53:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 prey_on_the_weak */ 54:\n                    message.preyOnTheWeak = reader.int32();\n                    break;\n                case /* bool killing_spree */ 55:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 relentless_strikes */ 56:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 master_of_deception */ 57:\n                    message.masterOfDeception = reader.int32();\n                    break;\n                case /* int32 opportunity */ 58:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 sleight_of_hand */ 59:\n                    message.sleightOfHand = reader.int32();\n                    break;\n                case /* int32 dirty_tricks */ 60:\n                    message.dirtyTricks = reader.int32();\n                    break;\n                case /* int32 camouflage */ 61:\n                    message.camouflage = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 62:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* bool ghostly_strike */ 63:\n                    message.ghostlyStrike = reader.bool();\n                    break;\n                case /* int32 serrated_blades */ 64:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* int32 setup */ 65:\n                    message.setup = reader.int32();\n                    break;\n                case /* int32 initiative */ 66:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 67:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 heightened_senses */ 68:\n                    message.heightenedSenses = reader.int32();\n                    break;\n                case /* bool preparation */ 69:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 dirty_deeds */ 70:\n                    message.dirtyDeeds = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 71:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 master_of_subtlety */ 72:\n                    message.masterOfSubtlety = reader.int32();\n                    break;\n                case /* int32 deadliness */ 73:\n                    message.deadliness = reader.int32();\n                    break;\n                case /* int32 enveloping_shadows */ 74:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* bool premeditation */ 75:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 cheat_death */ 76:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* int32 sinister_calling */ 77:\n                    message.sinisterCalling = reader.int32();\n                    break;\n                case /* int32 waylay */ 78:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 honor_among_thieves */ 79:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool shadowstep */ 80:\n                    message.shadowstep = reader.bool();\n                    break;\n                case /* int32 filthy_tricks */ 81:\n                    message.filthyTricks = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 82:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 83:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_eviscerate = 1; */\n        if (message.improvedEviscerate !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedEviscerate);\n        /* int32 remorseless_attacks = 2; */\n        if (message.remorselessAttacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.remorselessAttacks);\n        /* int32 malice = 3; */\n        if (message.malice !== 0)\n            writer.tag(3, WireType.Varint).int32(message.malice);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 blood_spatter = 5; */\n        if (message.bloodSpatter !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodSpatter);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* bool vigor = 7; */\n        if (message.vigor !== false)\n            writer.tag(7, WireType.Varint).bool(message.vigor);\n        /* int32 improved_expose_armor = 8; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 lethality = 9; */\n        if (message.lethality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.lethality);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 improved_poisons = 11; */\n        if (message.improvedPoisons !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedPoisons);\n        /* int32 fleet_footed = 12; */\n        if (message.fleetFooted !== 0)\n            writer.tag(12, WireType.Varint).int32(message.fleetFooted);\n        /* bool cold_blood = 13; */\n        if (message.coldBlood !== false)\n            writer.tag(13, WireType.Varint).bool(message.coldBlood);\n        /* int32 improved_kidney_shot = 14; */\n        if (message.improvedKidneyShot !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedKidneyShot);\n        /* int32 quick_recovery = 15; */\n        if (message.quickRecovery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.quickRecovery);\n        /* int32 seal_fate = 16; */\n        if (message.sealFate !== 0)\n            writer.tag(16, WireType.Varint).int32(message.sealFate);\n        /* int32 murder = 17; */\n        if (message.murder !== 0)\n            writer.tag(17, WireType.Varint).int32(message.murder);\n        /* int32 deadly_brew = 18; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.deadlyBrew);\n        /* bool overkill = 19; */\n        if (message.overkill !== false)\n            writer.tag(19, WireType.Varint).bool(message.overkill);\n        /* int32 deadened_nerves = 20; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(20, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 focused_attacks = 21; */\n        if (message.focusedAttacks !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedAttacks);\n        /* int32 find_weakness = 22; */\n        if (message.findWeakness !== 0)\n            writer.tag(22, WireType.Varint).int32(message.findWeakness);\n        /* int32 master_poisoner = 23; */\n        if (message.masterPoisoner !== 0)\n            writer.tag(23, WireType.Varint).int32(message.masterPoisoner);\n        /* bool mutilate = 24; */\n        if (message.mutilate !== false)\n            writer.tag(24, WireType.Varint).bool(message.mutilate);\n        /* int32 turn_the_tables = 25; */\n        if (message.turnTheTables !== 0)\n            writer.tag(25, WireType.Varint).int32(message.turnTheTables);\n        /* int32 cut_to_the_chase = 26; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(26, WireType.Varint).int32(message.cutToTheChase);\n        /* bool hunger_for_blood = 27; */\n        if (message.hungerForBlood !== false)\n            writer.tag(27, WireType.Varint).bool(message.hungerForBlood);\n        /* int32 improved_gouge = 28; */\n        if (message.improvedGouge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedGouge);\n        /* int32 improved_sinister_strike = 29; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 dual_wield_specialization = 30; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(30, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_slice_and_dice = 31; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 deflection = 32; */\n        if (message.deflection !== 0)\n            writer.tag(32, WireType.Varint).int32(message.deflection);\n        /* int32 precision = 33; */\n        if (message.precision !== 0)\n            writer.tag(33, WireType.Varint).int32(message.precision);\n        /* int32 endurance = 34; */\n        if (message.endurance !== 0)\n            writer.tag(34, WireType.Varint).int32(message.endurance);\n        /* bool riposte = 35; */\n        if (message.riposte !== false)\n            writer.tag(35, WireType.Varint).bool(message.riposte);\n        /* int32 close_quarters_combat = 36; */\n        if (message.closeQuartersCombat !== 0)\n            writer.tag(36, WireType.Varint).int32(message.closeQuartersCombat);\n        /* int32 improved_kick = 37; */\n        if (message.improvedKick !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedKick);\n        /* int32 improved_sprint = 38; */\n        if (message.improvedSprint !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedSprint);\n        /* int32 lightning_reflexes = 39; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 aggression = 40; */\n        if (message.aggression !== 0)\n            writer.tag(40, WireType.Varint).int32(message.aggression);\n        /* int32 mace_specialization = 41; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.maceSpecialization);\n        /* bool blade_flurry = 42; */\n        if (message.bladeFlurry !== false)\n            writer.tag(42, WireType.Varint).bool(message.bladeFlurry);\n        /* int32 hack_and_slash = 43; */\n        if (message.hackAndSlash !== 0)\n            writer.tag(43, WireType.Varint).int32(message.hackAndSlash);\n        /* int32 weapon_expertise = 44; */\n        if (message.weaponExpertise !== 0)\n            writer.tag(44, WireType.Varint).int32(message.weaponExpertise);\n        /* int32 blade_twisting = 45; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(45, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 vitality = 46; */\n        if (message.vitality !== 0)\n            writer.tag(46, WireType.Varint).int32(message.vitality);\n        /* bool adrenaline_rush = 47; */\n        if (message.adrenalineRush !== false)\n            writer.tag(47, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 nerves_of_steel = 48; */\n        if (message.nervesOfSteel !== 0)\n            writer.tag(48, WireType.Varint).int32(message.nervesOfSteel);\n        /* int32 throwing_specialization = 49; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(49, WireType.Varint).int32(message.throwingSpecialization);\n        /* int32 combat_potency = 50; */\n        if (message.combatPotency !== 0)\n            writer.tag(50, WireType.Varint).int32(message.combatPotency);\n        /* int32 unfair_advantage = 51; */\n        if (message.unfairAdvantage !== 0)\n            writer.tag(51, WireType.Varint).int32(message.unfairAdvantage);\n        /* bool surprise_attacks = 52; */\n        if (message.surpriseAttacks !== false)\n            writer.tag(52, WireType.Varint).bool(message.surpriseAttacks);\n        /* int32 savage_combat = 53; */\n        if (message.savageCombat !== 0)\n            writer.tag(53, WireType.Varint).int32(message.savageCombat);\n        /* int32 prey_on_the_weak = 54; */\n        if (message.preyOnTheWeak !== 0)\n            writer.tag(54, WireType.Varint).int32(message.preyOnTheWeak);\n        /* bool killing_spree = 55; */\n        if (message.killingSpree !== false)\n            writer.tag(55, WireType.Varint).bool(message.killingSpree);\n        /* int32 relentless_strikes = 56; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 master_of_deception = 57; */\n        if (message.masterOfDeception !== 0)\n            writer.tag(57, WireType.Varint).int32(message.masterOfDeception);\n        /* int32 opportunity = 58; */\n        if (message.opportunity !== 0)\n            writer.tag(58, WireType.Varint).int32(message.opportunity);\n        /* int32 sleight_of_hand = 59; */\n        if (message.sleightOfHand !== 0)\n            writer.tag(59, WireType.Varint).int32(message.sleightOfHand);\n        /* int32 dirty_tricks = 60; */\n        if (message.dirtyTricks !== 0)\n            writer.tag(60, WireType.Varint).int32(message.dirtyTricks);\n        /* int32 camouflage = 61; */\n        if (message.camouflage !== 0)\n            writer.tag(61, WireType.Varint).int32(message.camouflage);\n        /* int32 elusiveness = 62; */\n        if (message.elusiveness !== 0)\n            writer.tag(62, WireType.Varint).int32(message.elusiveness);\n        /* bool ghostly_strike = 63; */\n        if (message.ghostlyStrike !== false)\n            writer.tag(63, WireType.Varint).bool(message.ghostlyStrike);\n        /* int32 serrated_blades = 64; */\n        if (message.serratedBlades !== 0)\n            writer.tag(64, WireType.Varint).int32(message.serratedBlades);\n        /* int32 setup = 65; */\n        if (message.setup !== 0)\n            writer.tag(65, WireType.Varint).int32(message.setup);\n        /* int32 initiative = 66; */\n        if (message.initiative !== 0)\n            writer.tag(66, WireType.Varint).int32(message.initiative);\n        /* int32 improved_ambush = 67; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(67, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 heightened_senses = 68; */\n        if (message.heightenedSenses !== 0)\n            writer.tag(68, WireType.Varint).int32(message.heightenedSenses);\n        /* bool preparation = 69; */\n        if (message.preparation !== false)\n            writer.tag(69, WireType.Varint).bool(message.preparation);\n        /* int32 dirty_deeds = 70; */\n        if (message.dirtyDeeds !== 0)\n            writer.tag(70, WireType.Varint).int32(message.dirtyDeeds);\n        /* bool hemorrhage = 71; */\n        if (message.hemorrhage !== false)\n            writer.tag(71, WireType.Varint).bool(message.hemorrhage);\n        /* int32 master_of_subtlety = 72; */\n        if (message.masterOfSubtlety !== 0)\n            writer.tag(72, WireType.Varint).int32(message.masterOfSubtlety);\n        /* int32 deadliness = 73; */\n        if (message.deadliness !== 0)\n            writer.tag(73, WireType.Varint).int32(message.deadliness);\n        /* int32 enveloping_shadows = 74; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(74, WireType.Varint).int32(message.envelopingShadows);\n        /* bool premeditation = 75; */\n        if (message.premeditation !== false)\n            writer.tag(75, WireType.Varint).bool(message.premeditation);\n        /* int32 cheat_death = 76; */\n        if (message.cheatDeath !== 0)\n            writer.tag(76, WireType.Varint).int32(message.cheatDeath);\n        /* int32 sinister_calling = 77; */\n        if (message.sinisterCalling !== 0)\n            writer.tag(77, WireType.Varint).int32(message.sinisterCalling);\n        /* int32 waylay = 78; */\n        if (message.waylay !== 0)\n            writer.tag(78, WireType.Varint).int32(message.waylay);\n        /* int32 honor_among_thieves = 79; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool shadowstep = 80; */\n        if (message.shadowstep !== false)\n            writer.tag(80, WireType.Varint).bool(message.shadowstep);\n        /* int32 filthy_tricks = 81; */\n        if (message.filthyTricks !== 0)\n            writer.tag(81, WireType.Varint).int32(message.filthyTricks);\n        /* int32 slaughter_from_the_shadows = 82; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(82, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* bool shadow_dance = 83; */\n        if (message.shadowDance !== false)\n            writer.tag(83, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue$Type extends MessageType<Rogue> {\n    constructor() {\n        super(\"proto.Rogue\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Rogue_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Rogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue>): Rogue {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue): Rogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation rotation */ 1:\n                    message.rotation = Rogue_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Rogue.Options options */ 3:\n                    message.options = Rogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation rotation = 1; */\n        if (message.rotation)\n            Rogue_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options options = 3; */\n        if (message.options)\n            Rogue_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue\n */\nexport const Rogue = new Rogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Rotation$Type extends MessageType<Rogue_Rotation> {\n    constructor() {\n        super(\"proto.Rogue.Rotation\", [\n            { no: 1, name: \"expose_armor_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 2, name: \"minimum_combo_points_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"tricks_of_the_trade_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 4, name: \"combat_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.CombatPriority\", Rogue_Rotation_CombatPriority] },\n            { no: 25, name: \"combat_builder\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.CombatBuilder\", Rogue_Rotation_CombatBuilder] },\n            { no: 5, name: \"assassination_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.AssassinationPriority\", Rogue_Rotation_AssassinationPriority] },\n            { no: 6, name: \"subtlety_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.SubtletyPriority\", Rogue_Rotation_SubtletyPriority] },\n            { no: 7, name: \"minimum_combo_points_primary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"minimum_combo_points_secondary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"MultiTargetSliceFrequency\", kind: \"enum\", jsonName: \"MultiTargetSliceFrequency\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 10, name: \"minimum_combo_points_multi_target_slice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"use_feint\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"open_with_garrote\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"open_with_premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"open_with_shadowstep\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"rupture_for_bleed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"hemo_with_dagger\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"use_ghostly_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Rotation>): Rogue_Rotation {\n        const message = { exposeArmorFrequency: 0, minimumComboPointsExposeArmor: 0, tricksOfTheTradeFrequency: 0, combatFinisherPriority: 0, combatBuilder: 0, assassinationFinisherPriority: 0, subtletyFinisherPriority: 0, minimumComboPointsPrimaryFinisher: 0, minimumComboPointsSecondaryFinisher: 0, multiTargetSliceFrequency: 0, minimumComboPointsMultiTargetSlice: 0, useFeint: false, openWithGarrote: false, openWithPremeditation: false, openWithShadowstep: false, ruptureForBleed: false, hemoWithDagger: false, useGhostlyStrike: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Rotation): Rogue_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation.Frequency expose_armor_frequency */ 1:\n                    message.exposeArmorFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_expose_armor */ 2:\n                    message.minimumComboPointsExposeArmor = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency */ 3:\n                    message.tricksOfTheTradeFrequency = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority */ 4:\n                    message.combatFinisherPriority = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.CombatBuilder combat_builder */ 25:\n                    message.combatBuilder = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority */ 5:\n                    message.assassinationFinisherPriority = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.SubtletyPriority subtlety_finisher_priority */ 6:\n                    message.subtletyFinisherPriority = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_primary_finisher */ 7:\n                    message.minimumComboPointsPrimaryFinisher = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_secondary_finisher */ 8:\n                    message.minimumComboPointsSecondaryFinisher = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 9 [json_name = \"MultiTargetSliceFrequency\"];*/ 9:\n                    message.multiTargetSliceFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_multi_target_slice */ 10:\n                    message.minimumComboPointsMultiTargetSlice = reader.int32();\n                    break;\n                case /* bool use_feint */ 12:\n                    message.useFeint = reader.bool();\n                    break;\n                case /* bool open_with_garrote */ 15:\n                    message.openWithGarrote = reader.bool();\n                    break;\n                case /* bool open_with_premeditation */ 16:\n                    message.openWithPremeditation = reader.bool();\n                    break;\n                case /* bool open_with_shadowstep */ 17:\n                    message.openWithShadowstep = reader.bool();\n                    break;\n                case /* bool rupture_for_bleed */ 18:\n                    message.ruptureForBleed = reader.bool();\n                    break;\n                case /* bool hemo_with_dagger */ 20:\n                    message.hemoWithDagger = reader.bool();\n                    break;\n                case /* bool use_ghostly_strike */ 24:\n                    message.useGhostlyStrike = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation.Frequency expose_armor_frequency = 1; */\n        if (message.exposeArmorFrequency !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exposeArmorFrequency);\n        /* int32 minimum_combo_points_expose_armor = 2; */\n        if (message.minimumComboPointsExposeArmor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minimumComboPointsExposeArmor);\n        /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3; */\n        if (message.tricksOfTheTradeFrequency !== 0)\n            writer.tag(3, WireType.Varint).int32(message.tricksOfTheTradeFrequency);\n        /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4; */\n        if (message.combatFinisherPriority !== 0)\n            writer.tag(4, WireType.Varint).int32(message.combatFinisherPriority);\n        /* proto.Rogue.Rotation.CombatBuilder combat_builder = 25; */\n        if (message.combatBuilder !== 0)\n            writer.tag(25, WireType.Varint).int32(message.combatBuilder);\n        /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5; */\n        if (message.assassinationFinisherPriority !== 0)\n            writer.tag(5, WireType.Varint).int32(message.assassinationFinisherPriority);\n        /* proto.Rogue.Rotation.SubtletyPriority subtlety_finisher_priority = 6; */\n        if (message.subtletyFinisherPriority !== 0)\n            writer.tag(6, WireType.Varint).int32(message.subtletyFinisherPriority);\n        /* int32 minimum_combo_points_primary_finisher = 7; */\n        if (message.minimumComboPointsPrimaryFinisher !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minimumComboPointsPrimaryFinisher);\n        /* int32 minimum_combo_points_secondary_finisher = 8; */\n        if (message.minimumComboPointsSecondaryFinisher !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minimumComboPointsSecondaryFinisher);\n        /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 9 [json_name = \"MultiTargetSliceFrequency\"]; */\n        if (message.multiTargetSliceFrequency !== 0)\n            writer.tag(9, WireType.Varint).int32(message.multiTargetSliceFrequency);\n        /* int32 minimum_combo_points_multi_target_slice = 10; */\n        if (message.minimumComboPointsMultiTargetSlice !== 0)\n            writer.tag(10, WireType.Varint).int32(message.minimumComboPointsMultiTargetSlice);\n        /* bool use_feint = 12; */\n        if (message.useFeint !== false)\n            writer.tag(12, WireType.Varint).bool(message.useFeint);\n        /* bool open_with_garrote = 15; */\n        if (message.openWithGarrote !== false)\n            writer.tag(15, WireType.Varint).bool(message.openWithGarrote);\n        /* bool open_with_premeditation = 16; */\n        if (message.openWithPremeditation !== false)\n            writer.tag(16, WireType.Varint).bool(message.openWithPremeditation);\n        /* bool open_with_shadowstep = 17; */\n        if (message.openWithShadowstep !== false)\n            writer.tag(17, WireType.Varint).bool(message.openWithShadowstep);\n        /* bool rupture_for_bleed = 18; */\n        if (message.ruptureForBleed !== false)\n            writer.tag(18, WireType.Varint).bool(message.ruptureForBleed);\n        /* bool hemo_with_dagger = 20; */\n        if (message.hemoWithDagger !== false)\n            writer.tag(20, WireType.Varint).bool(message.hemoWithDagger);\n        /* bool use_ghostly_strike = 24; */\n        if (message.useGhostlyStrike !== false)\n            writer.tag(24, WireType.Varint).bool(message.useGhostlyStrike);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Rotation\n */\nexport const Rogue_Rotation = new Rogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Options$Type extends MessageType<Rogue_Options> {\n    constructor() {\n        super(\"proto.Rogue.Options\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 4, name: \"starting_overkill_duration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"apply_poisons_manually\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"honor_of_thieves_crit_rate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Options>): Rogue_Options {\n        const message = { mhImbue: 0, ohImbue: 0, startingOverkillDuration: 0, applyPoisonsManually: false, honorOfThievesCritRate: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Options): Rogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                case /* int32 starting_overkill_duration */ 4:\n                    message.startingOverkillDuration = reader.int32();\n                    break;\n                case /* bool apply_poisons_manually */ 5:\n                    message.applyPoisonsManually = reader.bool();\n                    break;\n                case /* int32 honor_of_thieves_crit_rate */ 6:\n                    message.honorOfThievesCritRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.Rogue.Options.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        /* int32 starting_overkill_duration = 4; */\n        if (message.startingOverkillDuration !== 0)\n            writer.tag(4, WireType.Varint).int32(message.startingOverkillDuration);\n        /* bool apply_poisons_manually = 5; */\n        if (message.applyPoisonsManually !== false)\n            writer.tag(5, WireType.Varint).bool(message.applyPoisonsManually);\n        /* int32 honor_of_thieves_crit_rate = 6; */\n        if (message.honorOfThievesCritRate !== 0)\n            writer.tag(6, WireType.Varint).int32(message.honorOfThievesCritRate);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Options\n */\nexport const Rogue_Options = new Rogue_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\nimport { RaidTarget } from \"./common\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 unbreakable_will = 1;\n     */\n    unbreakableWill: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 silent_resolve = 3;\n     */\n    silentResolve: number;\n    /**\n     * @generated from protobuf field: int32 improved_inner_fire = 4;\n     */\n    improvedInnerFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_fortitude = 5;\n     */\n    improvedPowerWordFortitude: number;\n    /**\n     * @generated from protobuf field: int32 martyrdom = 6;\n     */\n    martyrdom: number;\n    /**\n     * @generated from protobuf field: int32 meditation = 7;\n     */\n    meditation: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 8;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_shield = 9;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 absolution = 10;\n     */\n    absolution: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 11;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 improved_mana_burn = 12;\n     */\n    improvedManaBurn: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 13;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 mental_strength = 14;\n     */\n    mentalStrength: number;\n    /**\n     * @generated from protobuf field: bool soul_warding = 15;\n     */\n    soulWarding: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_power = 16;\n     */\n    focusedPower: number;\n    /**\n     * @generated from protobuf field: int32 enlightenment = 17;\n     */\n    enlightenment: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 18;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 19;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flash_heal = 20;\n     */\n    improvedFlashHeal: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 21;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 22;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 aspiration = 23;\n     */\n    aspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 24;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 25;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 grace = 26;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 27;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: bool penance = 28;\n     */\n    penance: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 healing_focus = 29;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_renew = 30;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 holy_specialization = 31;\n     */\n    holySpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spell_warding = 32;\n     */\n    spellWarding: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 33;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 34;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_recovery = 35;\n     */\n    blessedRecovery: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 36;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 holy_reach = 37;\n     */\n    holyReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_healing = 38;\n     */\n    improvedHealing: number;\n    /**\n     * @generated from protobuf field: int32 searing_light = 39;\n     */\n    searingLight: number;\n    /**\n     * @generated from protobuf field: int32 healing_prayers = 40;\n     */\n    healingPrayers: number;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 41;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 spiritual_guidance = 42;\n     */\n    spiritualGuidance: number;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 43;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_healing = 44;\n     */\n    spiritualHealing: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 45;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 46;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 47;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 48;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 49;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 serendipity = 50;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 empowered_renew = 51;\n     */\n    empoweredRenew: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 52;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 53;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 divine_providence = 54;\n     */\n    divineProvidence: number;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 55;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 spirit_tap = 56;\n     */\n    spiritTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_spirit_tap = 57;\n     */\n    improvedSpiritTap: number;\n    /**\n     * @generated from protobuf field: int32 darkness = 58;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 shadow_affinity = 59;\n     */\n    shadowAffinity: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 60;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 shadow_focus = 61;\n     */\n    shadowFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 62;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 63;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: bool mind_flay = 64;\n     */\n    mindFlay: boolean;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 65;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 shadow_reach = 66;\n     */\n    shadowReach: number;\n    /**\n     * @generated from protobuf field: int32 shadow_weaving = 67;\n     */\n    shadowWeaving: number;\n    /**\n     * @generated from protobuf field: bool silence = 68;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 69;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_vampiric_embrace = 70;\n     */\n    improvedVampiricEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 71;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 72;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 73;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 74;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_power = 75;\n     */\n    shadowPower: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadowform = 76;\n     */\n    improvedShadowform: number;\n    /**\n     * @generated from protobuf field: int32 misery = 77;\n     */\n    misery: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 78;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 79;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 80;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 81;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 82;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation rotation = 1;\n     */\n    rotation?: ShadowPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation.RotationType rotation_type = 1;\n     */\n    rotationType: ShadowPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation.PreCastOption precast_type = 2;\n     */\n    precastType: ShadowPriest_Rotation_PreCastOption;\n    /**\n     * @generated from protobuf field: double latency = 3;\n     */\n    latency: number; // Latency between actions\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Rotation.RotationType\n */\nexport enum ShadowPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Basic = 1;\n     */\n    Basic = 1,\n    /**\n     * @generated from protobuf enum value: Clipping = 2;\n     */\n    Clipping = 2,\n    /**\n     * @generated from protobuf enum value: Ideal = 3;\n     */\n    Ideal = 3,\n    /**\n     * @generated from protobuf enum value: AoE = 4;\n     */\n    AoE = 4\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Rotation.PreCastOption\n */\nexport enum ShadowPriest_Rotation_PreCastOption {\n    /**\n     * @generated from protobuf enum value: Nothing = 0;\n     */\n    Nothing = 0,\n    /**\n     * @generated from protobuf enum value: PrecastVt = 1;\n     */\n    PrecastVt = 1,\n    /**\n     * @generated from protobuf enum value: PrecastMb = 2;\n     */\n    PrecastMb = 2\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options.Armor armor = 2;\n     */\n    armor: ShadowPriest_Options_Armor;\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 4;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 5;\n     */\n    useShadowWordDeath: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 6;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Options.Armor\n */\nexport enum ShadowPriest_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.SmitePriest\n */\nexport interface SmitePriest {\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Rotation rotation = 1;\n     */\n    rotation?: SmitePriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Options options = 3;\n     */\n    options?: SmitePriest_Options;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Rotation\n */\nexport interface SmitePriest_Rotation {\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 2;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 3;\n     */\n    useShadowWordDeath: boolean;\n    /**\n     * @generated from protobuf field: bool use_devouring_plague = 4;\n     */\n    useDevouringPlague: boolean;\n    /**\n     * @generated from protobuf field: bool meme_dream = 5;\n     */\n    memeDream: boolean;\n    /**\n     * @generated from protobuf field: double allowed_holy_fire_delay_ms = 6;\n     */\n    allowedHolyFireDelayMs: number;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Options\n */\nexport interface SmitePriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.HealingPriest\n */\nexport interface HealingPriest {\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Rotation rotation = 1;\n     */\n    rotation?: HealingPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Options options = 3;\n     */\n    options?: HealingPriest_Options;\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Rotation\n */\nexport interface HealingPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Rotation.RotationType type = 1;\n     */\n    type: HealingPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 2;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.HealingPriest.Rotation.RotationType\n */\nexport enum HealingPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Cycle = 1;\n     */\n    Cycle = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.HealingPriest.Rotation.SpellOption\n */\nexport enum HealingPriest_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: GreaterHeal = 1;\n     */\n    GreaterHeal = 1,\n    /**\n     * @generated from protobuf enum value: FlashHeal = 2;\n     */\n    FlashHeal = 2,\n    /**\n     * @generated from protobuf enum value: Renew = 3;\n     */\n    Renew = 3,\n    /**\n     * @generated from protobuf enum value: PowerWordShield = 4;\n     */\n    PowerWordShield = 4,\n    /**\n     * @generated from protobuf enum value: CircleOfHealing = 5;\n     */\n    CircleOfHealing = 5,\n    /**\n     * @generated from protobuf enum value: PrayerOfHealing = 6;\n     */\n    PrayerOfHealing = 6,\n    /**\n     * @generated from protobuf enum value: PrayerOfMending = 7;\n     */\n    PrayerOfMending = 7,\n    /**\n     * @generated from protobuf enum value: Penance = 8;\n     */\n    Penance = 8,\n    /**\n     * @generated from protobuf enum value: BindingHeal = 9;\n     */\n    BindingHeal = 9\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Options\n */\nexport interface HealingPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n    /**\n     * Number of times for rapture to proc each minute, ie when a PWS is fully absorbed.\n     *\n     * @generated from protobuf field: double raptures_per_minute = 4;\n     */\n    rapturesPerMinute: number;\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfHymnOfHope = 45758;\n     */\n    GlyphOfHymnOfHope = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindControl = 42405;\n     */\n    GlyphOfMindControl = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindSear = 45757;\n     */\n    GlyphOfMindSear = 45757,\n    /**\n     * @generated from protobuf enum value: GlyphOfPainSuppression = 45760;\n     */\n    GlyphOfPainSuppression = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 42407;\n     */\n    GlyphOfShadow = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritOfRedemption = 42417;\n     */\n    GlyphOfSpiritOfRedemption = 42417\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"unbreakable_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"silent_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_inner_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_power_word_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"martyrdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"absolution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_mana_burn\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"mental_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soul_warding\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"focused_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"enlightenment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_flash_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"aspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"penance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"holy_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"spell_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"blessed_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"holy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"searing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"healing_prayers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"spiritual_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"spiritual_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"empowered_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"divine_providence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"shadow_affinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shadow_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"mind_flay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shadow_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"shadow_weaving\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 69, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"improved_vampiric_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 75, name: \"shadow_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_shadowform\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"misery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { unbreakableWill: 0, twinDisciplines: 0, silentResolve: 0, improvedInnerFire: 0, improvedPowerWordFortitude: 0, martyrdom: 0, meditation: 0, innerFocus: false, improvedPowerWordShield: 0, absolution: 0, mentalAgility: 0, improvedManaBurn: 0, reflectiveShield: 0, mentalStrength: 0, soulWarding: false, focusedPower: 0, enlightenment: 0, focusedWill: 0, powerInfusion: false, improvedFlashHeal: 0, renewedHope: 0, rapture: 0, aspiration: 0, divineAegis: 0, painSuppression: false, grace: 0, borrowedTime: 0, penance: false, healingFocus: 0, improvedRenew: 0, holySpecialization: 0, spellWarding: 0, divineFury: 0, desperatePrayer: false, blessedRecovery: 0, inspiration: 0, holyReach: 0, improvedHealing: 0, searingLight: 0, healingPrayers: 0, spiritOfRedemption: false, spiritualGuidance: 0, surgeOfLight: 0, spiritualHealing: 0, holyConcentration: 0, lightwell: false, blessedResilience: 0, bodyAndSoul: 0, empoweredHealing: 0, serendipity: 0, empoweredRenew: 0, circleOfHealing: false, testOfFaith: 0, divineProvidence: 0, guardianSpirit: false, spiritTap: 0, improvedSpiritTap: 0, darkness: 0, shadowAffinity: 0, improvedShadowWordPain: 0, shadowFocus: 0, improvedPsychicScream: 0, improvedMindBlast: 0, mindFlay: false, veiledShadows: 0, shadowReach: 0, shadowWeaving: 0, silence: false, vampiricEmbrace: false, improvedVampiricEmbrace: 0, focusedMind: 0, mindMelt: 0, improvedDevouringPlague: 0, shadowform: false, shadowPower: 0, improvedShadowform: 0, misery: 0, psychicHorror: false, vampiricTouch: false, painAndSuffering: 0, twistedFaith: 0, dispersion: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unbreakable_will */ 1:\n                    message.unbreakableWill = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 silent_resolve */ 3:\n                    message.silentResolve = reader.int32();\n                    break;\n                case /* int32 improved_inner_fire */ 4:\n                    message.improvedInnerFire = reader.int32();\n                    break;\n                case /* int32 improved_power_word_fortitude */ 5:\n                    message.improvedPowerWordFortitude = reader.int32();\n                    break;\n                case /* int32 martyrdom */ 6:\n                    message.martyrdom = reader.int32();\n                    break;\n                case /* int32 meditation */ 7:\n                    message.meditation = reader.int32();\n                    break;\n                case /* bool inner_focus */ 8:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 improved_power_word_shield */ 9:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 absolution */ 10:\n                    message.absolution = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 11:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 improved_mana_burn */ 12:\n                    message.improvedManaBurn = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 13:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 mental_strength */ 14:\n                    message.mentalStrength = reader.int32();\n                    break;\n                case /* bool soul_warding */ 15:\n                    message.soulWarding = reader.bool();\n                    break;\n                case /* int32 focused_power */ 16:\n                    message.focusedPower = reader.int32();\n                    break;\n                case /* int32 enlightenment */ 17:\n                    message.enlightenment = reader.int32();\n                    break;\n                case /* int32 focused_will */ 18:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* bool power_infusion */ 19:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 improved_flash_heal */ 20:\n                    message.improvedFlashHeal = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 21:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* int32 rapture */ 22:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 aspiration */ 23:\n                    message.aspiration = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 24:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 25:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 grace */ 26:\n                    message.grace = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 27:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* bool penance */ 28:\n                    message.penance = reader.bool();\n                    break;\n                case /* int32 healing_focus */ 29:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* int32 improved_renew */ 30:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 holy_specialization */ 31:\n                    message.holySpecialization = reader.int32();\n                    break;\n                case /* int32 spell_warding */ 32:\n                    message.spellWarding = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 33:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 34:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 blessed_recovery */ 35:\n                    message.blessedRecovery = reader.int32();\n                    break;\n                case /* int32 inspiration */ 36:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 holy_reach */ 37:\n                    message.holyReach = reader.int32();\n                    break;\n                case /* int32 improved_healing */ 38:\n                    message.improvedHealing = reader.int32();\n                    break;\n                case /* int32 searing_light */ 39:\n                    message.searingLight = reader.int32();\n                    break;\n                case /* int32 healing_prayers */ 40:\n                    message.healingPrayers = reader.int32();\n                    break;\n                case /* bool spirit_of_redemption */ 41:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 spiritual_guidance */ 42:\n                    message.spiritualGuidance = reader.int32();\n                    break;\n                case /* int32 surge_of_light */ 43:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 spiritual_healing */ 44:\n                    message.spiritualHealing = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 45:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 46:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 47:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 48:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 49:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 serendipity */ 50:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 empowered_renew */ 51:\n                    message.empoweredRenew = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 52:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* int32 test_of_faith */ 53:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 divine_providence */ 54:\n                    message.divineProvidence = reader.int32();\n                    break;\n                case /* bool guardian_spirit */ 55:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 spirit_tap */ 56:\n                    message.spiritTap = reader.int32();\n                    break;\n                case /* int32 improved_spirit_tap */ 57:\n                    message.improvedSpiritTap = reader.int32();\n                    break;\n                case /* int32 darkness */ 58:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 shadow_affinity */ 59:\n                    message.shadowAffinity = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 60:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 shadow_focus */ 61:\n                    message.shadowFocus = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 62:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 63:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* bool mind_flay */ 64:\n                    message.mindFlay = reader.bool();\n                    break;\n                case /* int32 veiled_shadows */ 65:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 shadow_reach */ 66:\n                    message.shadowReach = reader.int32();\n                    break;\n                case /* int32 shadow_weaving */ 67:\n                    message.shadowWeaving = reader.int32();\n                    break;\n                case /* bool silence */ 68:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 69:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 improved_vampiric_embrace */ 70:\n                    message.improvedVampiricEmbrace = reader.int32();\n                    break;\n                case /* int32 focused_mind */ 71:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 72:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 73:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* bool shadowform */ 74:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 shadow_power */ 75:\n                    message.shadowPower = reader.int32();\n                    break;\n                case /* int32 improved_shadowform */ 76:\n                    message.improvedShadowform = reader.int32();\n                    break;\n                case /* int32 misery */ 77:\n                    message.misery = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 78:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* bool vampiric_touch */ 79:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 pain_and_suffering */ 80:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 81:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool dispersion */ 82:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unbreakable_will = 1; */\n        if (message.unbreakableWill !== 0)\n            writer.tag(1, WireType.Varint).int32(message.unbreakableWill);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 silent_resolve = 3; */\n        if (message.silentResolve !== 0)\n            writer.tag(3, WireType.Varint).int32(message.silentResolve);\n        /* int32 improved_inner_fire = 4; */\n        if (message.improvedInnerFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedInnerFire);\n        /* int32 improved_power_word_fortitude = 5; */\n        if (message.improvedPowerWordFortitude !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedPowerWordFortitude);\n        /* int32 martyrdom = 6; */\n        if (message.martyrdom !== 0)\n            writer.tag(6, WireType.Varint).int32(message.martyrdom);\n        /* int32 meditation = 7; */\n        if (message.meditation !== 0)\n            writer.tag(7, WireType.Varint).int32(message.meditation);\n        /* bool inner_focus = 8; */\n        if (message.innerFocus !== false)\n            writer.tag(8, WireType.Varint).bool(message.innerFocus);\n        /* int32 improved_power_word_shield = 9; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 absolution = 10; */\n        if (message.absolution !== 0)\n            writer.tag(10, WireType.Varint).int32(message.absolution);\n        /* int32 mental_agility = 11; */\n        if (message.mentalAgility !== 0)\n            writer.tag(11, WireType.Varint).int32(message.mentalAgility);\n        /* int32 improved_mana_burn = 12; */\n        if (message.improvedManaBurn !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedManaBurn);\n        /* int32 reflective_shield = 13; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(13, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 mental_strength = 14; */\n        if (message.mentalStrength !== 0)\n            writer.tag(14, WireType.Varint).int32(message.mentalStrength);\n        /* bool soul_warding = 15; */\n        if (message.soulWarding !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulWarding);\n        /* int32 focused_power = 16; */\n        if (message.focusedPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.focusedPower);\n        /* int32 enlightenment = 17; */\n        if (message.enlightenment !== 0)\n            writer.tag(17, WireType.Varint).int32(message.enlightenment);\n        /* int32 focused_will = 18; */\n        if (message.focusedWill !== 0)\n            writer.tag(18, WireType.Varint).int32(message.focusedWill);\n        /* bool power_infusion = 19; */\n        if (message.powerInfusion !== false)\n            writer.tag(19, WireType.Varint).bool(message.powerInfusion);\n        /* int32 improved_flash_heal = 20; */\n        if (message.improvedFlashHeal !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFlashHeal);\n        /* int32 renewed_hope = 21; */\n        if (message.renewedHope !== 0)\n            writer.tag(21, WireType.Varint).int32(message.renewedHope);\n        /* int32 rapture = 22; */\n        if (message.rapture !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapture);\n        /* int32 aspiration = 23; */\n        if (message.aspiration !== 0)\n            writer.tag(23, WireType.Varint).int32(message.aspiration);\n        /* int32 divine_aegis = 24; */\n        if (message.divineAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 25; */\n        if (message.painSuppression !== false)\n            writer.tag(25, WireType.Varint).bool(message.painSuppression);\n        /* int32 grace = 26; */\n        if (message.grace !== 0)\n            writer.tag(26, WireType.Varint).int32(message.grace);\n        /* int32 borrowed_time = 27; */\n        if (message.borrowedTime !== 0)\n            writer.tag(27, WireType.Varint).int32(message.borrowedTime);\n        /* bool penance = 28; */\n        if (message.penance !== false)\n            writer.tag(28, WireType.Varint).bool(message.penance);\n        /* int32 healing_focus = 29; */\n        if (message.healingFocus !== 0)\n            writer.tag(29, WireType.Varint).int32(message.healingFocus);\n        /* int32 improved_renew = 30; */\n        if (message.improvedRenew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedRenew);\n        /* int32 holy_specialization = 31; */\n        if (message.holySpecialization !== 0)\n            writer.tag(31, WireType.Varint).int32(message.holySpecialization);\n        /* int32 spell_warding = 32; */\n        if (message.spellWarding !== 0)\n            writer.tag(32, WireType.Varint).int32(message.spellWarding);\n        /* int32 divine_fury = 33; */\n        if (message.divineFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 34; */\n        if (message.desperatePrayer !== false)\n            writer.tag(34, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 blessed_recovery = 35; */\n        if (message.blessedRecovery !== 0)\n            writer.tag(35, WireType.Varint).int32(message.blessedRecovery);\n        /* int32 inspiration = 36; */\n        if (message.inspiration !== 0)\n            writer.tag(36, WireType.Varint).int32(message.inspiration);\n        /* int32 holy_reach = 37; */\n        if (message.holyReach !== 0)\n            writer.tag(37, WireType.Varint).int32(message.holyReach);\n        /* int32 improved_healing = 38; */\n        if (message.improvedHealing !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedHealing);\n        /* int32 searing_light = 39; */\n        if (message.searingLight !== 0)\n            writer.tag(39, WireType.Varint).int32(message.searingLight);\n        /* int32 healing_prayers = 40; */\n        if (message.healingPrayers !== 0)\n            writer.tag(40, WireType.Varint).int32(message.healingPrayers);\n        /* bool spirit_of_redemption = 41; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(41, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 spiritual_guidance = 42; */\n        if (message.spiritualGuidance !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualGuidance);\n        /* int32 surge_of_light = 43; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(43, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 spiritual_healing = 44; */\n        if (message.spiritualHealing !== 0)\n            writer.tag(44, WireType.Varint).int32(message.spiritualHealing);\n        /* int32 holy_concentration = 45; */\n        if (message.holyConcentration !== 0)\n            writer.tag(45, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 46; */\n        if (message.lightwell !== false)\n            writer.tag(46, WireType.Varint).bool(message.lightwell);\n        /* int32 blessed_resilience = 47; */\n        if (message.blessedResilience !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blessedResilience);\n        /* int32 body_and_soul = 48; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(48, WireType.Varint).int32(message.bodyAndSoul);\n        /* int32 empowered_healing = 49; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(49, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 serendipity = 50; */\n        if (message.serendipity !== 0)\n            writer.tag(50, WireType.Varint).int32(message.serendipity);\n        /* int32 empowered_renew = 51; */\n        if (message.empoweredRenew !== 0)\n            writer.tag(51, WireType.Varint).int32(message.empoweredRenew);\n        /* bool circle_of_healing = 52; */\n        if (message.circleOfHealing !== false)\n            writer.tag(52, WireType.Varint).bool(message.circleOfHealing);\n        /* int32 test_of_faith = 53; */\n        if (message.testOfFaith !== 0)\n            writer.tag(53, WireType.Varint).int32(message.testOfFaith);\n        /* int32 divine_providence = 54; */\n        if (message.divineProvidence !== 0)\n            writer.tag(54, WireType.Varint).int32(message.divineProvidence);\n        /* bool guardian_spirit = 55; */\n        if (message.guardianSpirit !== false)\n            writer.tag(55, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 spirit_tap = 56; */\n        if (message.spiritTap !== 0)\n            writer.tag(56, WireType.Varint).int32(message.spiritTap);\n        /* int32 improved_spirit_tap = 57; */\n        if (message.improvedSpiritTap !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedSpiritTap);\n        /* int32 darkness = 58; */\n        if (message.darkness !== 0)\n            writer.tag(58, WireType.Varint).int32(message.darkness);\n        /* int32 shadow_affinity = 59; */\n        if (message.shadowAffinity !== 0)\n            writer.tag(59, WireType.Varint).int32(message.shadowAffinity);\n        /* int32 improved_shadow_word_pain = 60; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 shadow_focus = 61; */\n        if (message.shadowFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.shadowFocus);\n        /* int32 improved_psychic_scream = 62; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(62, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 63; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(63, WireType.Varint).int32(message.improvedMindBlast);\n        /* bool mind_flay = 64; */\n        if (message.mindFlay !== false)\n            writer.tag(64, WireType.Varint).bool(message.mindFlay);\n        /* int32 veiled_shadows = 65; */\n        if (message.veiledShadows !== 0)\n            writer.tag(65, WireType.Varint).int32(message.veiledShadows);\n        /* int32 shadow_reach = 66; */\n        if (message.shadowReach !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shadowReach);\n        /* int32 shadow_weaving = 67; */\n        if (message.shadowWeaving !== 0)\n            writer.tag(67, WireType.Varint).int32(message.shadowWeaving);\n        /* bool silence = 68; */\n        if (message.silence !== false)\n            writer.tag(68, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 69; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(69, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 improved_vampiric_embrace = 70; */\n        if (message.improvedVampiricEmbrace !== 0)\n            writer.tag(70, WireType.Varint).int32(message.improvedVampiricEmbrace);\n        /* int32 focused_mind = 71; */\n        if (message.focusedMind !== 0)\n            writer.tag(71, WireType.Varint).int32(message.focusedMind);\n        /* int32 mind_melt = 72; */\n        if (message.mindMelt !== 0)\n            writer.tag(72, WireType.Varint).int32(message.mindMelt);\n        /* int32 improved_devouring_plague = 73; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* bool shadowform = 74; */\n        if (message.shadowform !== false)\n            writer.tag(74, WireType.Varint).bool(message.shadowform);\n        /* int32 shadow_power = 75; */\n        if (message.shadowPower !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowPower);\n        /* int32 improved_shadowform = 76; */\n        if (message.improvedShadowform !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedShadowform);\n        /* int32 misery = 77; */\n        if (message.misery !== 0)\n            writer.tag(77, WireType.Varint).int32(message.misery);\n        /* bool psychic_horror = 78; */\n        if (message.psychicHorror !== false)\n            writer.tag(78, WireType.Varint).bool(message.psychicHorror);\n        /* bool vampiric_touch = 79; */\n        if (message.vampiricTouch !== false)\n            writer.tag(79, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 pain_and_suffering = 80; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(80, WireType.Varint).int32(message.painAndSuffering);\n        /* int32 twisted_faith = 81; */\n        if (message.twistedFaith !== 0)\n            writer.tag(81, WireType.Varint).int32(message.twistedFaith);\n        /* bool dispersion = 82; */\n        if (message.dispersion !== false)\n            writer.tag(82, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ShadowPriest_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation rotation */ 1:\n                    message.rotation = ShadowPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            ShadowPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Rotation.RotationType\", ShadowPriest_Rotation_RotationType] },\n            { no: 2, name: \"precast_type\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Rotation.PreCastOption\", ShadowPriest_Rotation_PreCastOption] },\n            { no: 3, name: \"latency\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = { rotationType: 0, precastType: 0, latency: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation.RotationType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* proto.ShadowPriest.Rotation.PreCastOption precast_type */ 2:\n                    message.precastType = reader.int32();\n                    break;\n                case /* double latency */ 3:\n                    message.latency = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation.RotationType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* proto.ShadowPriest.Rotation.PreCastOption precast_type = 2; */\n        if (message.precastType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.precastType);\n        /* double latency = 3; */\n        if (message.latency !== 0)\n            writer.tag(3, WireType.Bit64).double(message.latency);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"armor\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Options.Armor\", ShadowPriest_Options_Armor] },\n            { no: 4, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = { useShadowfiend: false, armor: 0, useMindBlast: false, useShadowWordDeath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.ShadowPriest.Options.Armor armor */ 2:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_mind_blast */ 4:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 5:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 6:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.ShadowPriest.Options.Armor armor = 2; */\n        if (message.armor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.armor);\n        /* bool use_mind_blast = 4; */\n        if (message.useMindBlast !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 5; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useShadowWordDeath);\n        /* proto.RaidTarget power_infusion_target = 6; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest$Type extends MessageType<SmitePriest> {\n    constructor() {\n        super(\"proto.SmitePriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => SmitePriest_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => SmitePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest>): SmitePriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest): SmitePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SmitePriest.Rotation rotation */ 1:\n                    message.rotation = SmitePriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.SmitePriest.Options options */ 3:\n                    message.options = SmitePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SmitePriest.Rotation rotation = 1; */\n        if (message.rotation)\n            SmitePriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest.Options options = 3; */\n        if (message.options)\n            SmitePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest\n */\nexport const SmitePriest = new SmitePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Rotation$Type extends MessageType<SmitePriest_Rotation> {\n    constructor() {\n        super(\"proto.SmitePriest.Rotation\", [\n            { no: 2, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_devouring_plague\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"meme_dream\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"allowed_holy_fire_delay_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Rotation>): SmitePriest_Rotation {\n        const message = { useMindBlast: false, useShadowWordDeath: false, useDevouringPlague: false, memeDream: false, allowedHolyFireDelayMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Rotation): SmitePriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_mind_blast */ 2:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 3:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                case /* bool use_devouring_plague */ 4:\n                    message.useDevouringPlague = reader.bool();\n                    break;\n                case /* bool meme_dream */ 5:\n                    message.memeDream = reader.bool();\n                    break;\n                case /* double allowed_holy_fire_delay_ms */ 6:\n                    message.allowedHolyFireDelayMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_mind_blast = 2; */\n        if (message.useMindBlast !== false)\n            writer.tag(2, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 3; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShadowWordDeath);\n        /* bool use_devouring_plague = 4; */\n        if (message.useDevouringPlague !== false)\n            writer.tag(4, WireType.Varint).bool(message.useDevouringPlague);\n        /* bool meme_dream = 5; */\n        if (message.memeDream !== false)\n            writer.tag(5, WireType.Varint).bool(message.memeDream);\n        /* double allowed_holy_fire_delay_ms = 6; */\n        if (message.allowedHolyFireDelayMs !== 0)\n            writer.tag(6, WireType.Bit64).double(message.allowedHolyFireDelayMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Rotation\n */\nexport const SmitePriest_Rotation = new SmitePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Options$Type extends MessageType<SmitePriest_Options> {\n    constructor() {\n        super(\"proto.SmitePriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Options>): SmitePriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Options): SmitePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Options\n */\nexport const SmitePriest_Options = new SmitePriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest$Type extends MessageType<HealingPriest> {\n    constructor() {\n        super(\"proto.HealingPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => HealingPriest_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => HealingPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest>): HealingPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest): HealingPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HealingPriest.Rotation rotation */ 1:\n                    message.rotation = HealingPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.HealingPriest.Options options */ 3:\n                    message.options = HealingPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HealingPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            HealingPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest.Options options = 3; */\n        if (message.options)\n            HealingPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest\n */\nexport const HealingPriest = new HealingPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Rotation$Type extends MessageType<HealingPriest_Rotation> {\n    constructor() {\n        super(\"proto.HealingPriest.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.HealingPriest.Rotation.RotationType\", HealingPriest_Rotation_RotationType] },\n            { no: 2, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest_Rotation>): HealingPriest_Rotation {\n        const message = { type: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Rotation): HealingPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HealingPriest.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 2:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HealingPriest.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* proto.CustomRotation custom_rotation = 2; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Rotation\n */\nexport const HealingPriest_Rotation = new HealingPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Options$Type extends MessageType<HealingPriest_Options> {\n    constructor() {\n        super(\"proto.HealingPriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 4, name: \"raptures_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest_Options>): HealingPriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false, rapturesPerMinute: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Options): HealingPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                case /* double raptures_per_minute */ 4:\n                    message.rapturesPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* double raptures_per_minute = 4; */\n        if (message.rapturesPerMinute !== 0)\n            writer.tag(4, WireType.Bit64).double(message.rapturesPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Options\n */\nexport const HealingPriest_Options = new HealingPriest_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 spiritual_focus = 1;\n     */\n    spiritualFocus: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 2;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 healing_light = 3;\n     */\n    healingLight: number;\n    /**\n     * @generated from protobuf field: int32 divine_intellect = 4;\n     */\n    divineIntellect: number;\n    /**\n     * @generated from protobuf field: int32 unyielding_faith = 5;\n     */\n    unyieldingFaith: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 6;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 illumination = 7;\n     */\n    illumination: number;\n    /**\n     * @generated from protobuf field: int32 improved_lay_on_hands = 8;\n     */\n    improvedLayOnHands: number;\n    /**\n     * @generated from protobuf field: int32 improved_concentration_aura = 9;\n     */\n    improvedConcentrationAura: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_wisdom = 10;\n     */\n    improvedBlessingOfWisdom: number;\n    /**\n     * @generated from protobuf field: int32 blessed_hands = 11;\n     */\n    blessedHands: number;\n    /**\n     * @generated from protobuf field: int32 pure_of_heart = 12;\n     */\n    pureOfHeart: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 13;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_light = 14;\n     */\n    sanctifiedLight: number;\n    /**\n     * @generated from protobuf field: int32 purifying_power = 15;\n     */\n    purifyingPower: number;\n    /**\n     * @generated from protobuf field: int32 holy_power = 16;\n     */\n    holyPower: number;\n    /**\n     * @generated from protobuf field: int32 lights_grace = 17;\n     */\n    lightsGrace: number;\n    /**\n     * @generated from protobuf field: bool holy_shock = 18;\n     */\n    holyShock: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: int32 sacred_cleansing = 20;\n     */\n    sacredCleansing: number;\n    /**\n     * @generated from protobuf field: int32 holy_guidance = 21;\n     */\n    holyGuidance: number;\n    /**\n     * @generated from protobuf field: bool divine_illumination = 22;\n     */\n    divineIllumination: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 23;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 24;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 25;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 26;\n     */\n    beaconOfLight: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 27;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 divine_strength = 28;\n     */\n    divineStrength: number;\n    /**\n     * @generated from protobuf field: int32 stoicism = 29;\n     */\n    stoicism: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 30;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 31;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool divine_sacrifice = 32;\n     */\n    divineSacrifice: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_righteous_fury = 33;\n     */\n    improvedRighteousFury: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 34;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardian = 35;\n     */\n    divineGuardian: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 36;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 improved_devotion_aura = 37;\n     */\n    improvedDevotionAura: number;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 38;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: int32 reckoning = 39;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 40;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 41;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_attunement = 42;\n     */\n    spiritualAttunement: number;\n    /**\n     * @generated from protobuf field: bool holy_shield = 43;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 ardent_defender = 44;\n     */\n    ardentDefender: number;\n    /**\n     * @generated from protobuf field: int32 redoubt = 45;\n     */\n    redoubt: number;\n    /**\n     * @generated from protobuf field: int32 combat_expertise = 46;\n     */\n    combatExpertise: number;\n    /**\n     * @generated from protobuf field: int32 touched_by_the_light = 47;\n     */\n    touchedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool avengers_shield = 48;\n     */\n    avengersShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 49;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 50;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 51;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 52;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 deflection = 53;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 benediction = 54;\n     */\n    benediction: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgements = 55;\n     */\n    improvedJudgements: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_crusader = 56;\n     */\n    heartOfTheCrusader: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_might = 57;\n     */\n    improvedBlessingOfMight: number;\n    /**\n     * @generated from protobuf field: int32 vindication = 58;\n     */\n    vindication: number;\n    /**\n     * @generated from protobuf field: int32 conviction = 59;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool seal_of_command = 60;\n     */\n    sealOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 61;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 eye_for_an_eye = 62;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 sanctity_of_battle = 63;\n     */\n    sanctityOfBattle: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 64;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 65;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 66;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: int32 vengeance = 67;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 68;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 69;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: bool repentance = 70;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_wise = 71;\n     */\n    judgementsOfTheWise: number;\n    /**\n     * @generated from protobuf field: int32 fanaticism = 72;\n     */\n    fanaticism: number;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 73;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 swift_retribution = 74;\n     */\n    swiftRetribution: number;\n    /**\n     * @generated from protobuf field: bool crusader_strike = 75;\n     */\n    crusaderStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 sheath_of_light = 76;\n     */\n    sheathOfLight: number;\n    /**\n     * @generated from protobuf field: int32 righteous_vengeance = 77;\n     */\n    righteousVengeance: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 78;\n     */\n    divineStorm: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation rotation = 1;\n     */\n    rotation?: RetributionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: int32 exo_slack = 1;\n     */\n    exoSlack: number;\n    /**\n     * @generated from protobuf field: int32 cons_slack = 2;\n     */\n    consSlack: number;\n    /**\n     * @generated from protobuf field: double divine_plea_percentage = 3;\n     */\n    divinePleaPercentage: number;\n    /**\n     * @generated from protobuf field: int32 holy_wrath_threshold = 4;\n     */\n    holyWrathThreshold: number;\n    /**\n     * @generated from protobuf field: int32 sov_targets = 5;\n     */\n    sovTargets: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_cast_sequence = 10;\n     */\n    customCastSequence?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation.RotationType type = 9;\n     */\n    type: RetributionPaladin_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool use_divine_plea = 11;\n     */\n    useDivinePlea: boolean;\n    /**\n     * @generated from protobuf field: bool avoid_clipping_consecration = 12;\n     */\n    avoidClippingConsecration: boolean;\n    /**\n     * @generated from protobuf field: bool hold_last_avenging_wrath_until_execution = 13;\n     */\n    holdLastAvengingWrathUntilExecution: boolean;\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.SpellOption\n */\nexport enum RetributionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: DivineStorm = 2;\n     */\n    DivineStorm = 2,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 3;\n     */\n    HammerOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: Consecration = 4;\n     */\n    Consecration = 4,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 5;\n     */\n    HolyWrath = 5,\n    /**\n     * @generated from protobuf enum value: CrusaderStrike = 6;\n     */\n    CrusaderStrike = 6,\n    /**\n     * @generated from protobuf enum value: Exorcism = 7;\n     */\n    Exorcism = 7,\n    /**\n     * @generated from protobuf enum value: DivinePlea = 8;\n     */\n    DivinePlea = 8\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.RotationType\n */\nexport enum RetributionPaladin_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Standard = 1;\n     */\n    Standard = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2,\n    /**\n     * @generated from protobuf enum value: CastSequence = 3;\n     */\n    CastSequence = 3\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Rotation rotation = 1;\n     */\n    rotation?: ProtectionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: bool hammer_first = 1;\n     */\n    hammerFirst: boolean;\n    /**\n     * @generated from protobuf field: bool use_custom_prio = 2;\n     */\n    useCustomPrio: boolean;\n    /**\n     * @generated from protobuf field: bool squeeze_holy_wrath = 4;\n     */\n    squeezeHolyWrath: boolean;\n    /**\n     * @generated from protobuf field: double wait_slack = 5;\n     */\n    waitSlack: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.ProtectionPaladin.Rotation.SpellOption\n */\nexport enum ProtectionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 2;\n     */\n    HammerOfWrath = 2,\n    /**\n     * @generated from protobuf enum value: Consecration = 3;\n     */\n    Consecration = 3,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 4;\n     */\n    HolyWrath = 4,\n    /**\n     * @generated from protobuf enum value: Exorcism = 5;\n     */\n    Exorcism = 5,\n    /**\n     * @generated from protobuf enum value: ShieldOfRighteousness = 6;\n     */\n    ShieldOfRighteousness = 6,\n    /**\n     * @generated from protobuf enum value: AvengersShield = 7;\n     */\n    AvengersShield = 7,\n    /**\n     * @generated from protobuf enum value: HammerOfTheRighteous = 8;\n     */\n    HammerOfTheRighteous = 8,\n    /**\n     * @generated from protobuf enum value: HolyShield = 9;\n     */\n    HolyShield = 9\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin\n */\nexport interface HolyPaladin {\n    /**\n     * @generated from protobuf field: proto.HolyPaladin.Rotation rotation = 1;\n     */\n    rotation?: HolyPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.HolyPaladin.Options options = 3;\n     */\n    options?: HolyPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Rotation\n */\nexport interface HolyPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Options\n */\nexport interface HolyPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 2;\n     */\n    aura: PaladinAura;\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengerSShield = 41101;\n     */\n    GlyphOfAvengerSShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengingWrath = 41107;\n     */\n    GlyphOfAvengingWrath = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineStorm = 45743;\n     */\n    GlyphOfDivineStorm = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashOfLight = 41105;\n     */\n    GlyphOfFlashOfLight = 41105,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyLight = 41106;\n     */\n    GlyphOfHolyLight = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousDefense = 41100;\n     */\n    GlyphOfRighteousDefense = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfCommand = 41094;\n     */\n    GlyphOfSealOfCommand = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfLight = 41110;\n     */\n    GlyphOfSealOfLight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfRighteousness = 43868;\n     */\n    GlyphOfSealOfRighteousness = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfVengeance = 43869;\n     */\n    GlyphOfSealOfVengeance = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfWisdom = 41109;\n     */\n    GlyphOfSealOfWisdom = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfRighteousness = 45744;\n     */\n    GlyphOfShieldOfRighteousness = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritualAttunement = 41096;\n     */\n    GlyphOfSpiritualAttunement = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102,\n    /**\n     * @generated from protobuf enum value: GlyphOfReckoning = 204385;\n     */\n    GlyphOfReckoning = 204385\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfWisdom = 43366;\n     */\n    GlyphOfBlessingOfWisdom = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfSenseUndead = 43368;\n     */\n    GlyphOfSenseUndead = 43368,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWise = 43369;\n     */\n    GlyphOfTheWise = 43369\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2,\n    /**\n     * @generated from protobuf enum value: BlessingOfSalvation = 3;\n     */\n    BlessingOfSalvation = 3,\n    /**\n     * @generated from protobuf enum value: BlessingOfWisdom = 4;\n     */\n    BlessingOfWisdom = 4,\n    /**\n     * @generated from protobuf enum value: BlessingOfSanctuary = 5;\n     */\n    BlessingOfSanctuary = 5,\n    /**\n     * @generated from protobuf enum value: BlessingOfLight = 6;\n     */\n    BlessingOfLight = 6\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1,\n    /**\n     * @generated from protobuf enum value: NoJudgement = 2;\n     */\n    NoJudgement = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"spiritual_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"healing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"divine_intellect\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"unyielding_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"illumination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_lay_on_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_concentration_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_blessing_of_wisdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"blessed_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"pure_of_heart\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"sanctified_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"purifying_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"holy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"lights_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"holy_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"sacred_cleansing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"holy_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"divine_illumination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"stoicism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"divine_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_righteous_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"divine_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_devotion_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"spiritual_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"ardent_defender\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"redoubt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"combat_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"touched_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"avengers_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"benediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"improved_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_blessing_of_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vindication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"seal_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"sanctity_of_battle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"fanaticism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"swift_retribution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"crusader_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"sheath_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"righteous_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { spiritualFocus: 0, sealsOfThePure: 0, healingLight: 0, divineIntellect: 0, unyieldingFaith: 0, auraMastery: false, illumination: 0, improvedLayOnHands: 0, improvedConcentrationAura: 0, improvedBlessingOfWisdom: 0, blessedHands: 0, pureOfHeart: 0, divineFavor: false, sanctifiedLight: 0, purifyingPower: 0, holyPower: 0, lightsGrace: 0, holyShock: false, blessedLife: 0, sacredCleansing: 0, holyGuidance: 0, divineIllumination: false, judgementsOfThePure: 0, infusionOfLight: 0, enlightenedJudgements: 0, beaconOfLight: false, divinity: 0, divineStrength: 0, stoicism: 0, guardiansFavor: 0, anticipation: 0, divineSacrifice: false, improvedRighteousFury: 0, toughness: 0, divineGuardian: 0, improvedHammerOfJustice: 0, improvedDevotionAura: 0, blessingOfSanctuary: false, reckoning: 0, sacredDuty: 0, oneHandedWeaponSpecialization: 0, spiritualAttunement: 0, holyShield: false, ardentDefender: 0, redoubt: 0, combatExpertise: 0, touchedByTheLight: 0, avengersShield: false, guardedByTheLight: 0, shieldOfTheTemplar: 0, judgementsOfTheJust: 0, hammerOfTheRighteous: false, deflection: 0, benediction: 0, improvedJudgements: 0, heartOfTheCrusader: 0, improvedBlessingOfMight: 0, vindication: 0, conviction: 0, sealOfCommand: false, pursuitOfJustice: 0, eyeForAnEye: 0, sanctityOfBattle: 0, crusade: 0, twoHandedWeaponSpecialization: 0, sanctifiedRetribution: false, vengeance: 0, divinePurpose: 0, theArtOfWar: 0, repentance: false, judgementsOfTheWise: 0, fanaticism: 0, sanctifiedWrath: 0, swiftRetribution: 0, crusaderStrike: false, sheathOfLight: 0, righteousVengeance: 0, divineStorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spiritual_focus */ 1:\n                    message.spiritualFocus = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 2:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 healing_light */ 3:\n                    message.healingLight = reader.int32();\n                    break;\n                case /* int32 divine_intellect */ 4:\n                    message.divineIntellect = reader.int32();\n                    break;\n                case /* int32 unyielding_faith */ 5:\n                    message.unyieldingFaith = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 6:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 illumination */ 7:\n                    message.illumination = reader.int32();\n                    break;\n                case /* int32 improved_lay_on_hands */ 8:\n                    message.improvedLayOnHands = reader.int32();\n                    break;\n                case /* int32 improved_concentration_aura */ 9:\n                    message.improvedConcentrationAura = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_wisdom */ 10:\n                    message.improvedBlessingOfWisdom = reader.int32();\n                    break;\n                case /* int32 blessed_hands */ 11:\n                    message.blessedHands = reader.int32();\n                    break;\n                case /* int32 pure_of_heart */ 12:\n                    message.pureOfHeart = reader.int32();\n                    break;\n                case /* bool divine_favor */ 13:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 sanctified_light */ 14:\n                    message.sanctifiedLight = reader.int32();\n                    break;\n                case /* int32 purifying_power */ 15:\n                    message.purifyingPower = reader.int32();\n                    break;\n                case /* int32 holy_power */ 16:\n                    message.holyPower = reader.int32();\n                    break;\n                case /* int32 lights_grace */ 17:\n                    message.lightsGrace = reader.int32();\n                    break;\n                case /* bool holy_shock */ 18:\n                    message.holyShock = reader.bool();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* int32 sacred_cleansing */ 20:\n                    message.sacredCleansing = reader.int32();\n                    break;\n                case /* int32 holy_guidance */ 21:\n                    message.holyGuidance = reader.int32();\n                    break;\n                case /* bool divine_illumination */ 22:\n                    message.divineIllumination = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_pure */ 23:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 infusion_of_light */ 24:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 25:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 26:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 divinity */ 27:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 divine_strength */ 28:\n                    message.divineStrength = reader.int32();\n                    break;\n                case /* int32 stoicism */ 29:\n                    message.stoicism = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 30:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 anticipation */ 31:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool divine_sacrifice */ 32:\n                    message.divineSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_righteous_fury */ 33:\n                    message.improvedRighteousFury = reader.int32();\n                    break;\n                case /* int32 toughness */ 34:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 divine_guardian */ 35:\n                    message.divineGuardian = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 36:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 improved_devotion_aura */ 37:\n                    message.improvedDevotionAura = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 38:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* int32 reckoning */ 39:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* int32 sacred_duty */ 40:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 41:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 spiritual_attunement */ 42:\n                    message.spiritualAttunement = reader.int32();\n                    break;\n                case /* bool holy_shield */ 43:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 ardent_defender */ 44:\n                    message.ardentDefender = reader.int32();\n                    break;\n                case /* int32 redoubt */ 45:\n                    message.redoubt = reader.int32();\n                    break;\n                case /* int32 combat_expertise */ 46:\n                    message.combatExpertise = reader.int32();\n                    break;\n                case /* int32 touched_by_the_light */ 47:\n                    message.touchedByTheLight = reader.int32();\n                    break;\n                case /* bool avengers_shield */ 48:\n                    message.avengersShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 49:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 50:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 51:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 52:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 deflection */ 53:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 benediction */ 54:\n                    message.benediction = reader.int32();\n                    break;\n                case /* int32 improved_judgements */ 55:\n                    message.improvedJudgements = reader.int32();\n                    break;\n                case /* int32 heart_of_the_crusader */ 56:\n                    message.heartOfTheCrusader = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_might */ 57:\n                    message.improvedBlessingOfMight = reader.int32();\n                    break;\n                case /* int32 vindication */ 58:\n                    message.vindication = reader.int32();\n                    break;\n                case /* int32 conviction */ 59:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool seal_of_command */ 60:\n                    message.sealOfCommand = reader.bool();\n                    break;\n                case /* int32 pursuit_of_justice */ 61:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* int32 eye_for_an_eye */ 62:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 sanctity_of_battle */ 63:\n                    message.sanctityOfBattle = reader.int32();\n                    break;\n                case /* int32 crusade */ 64:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 65:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool sanctified_retribution */ 66:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* int32 vengeance */ 67:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 divine_purpose */ 68:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 the_art_of_war */ 69:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* bool repentance */ 70:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_wise */ 71:\n                    message.judgementsOfTheWise = reader.int32();\n                    break;\n                case /* int32 fanaticism */ 72:\n                    message.fanaticism = reader.int32();\n                    break;\n                case /* int32 sanctified_wrath */ 73:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 swift_retribution */ 74:\n                    message.swiftRetribution = reader.int32();\n                    break;\n                case /* bool crusader_strike */ 75:\n                    message.crusaderStrike = reader.bool();\n                    break;\n                case /* int32 sheath_of_light */ 76:\n                    message.sheathOfLight = reader.int32();\n                    break;\n                case /* int32 righteous_vengeance */ 77:\n                    message.righteousVengeance = reader.int32();\n                    break;\n                case /* bool divine_storm */ 78:\n                    message.divineStorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spiritual_focus = 1; */\n        if (message.spiritualFocus !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spiritualFocus);\n        /* int32 seals_of_the_pure = 2; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(2, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 healing_light = 3; */\n        if (message.healingLight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.healingLight);\n        /* int32 divine_intellect = 4; */\n        if (message.divineIntellect !== 0)\n            writer.tag(4, WireType.Varint).int32(message.divineIntellect);\n        /* int32 unyielding_faith = 5; */\n        if (message.unyieldingFaith !== 0)\n            writer.tag(5, WireType.Varint).int32(message.unyieldingFaith);\n        /* bool aura_mastery = 6; */\n        if (message.auraMastery !== false)\n            writer.tag(6, WireType.Varint).bool(message.auraMastery);\n        /* int32 illumination = 7; */\n        if (message.illumination !== 0)\n            writer.tag(7, WireType.Varint).int32(message.illumination);\n        /* int32 improved_lay_on_hands = 8; */\n        if (message.improvedLayOnHands !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedLayOnHands);\n        /* int32 improved_concentration_aura = 9; */\n        if (message.improvedConcentrationAura !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedConcentrationAura);\n        /* int32 improved_blessing_of_wisdom = 10; */\n        if (message.improvedBlessingOfWisdom !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedBlessingOfWisdom);\n        /* int32 blessed_hands = 11; */\n        if (message.blessedHands !== 0)\n            writer.tag(11, WireType.Varint).int32(message.blessedHands);\n        /* int32 pure_of_heart = 12; */\n        if (message.pureOfHeart !== 0)\n            writer.tag(12, WireType.Varint).int32(message.pureOfHeart);\n        /* bool divine_favor = 13; */\n        if (message.divineFavor !== false)\n            writer.tag(13, WireType.Varint).bool(message.divineFavor);\n        /* int32 sanctified_light = 14; */\n        if (message.sanctifiedLight !== 0)\n            writer.tag(14, WireType.Varint).int32(message.sanctifiedLight);\n        /* int32 purifying_power = 15; */\n        if (message.purifyingPower !== 0)\n            writer.tag(15, WireType.Varint).int32(message.purifyingPower);\n        /* int32 holy_power = 16; */\n        if (message.holyPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.holyPower);\n        /* int32 lights_grace = 17; */\n        if (message.lightsGrace !== 0)\n            writer.tag(17, WireType.Varint).int32(message.lightsGrace);\n        /* bool holy_shock = 18; */\n        if (message.holyShock !== false)\n            writer.tag(18, WireType.Varint).bool(message.holyShock);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* int32 sacred_cleansing = 20; */\n        if (message.sacredCleansing !== 0)\n            writer.tag(20, WireType.Varint).int32(message.sacredCleansing);\n        /* int32 holy_guidance = 21; */\n        if (message.holyGuidance !== 0)\n            writer.tag(21, WireType.Varint).int32(message.holyGuidance);\n        /* bool divine_illumination = 22; */\n        if (message.divineIllumination !== false)\n            writer.tag(22, WireType.Varint).bool(message.divineIllumination);\n        /* int32 judgements_of_the_pure = 23; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(23, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 infusion_of_light = 24; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 enlightened_judgements = 25; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(25, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 26; */\n        if (message.beaconOfLight !== false)\n            writer.tag(26, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 divinity = 27; */\n        if (message.divinity !== 0)\n            writer.tag(27, WireType.Varint).int32(message.divinity);\n        /* int32 divine_strength = 28; */\n        if (message.divineStrength !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineStrength);\n        /* int32 stoicism = 29; */\n        if (message.stoicism !== 0)\n            writer.tag(29, WireType.Varint).int32(message.stoicism);\n        /* int32 guardians_favor = 30; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(30, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 anticipation = 31; */\n        if (message.anticipation !== 0)\n            writer.tag(31, WireType.Varint).int32(message.anticipation);\n        /* bool divine_sacrifice = 32; */\n        if (message.divineSacrifice !== false)\n            writer.tag(32, WireType.Varint).bool(message.divineSacrifice);\n        /* int32 improved_righteous_fury = 33; */\n        if (message.improvedRighteousFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedRighteousFury);\n        /* int32 toughness = 34; */\n        if (message.toughness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.toughness);\n        /* int32 divine_guardian = 35; */\n        if (message.divineGuardian !== 0)\n            writer.tag(35, WireType.Varint).int32(message.divineGuardian);\n        /* int32 improved_hammer_of_justice = 36; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 improved_devotion_aura = 37; */\n        if (message.improvedDevotionAura !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedDevotionAura);\n        /* bool blessing_of_sanctuary = 38; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(38, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* int32 reckoning = 39; */\n        if (message.reckoning !== 0)\n            writer.tag(39, WireType.Varint).int32(message.reckoning);\n        /* int32 sacred_duty = 40; */\n        if (message.sacredDuty !== 0)\n            writer.tag(40, WireType.Varint).int32(message.sacredDuty);\n        /* int32 one_handed_weapon_specialization = 41; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 spiritual_attunement = 42; */\n        if (message.spiritualAttunement !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualAttunement);\n        /* bool holy_shield = 43; */\n        if (message.holyShield !== false)\n            writer.tag(43, WireType.Varint).bool(message.holyShield);\n        /* int32 ardent_defender = 44; */\n        if (message.ardentDefender !== 0)\n            writer.tag(44, WireType.Varint).int32(message.ardentDefender);\n        /* int32 redoubt = 45; */\n        if (message.redoubt !== 0)\n            writer.tag(45, WireType.Varint).int32(message.redoubt);\n        /* int32 combat_expertise = 46; */\n        if (message.combatExpertise !== 0)\n            writer.tag(46, WireType.Varint).int32(message.combatExpertise);\n        /* int32 touched_by_the_light = 47; */\n        if (message.touchedByTheLight !== 0)\n            writer.tag(47, WireType.Varint).int32(message.touchedByTheLight);\n        /* bool avengers_shield = 48; */\n        if (message.avengersShield !== false)\n            writer.tag(48, WireType.Varint).bool(message.avengersShield);\n        /* int32 guarded_by_the_light = 49; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(49, WireType.Varint).int32(message.guardedByTheLight);\n        /* int32 shield_of_the_templar = 50; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* int32 judgements_of_the_just = 51; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(51, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* bool hammer_of_the_righteous = 52; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(52, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 deflection = 53; */\n        if (message.deflection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.deflection);\n        /* int32 benediction = 54; */\n        if (message.benediction !== 0)\n            writer.tag(54, WireType.Varint).int32(message.benediction);\n        /* int32 improved_judgements = 55; */\n        if (message.improvedJudgements !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedJudgements);\n        /* int32 heart_of_the_crusader = 56; */\n        if (message.heartOfTheCrusader !== 0)\n            writer.tag(56, WireType.Varint).int32(message.heartOfTheCrusader);\n        /* int32 improved_blessing_of_might = 57; */\n        if (message.improvedBlessingOfMight !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedBlessingOfMight);\n        /* int32 vindication = 58; */\n        if (message.vindication !== 0)\n            writer.tag(58, WireType.Varint).int32(message.vindication);\n        /* int32 conviction = 59; */\n        if (message.conviction !== 0)\n            writer.tag(59, WireType.Varint).int32(message.conviction);\n        /* bool seal_of_command = 60; */\n        if (message.sealOfCommand !== false)\n            writer.tag(60, WireType.Varint).bool(message.sealOfCommand);\n        /* int32 pursuit_of_justice = 61; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(61, WireType.Varint).int32(message.pursuitOfJustice);\n        /* int32 eye_for_an_eye = 62; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(62, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 sanctity_of_battle = 63; */\n        if (message.sanctityOfBattle !== 0)\n            writer.tag(63, WireType.Varint).int32(message.sanctityOfBattle);\n        /* int32 crusade = 64; */\n        if (message.crusade !== 0)\n            writer.tag(64, WireType.Varint).int32(message.crusade);\n        /* int32 two_handed_weapon_specialization = 65; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(65, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool sanctified_retribution = 66; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(66, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* int32 vengeance = 67; */\n        if (message.vengeance !== 0)\n            writer.tag(67, WireType.Varint).int32(message.vengeance);\n        /* int32 divine_purpose = 68; */\n        if (message.divinePurpose !== 0)\n            writer.tag(68, WireType.Varint).int32(message.divinePurpose);\n        /* int32 the_art_of_war = 69; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(69, WireType.Varint).int32(message.theArtOfWar);\n        /* bool repentance = 70; */\n        if (message.repentance !== false)\n            writer.tag(70, WireType.Varint).bool(message.repentance);\n        /* int32 judgements_of_the_wise = 71; */\n        if (message.judgementsOfTheWise !== 0)\n            writer.tag(71, WireType.Varint).int32(message.judgementsOfTheWise);\n        /* int32 fanaticism = 72; */\n        if (message.fanaticism !== 0)\n            writer.tag(72, WireType.Varint).int32(message.fanaticism);\n        /* int32 sanctified_wrath = 73; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(73, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 swift_retribution = 74; */\n        if (message.swiftRetribution !== 0)\n            writer.tag(74, WireType.Varint).int32(message.swiftRetribution);\n        /* bool crusader_strike = 75; */\n        if (message.crusaderStrike !== false)\n            writer.tag(75, WireType.Varint).bool(message.crusaderStrike);\n        /* int32 sheath_of_light = 76; */\n        if (message.sheathOfLight !== 0)\n            writer.tag(76, WireType.Varint).int32(message.sheathOfLight);\n        /* int32 righteous_vengeance = 77; */\n        if (message.righteousVengeance !== 0)\n            writer.tag(77, WireType.Varint).int32(message.righteousVengeance);\n        /* bool divine_storm = 78; */\n        if (message.divineStorm !== false)\n            writer.tag(78, WireType.Varint).bool(message.divineStorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RetributionPaladin_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Rotation rotation */ 1:\n                    message.rotation = RetributionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            RetributionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", [\n            { no: 1, name: \"exo_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"cons_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"divine_plea_percentage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"holy_wrath_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"sov_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 10, name: \"custom_cast_sequence\", kind: \"message\", T: () => CustomRotation },\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RetributionPaladin.Rotation.RotationType\", RetributionPaladin_Rotation_RotationType] },\n            { no: 11, name: \"use_divine_plea\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"avoid_clipping_consecration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"hold_last_avenging_wrath_until_execution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = { exoSlack: 0, consSlack: 0, divinePleaPercentage: 0, holyWrathThreshold: 0, sovTargets: 0, type: 0, useDivinePlea: false, avoidClippingConsecration: false, holdLastAvengingWrathUntilExecution: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 exo_slack */ 1:\n                    message.exoSlack = reader.int32();\n                    break;\n                case /* int32 cons_slack */ 2:\n                    message.consSlack = reader.int32();\n                    break;\n                case /* double divine_plea_percentage */ 3:\n                    message.divinePleaPercentage = reader.double();\n                    break;\n                case /* int32 holy_wrath_threshold */ 4:\n                    message.holyWrathThreshold = reader.int32();\n                    break;\n                case /* int32 sov_targets */ 5:\n                    message.sovTargets = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* proto.CustomRotation custom_cast_sequence */ 10:\n                    message.customCastSequence = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customCastSequence);\n                    break;\n                case /* proto.RetributionPaladin.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_divine_plea */ 11:\n                    message.useDivinePlea = reader.bool();\n                    break;\n                case /* bool avoid_clipping_consecration */ 12:\n                    message.avoidClippingConsecration = reader.bool();\n                    break;\n                case /* bool hold_last_avenging_wrath_until_execution */ 13:\n                    message.holdLastAvengingWrathUntilExecution = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 exo_slack = 1; */\n        if (message.exoSlack !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exoSlack);\n        /* int32 cons_slack = 2; */\n        if (message.consSlack !== 0)\n            writer.tag(2, WireType.Varint).int32(message.consSlack);\n        /* double divine_plea_percentage = 3; */\n        if (message.divinePleaPercentage !== 0)\n            writer.tag(3, WireType.Bit64).double(message.divinePleaPercentage);\n        /* int32 holy_wrath_threshold = 4; */\n        if (message.holyWrathThreshold !== 0)\n            writer.tag(4, WireType.Varint).int32(message.holyWrathThreshold);\n        /* int32 sov_targets = 5; */\n        if (message.sovTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sovTargets);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CustomRotation custom_cast_sequence = 10; */\n        if (message.customCastSequence)\n            CustomRotation.internalBinaryWrite(message.customCastSequence, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* bool use_divine_plea = 11; */\n        if (message.useDivinePlea !== false)\n            writer.tag(11, WireType.Varint).bool(message.useDivinePlea);\n        /* bool avoid_clipping_consecration = 12; */\n        if (message.avoidClippingConsecration !== false)\n            writer.tag(12, WireType.Varint).bool(message.avoidClippingConsecration);\n        /* bool hold_last_avenging_wrath_until_execution = 13; */\n        if (message.holdLastAvengingWrathUntilExecution !== false)\n            writer.tag(13, WireType.Varint).bool(message.holdLastAvengingWrathUntilExecution);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionPaladin_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Rotation rotation */ 1:\n                    message.rotation = ProtectionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", [\n            { no: 1, name: \"hammer_first\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_custom_prio\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"squeeze_holy_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"wait_slack\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = { hammerFirst: false, useCustomPrio: false, squeezeHolyWrath: false, waitSlack: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hammer_first */ 1:\n                    message.hammerFirst = reader.bool();\n                    break;\n                case /* bool use_custom_prio */ 2:\n                    message.useCustomPrio = reader.bool();\n                    break;\n                case /* bool squeeze_holy_wrath */ 4:\n                    message.squeezeHolyWrath = reader.bool();\n                    break;\n                case /* double wait_slack */ 5:\n                    message.waitSlack = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hammer_first = 1; */\n        if (message.hammerFirst !== false)\n            writer.tag(1, WireType.Varint).bool(message.hammerFirst);\n        /* bool use_custom_prio = 2; */\n        if (message.useCustomPrio !== false)\n            writer.tag(2, WireType.Varint).bool(message.useCustomPrio);\n        /* bool squeeze_holy_wrath = 4; */\n        if (message.squeezeHolyWrath !== false)\n            writer.tag(4, WireType.Varint).bool(message.squeezeHolyWrath);\n        /* double wait_slack = 5; */\n        if (message.waitSlack !== 0)\n            writer.tag(5, WireType.Bit64).double(message.waitSlack);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin$Type extends MessageType<HolyPaladin> {\n    constructor() {\n        super(\"proto.HolyPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => HolyPaladin_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => HolyPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin>): HolyPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin): HolyPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HolyPaladin.Rotation rotation */ 1:\n                    message.rotation = HolyPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.HolyPaladin.Options options */ 3:\n                    message.options = HolyPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HolyPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            HolyPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPaladin.Options options = 3; */\n        if (message.options)\n            HolyPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin\n */\nexport const HolyPaladin = new HolyPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Rotation$Type extends MessageType<HolyPaladin_Rotation> {\n    constructor() {\n        super(\"proto.HolyPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<HolyPaladin_Rotation>): HolyPaladin_Rotation {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Rotation): HolyPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HolyPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Rotation\n */\nexport const HolyPaladin_Rotation = new HolyPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Options$Type extends MessageType<HolyPaladin_Options> {\n    constructor() {\n        super(\"proto.HolyPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin_Options>): HolyPaladin_Options {\n        const message = { judgement: 0, aura: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Options): HolyPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 2:\n                    message.aura = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinAura aura = 2; */\n        if (message.aura !== 0)\n            writer.tag(2, WireType.Varint).int32(message.aura);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Options\n */\nexport const HolyPaladin_Options = new HolyPaladin_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_subtlety = 1;\n     */\n    arcaneSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 arcane_focus = 2;\n     */\n    arcaneFocus: number;\n    /**\n     * @generated from protobuf field: int32 arcane_stability = 3;\n     */\n    arcaneStability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_fortitude = 4;\n     */\n    arcaneFortitude: number;\n    /**\n     * @generated from protobuf field: int32 magic_absorption = 5;\n     */\n    magicAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_concentration = 6;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 magic_attunement = 7;\n     */\n    magicAttunement: number;\n    /**\n     * @generated from protobuf field: int32 spell_impact = 8;\n     */\n    spellImpact: number;\n    /**\n     * @generated from protobuf field: int32 student_of_the_mind = 9;\n     */\n    studentOfTheMind: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 10;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_shielding = 11;\n     */\n    arcaneShielding: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 12;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 arcane_meditation = 13;\n     */\n    arcaneMeditation: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 14;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 15;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 16;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_mind = 17;\n     */\n    arcaneMind: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 18;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 arcane_instability = 19;\n     */\n    arcaneInstability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 20;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: int32 arcane_empowerment = 21;\n     */\n    arcaneEmpowerment: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 22;\n     */\n    arcanePower: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 23;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 24;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: int32 mind_mastery = 25;\n     */\n    mindMastery: number;\n    /**\n     * @generated from protobuf field: bool slow = 26;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 27;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 28;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 spell_power = 29;\n     */\n    spellPower: number;\n    /**\n     * @generated from protobuf field: bool arcane_barrage = 30;\n     */\n    arcaneBarrage: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 improved_fire_blast = 31;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 incineration = 32;\n     */\n    incineration: number;\n    /**\n     * @generated from protobuf field: int32 improved_fireball = 33;\n     */\n    improvedFireball: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 34;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 burning_determination = 35;\n     */\n    burningDetermination: number;\n    /**\n     * @generated from protobuf field: int32 world_in_flames = 36;\n     */\n    worldInFlames: number;\n    /**\n     * @generated from protobuf field: int32 flame_throwing = 37;\n     */\n    flameThrowing: number;\n    /**\n     * @generated from protobuf field: int32 impact = 38;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: bool pyroblast = 39;\n     */\n    pyroblast: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 40;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 41;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: int32 molten_shields = 42;\n     */\n    moltenShields: number;\n    /**\n     * @generated from protobuf field: int32 master_of_elements = 43;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 playing_with_fire = 44;\n     */\n    playingWithFire: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 45;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 46;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 47;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 48;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 49;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: bool combustion = 50;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 51;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 fiery_payback = 52;\n     */\n    fieryPayback: number;\n    /**\n     * @generated from protobuf field: int32 empowered_fire = 53;\n     */\n    empoweredFire: number;\n    /**\n     * @generated from protobuf field: int32 firestarter = 54;\n     */\n    firestarter: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 55;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 hot_streak = 56;\n     */\n    hotStreak: number;\n    /**\n     * @generated from protobuf field: int32 burnout = 57;\n     */\n    burnout: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 58;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 frostbite = 59;\n     */\n    frostbite: number;\n    /**\n     * @generated from protobuf field: int32 improved_frostbolt = 60;\n     */\n    improvedFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 61;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 62;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: int32 frost_warding = 63;\n     */\n    frostWarding: number;\n    /**\n     * @generated from protobuf field: int32 precision = 64;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 65;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 66;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 67;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blizzard = 68;\n     */\n    improvedBlizzard: number;\n    /**\n     * @generated from protobuf field: int32 arctic_reach = 69;\n     */\n    arcticReach: number;\n    /**\n     * @generated from protobuf field: int32 frost_channeling = 70;\n     */\n    frostChanneling: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 71;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 72;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 73;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 frozen_core = 74;\n     */\n    frozenCore: number;\n    /**\n     * @generated from protobuf field: int32 cold_as_ice = 75;\n     */\n    coldAsIce: number;\n    /**\n     * @generated from protobuf field: int32 winters_chill = 76;\n     */\n    wintersChill: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 77;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 78;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 arctic_winds = 79;\n     */\n    arcticWinds: number;\n    /**\n     * @generated from protobuf field: int32 empowered_frostbolt = 80;\n     */\n    empoweredFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 81;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 82;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: bool summon_water_elemental = 83;\n     */\n    summonWaterElemental: boolean;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 84;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: int32 chilled_to_the_bone = 85;\n     */\n    chilledToTheBone: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 86;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.Mage\n */\nexport interface Mage {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation rotation = 1;\n     */\n    rotation?: Mage_Rotation;\n    /**\n     * @generated from protobuf field: proto.Mage.Options options = 3;\n     */\n    options?: Mage_Options;\n}\n/**\n * @generated from protobuf message proto.Mage.Rotation\n */\nexport interface Mage_Rotation {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.Type type = 1;\n     */\n    type: Mage_Rotation_Type;\n    /**\n     * Arcane Options.\n     *\n     * @generated from protobuf field: int32 extra_blasts_during_first_ap = 10;\n     */\n    extraBlastsDuringFirstAp: number;\n    /**\n     * @generated from protobuf field: int32 missile_barrage_below_arcane_blast_stacks = 14;\n     */\n    missileBarrageBelowArcaneBlastStacks: number;\n    /**\n     * @generated from protobuf field: double missile_barrage_below_mana_percent = 15;\n     */\n    missileBarrageBelowManaPercent: number;\n    /**\n     * @generated from protobuf field: double blast_without_missile_barrage_above_mana_percent = 16;\n     */\n    blastWithoutMissileBarrageAboveManaPercent: number;\n    /**\n     * @generated from protobuf field: double only_3_arcane_blast_stacks_below_mana_percent = 17;\n     */\n    only3ArcaneBlastStacksBelowManaPercent: number;\n    /**\n     * @generated from protobuf field: bool use_arcane_barrage = 20;\n     */\n    useArcaneBarrage: boolean;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3;\n     */\n    primaryFireSpell: Mage_Rotation_PrimaryFireSpell;\n    /**\n     * @generated from protobuf field: bool maintain_improved_scorch = 4;\n     */\n    maintainImprovedScorch: boolean;\n    /**\n     * @generated from protobuf field: double pyroblast_delay_ms = 19;\n     */\n    pyroblastDelayMs: number;\n    /**\n     * Frost Options.\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: bool use_ice_lance = 18;\n     */\n    useIceLance: boolean;\n    /**\n     * @generated from protobuf field: double water_elemental_disobey_chance = 6;\n     */\n    waterElementalDisobeyChance: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.AoeRotation aoe = 7;\n     */\n    aoe: Mage_Rotation_AoeRotation;\n}\n/**\n * Just used for controlling which options are displayed in the UI. Is not\n * used by the sim.\n *\n * @generated from protobuf enum proto.Mage.Rotation.Type\n */\nexport enum Mage_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Arcane = 0;\n     */\n    Arcane = 0,\n    /**\n     * @generated from protobuf enum value: Fire = 1;\n     */\n    Fire = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3\n}\n/**\n * Fire Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.PrimaryFireSpell\n */\nexport enum Mage_Rotation_PrimaryFireSpell {\n    /**\n     * @generated from protobuf enum value: Fireball = 0;\n     */\n    Fireball = 0,\n    /**\n     * @generated from protobuf enum value: FrostfireBolt = 1;\n     */\n    FrostfireBolt = 1,\n    /**\n     * @generated from protobuf enum value: Scorch = 2;\n     */\n    Scorch = 2\n}\n/**\n * Aoe Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.AoeRotation\n */\nexport enum Mage_Rotation_AoeRotation {\n    /**\n     * @generated from protobuf enum value: ArcaneExplosion = 0;\n     */\n    ArcaneExplosion = 0,\n    /**\n     * @generated from protobuf enum value: Flamestrike = 1;\n     */\n    Flamestrike = 1,\n    /**\n     * @generated from protobuf enum value: Blizzard = 2;\n     */\n    Blizzard = 2\n}\n/**\n * @generated from protobuf message proto.Mage.Options\n */\nexport interface Mage_Options {\n    /**\n     * @generated from protobuf field: proto.Mage.Options.ArmorType armor = 1;\n     */\n    armor: Mage_Options_ArmorType;\n    /**\n     * @generated from protobuf field: bool ignite_munching = 6;\n     */\n    igniteMunching: boolean;\n    /**\n     * Number of Evocation ticks to use. If 0, use all of them.\n     *\n     * @generated from protobuf field: int32 evocation_ticks = 2;\n     */\n    evocationTicks: number;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 3;\n     */\n    focusMagicPercentUptime: number;\n    /**\n     * @generated from protobuf field: proto.RaidTarget focus_magic_target = 4;\n     */\n    focusMagicTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: int32 reaction_time_ms = 5;\n     */\n    reactionTimeMs: number;\n}\n/**\n * @generated from protobuf enum proto.Mage.Options.ArmorType\n */\nexport enum Mage_Options_ArmorType {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: MageArmor = 1;\n     */\n    MageArmor = 1,\n    /**\n     * @generated from protobuf enum value: MoltenArmor = 2;\n     */\n    MoltenArmor = 2\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneExplosion = 42734;\n     */\n    GlyphOfArcaneExplosion = 42734,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfEternalWater = 50045;\n     */\n    GlyphOfEternalWater = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireBlast = 42740;\n     */\n    GlyphOfFireBlast = 42740,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceArmor = 42743;\n     */\n    GlyphOfIceArmor = 42743,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 45737;\n     */\n    GlyphOfLivingBomb = 45737,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaGem = 42750;\n     */\n    GlyphOfManaGem = 42750,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfRemoveCurse = 42753;\n     */\n    GlyphOfRemoveCurse = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfScorch = 42747;\n     */\n    GlyphOfScorch = 42747,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterElemental = 42754;\n     */\n    GlyphOfWaterElemental = 42754\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneIntellect = 43339;\n     */\n    GlyphOfArcaneIntellect = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireWard = 43357;\n     */\n    GlyphOfFireWard = 43357,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 43359;\n     */\n    GlyphOfFrostArmor = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostWard = 43360;\n     */\n    GlyphOfFrostWard = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"arcane_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"arcane_stability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"arcane_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"magic_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"magic_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spell_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"student_of_the_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"arcane_shielding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"arcane_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"arcane_instability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"arcane_empowerment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"mind_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"spell_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"incineration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_fireball\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"burning_determination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"world_in_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"flame_throwing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"pyroblast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"molten_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"playing_with_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"fiery_payback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"empowered_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"firestarter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"burnout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"frostbite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"frost_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"improved_blizzard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"arctic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"frost_channeling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"frozen_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"cold_as_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"winters_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"arctic_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"empowered_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"summon_water_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"chilled_to_the_bone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneSubtlety: 0, arcaneFocus: 0, arcaneStability: 0, arcaneFortitude: 0, magicAbsorption: 0, arcaneConcentration: 0, magicAttunement: 0, spellImpact: 0, studentOfTheMind: 0, focusMagic: false, arcaneShielding: 0, improvedCounterspell: 0, arcaneMeditation: 0, tormentTheWeak: 0, improvedBlink: 0, presenceOfMind: false, arcaneMind: 0, prismaticCloak: 0, arcaneInstability: 0, arcanePotency: 0, arcaneEmpowerment: 0, arcanePower: false, incantersAbsorption: 0, arcaneFlows: 0, mindMastery: 0, slow: false, missileBarrage: 0, netherwindPresence: 0, spellPower: 0, arcaneBarrage: false, improvedFireBlast: 0, incineration: 0, improvedFireball: 0, ignite: 0, burningDetermination: 0, worldInFlames: 0, flameThrowing: 0, impact: 0, pyroblast: false, burningSoul: 0, improvedScorch: 0, moltenShields: 0, masterOfElements: 0, playingWithFire: 0, criticalMass: 0, blastWave: false, blazingSpeed: 0, firePower: 0, pyromaniac: 0, combustion: false, moltenFury: 0, fieryPayback: 0, empoweredFire: 0, firestarter: 0, dragonsBreath: false, hotStreak: 0, burnout: 0, livingBomb: false, frostbite: 0, improvedFrostbolt: 0, iceFloes: 0, iceShards: 0, frostWarding: 0, precision: 0, permafrost: 0, piercingIce: 0, icyVeins: false, improvedBlizzard: 0, arcticReach: 0, frostChanneling: 0, shatter: 0, coldSnap: false, improvedConeOfCold: 0, frozenCore: 0, coldAsIce: 0, wintersChill: 0, shatteredBarrier: 0, iceBarrier: false, arcticWinds: 0, empoweredFrostbolt: 0, fingersOfFrost: 0, brainFreeze: 0, summonWaterElemental: false, enduringWinter: 0, chilledToTheBone: 0, deepFreeze: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_subtlety */ 1:\n                    message.arcaneSubtlety = reader.int32();\n                    break;\n                case /* int32 arcane_focus */ 2:\n                    message.arcaneFocus = reader.int32();\n                    break;\n                case /* int32 arcane_stability */ 3:\n                    message.arcaneStability = reader.int32();\n                    break;\n                case /* int32 arcane_fortitude */ 4:\n                    message.arcaneFortitude = reader.int32();\n                    break;\n                case /* int32 magic_absorption */ 5:\n                    message.magicAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_concentration */ 6:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 magic_attunement */ 7:\n                    message.magicAttunement = reader.int32();\n                    break;\n                case /* int32 spell_impact */ 8:\n                    message.spellImpact = reader.int32();\n                    break;\n                case /* int32 student_of_the_mind */ 9:\n                    message.studentOfTheMind = reader.int32();\n                    break;\n                case /* bool focus_magic */ 10:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 arcane_shielding */ 11:\n                    message.arcaneShielding = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 12:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 arcane_meditation */ 13:\n                    message.arcaneMeditation = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 14:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 15:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 16:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 arcane_mind */ 17:\n                    message.arcaneMind = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 18:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 arcane_instability */ 19:\n                    message.arcaneInstability = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 20:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* int32 arcane_empowerment */ 21:\n                    message.arcaneEmpowerment = reader.int32();\n                    break;\n                case /* bool arcane_power */ 22:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 23:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 24:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* int32 mind_mastery */ 25:\n                    message.mindMastery = reader.int32();\n                    break;\n                case /* bool slow */ 26:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 27:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 28:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 spell_power */ 29:\n                    message.spellPower = reader.int32();\n                    break;\n                case /* bool arcane_barrage */ 30:\n                    message.arcaneBarrage = reader.bool();\n                    break;\n                case /* int32 improved_fire_blast */ 31:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 incineration */ 32:\n                    message.incineration = reader.int32();\n                    break;\n                case /* int32 improved_fireball */ 33:\n                    message.improvedFireball = reader.int32();\n                    break;\n                case /* int32 ignite */ 34:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 burning_determination */ 35:\n                    message.burningDetermination = reader.int32();\n                    break;\n                case /* int32 world_in_flames */ 36:\n                    message.worldInFlames = reader.int32();\n                    break;\n                case /* int32 flame_throwing */ 37:\n                    message.flameThrowing = reader.int32();\n                    break;\n                case /* int32 impact */ 38:\n                    message.impact = reader.int32();\n                    break;\n                case /* bool pyroblast */ 39:\n                    message.pyroblast = reader.bool();\n                    break;\n                case /* int32 burning_soul */ 40:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_scorch */ 41:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* int32 molten_shields */ 42:\n                    message.moltenShields = reader.int32();\n                    break;\n                case /* int32 master_of_elements */ 43:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 playing_with_fire */ 44:\n                    message.playingWithFire = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 45:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool blast_wave */ 46:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* int32 blazing_speed */ 47:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 fire_power */ 48:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 49:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* bool combustion */ 50:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 51:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 fiery_payback */ 52:\n                    message.fieryPayback = reader.int32();\n                    break;\n                case /* int32 empowered_fire */ 53:\n                    message.empoweredFire = reader.int32();\n                    break;\n                case /* int32 firestarter */ 54:\n                    message.firestarter = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 55:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 hot_streak */ 56:\n                    message.hotStreak = reader.int32();\n                    break;\n                case /* int32 burnout */ 57:\n                    message.burnout = reader.int32();\n                    break;\n                case /* bool living_bomb */ 58:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 frostbite */ 59:\n                    message.frostbite = reader.int32();\n                    break;\n                case /* int32 improved_frostbolt */ 60:\n                    message.improvedFrostbolt = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 61:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 62:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* int32 frost_warding */ 63:\n                    message.frostWarding = reader.int32();\n                    break;\n                case /* int32 precision */ 64:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 permafrost */ 65:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 66:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* bool icy_veins */ 67:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 improved_blizzard */ 68:\n                    message.improvedBlizzard = reader.int32();\n                    break;\n                case /* int32 arctic_reach */ 69:\n                    message.arcticReach = reader.int32();\n                    break;\n                case /* int32 frost_channeling */ 70:\n                    message.frostChanneling = reader.int32();\n                    break;\n                case /* int32 shatter */ 71:\n                    message.shatter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 72:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 improved_cone_of_cold */ 73:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 frozen_core */ 74:\n                    message.frozenCore = reader.int32();\n                    break;\n                case /* int32 cold_as_ice */ 75:\n                    message.coldAsIce = reader.int32();\n                    break;\n                case /* int32 winters_chill */ 76:\n                    message.wintersChill = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 77:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 78:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 arctic_winds */ 79:\n                    message.arcticWinds = reader.int32();\n                    break;\n                case /* int32 empowered_frostbolt */ 80:\n                    message.empoweredFrostbolt = reader.int32();\n                    break;\n                case /* int32 fingers_of_frost */ 81:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 brain_freeze */ 82:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* bool summon_water_elemental */ 83:\n                    message.summonWaterElemental = reader.bool();\n                    break;\n                case /* int32 enduring_winter */ 84:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* int32 chilled_to_the_bone */ 85:\n                    message.chilledToTheBone = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 86:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_subtlety = 1; */\n        if (message.arcaneSubtlety !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneSubtlety);\n        /* int32 arcane_focus = 2; */\n        if (message.arcaneFocus !== 0)\n            writer.tag(2, WireType.Varint).int32(message.arcaneFocus);\n        /* int32 arcane_stability = 3; */\n        if (message.arcaneStability !== 0)\n            writer.tag(3, WireType.Varint).int32(message.arcaneStability);\n        /* int32 arcane_fortitude = 4; */\n        if (message.arcaneFortitude !== 0)\n            writer.tag(4, WireType.Varint).int32(message.arcaneFortitude);\n        /* int32 magic_absorption = 5; */\n        if (message.magicAbsorption !== 0)\n            writer.tag(5, WireType.Varint).int32(message.magicAbsorption);\n        /* int32 arcane_concentration = 6; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(6, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 magic_attunement = 7; */\n        if (message.magicAttunement !== 0)\n            writer.tag(7, WireType.Varint).int32(message.magicAttunement);\n        /* int32 spell_impact = 8; */\n        if (message.spellImpact !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spellImpact);\n        /* int32 student_of_the_mind = 9; */\n        if (message.studentOfTheMind !== 0)\n            writer.tag(9, WireType.Varint).int32(message.studentOfTheMind);\n        /* bool focus_magic = 10; */\n        if (message.focusMagic !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusMagic);\n        /* int32 arcane_shielding = 11; */\n        if (message.arcaneShielding !== 0)\n            writer.tag(11, WireType.Varint).int32(message.arcaneShielding);\n        /* int32 improved_counterspell = 12; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 arcane_meditation = 13; */\n        if (message.arcaneMeditation !== 0)\n            writer.tag(13, WireType.Varint).int32(message.arcaneMeditation);\n        /* int32 torment_the_weak = 14; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 improved_blink = 15; */\n        if (message.improvedBlink !== 0)\n            writer.tag(15, WireType.Varint).int32(message.improvedBlink);\n        /* bool presence_of_mind = 16; */\n        if (message.presenceOfMind !== false)\n            writer.tag(16, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 arcane_mind = 17; */\n        if (message.arcaneMind !== 0)\n            writer.tag(17, WireType.Varint).int32(message.arcaneMind);\n        /* int32 prismatic_cloak = 18; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(18, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 arcane_instability = 19; */\n        if (message.arcaneInstability !== 0)\n            writer.tag(19, WireType.Varint).int32(message.arcaneInstability);\n        /* int32 arcane_potency = 20; */\n        if (message.arcanePotency !== 0)\n            writer.tag(20, WireType.Varint).int32(message.arcanePotency);\n        /* int32 arcane_empowerment = 21; */\n        if (message.arcaneEmpowerment !== 0)\n            writer.tag(21, WireType.Varint).int32(message.arcaneEmpowerment);\n        /* bool arcane_power = 22; */\n        if (message.arcanePower !== false)\n            writer.tag(22, WireType.Varint).bool(message.arcanePower);\n        /* int32 incanters_absorption = 23; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(23, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 arcane_flows = 24; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(24, WireType.Varint).int32(message.arcaneFlows);\n        /* int32 mind_mastery = 25; */\n        if (message.mindMastery !== 0)\n            writer.tag(25, WireType.Varint).int32(message.mindMastery);\n        /* bool slow = 26; */\n        if (message.slow !== false)\n            writer.tag(26, WireType.Varint).bool(message.slow);\n        /* int32 missile_barrage = 27; */\n        if (message.missileBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.missileBarrage);\n        /* int32 netherwind_presence = 28; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(28, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 spell_power = 29; */\n        if (message.spellPower !== 0)\n            writer.tag(29, WireType.Varint).int32(message.spellPower);\n        /* bool arcane_barrage = 30; */\n        if (message.arcaneBarrage !== false)\n            writer.tag(30, WireType.Varint).bool(message.arcaneBarrage);\n        /* int32 improved_fire_blast = 31; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 incineration = 32; */\n        if (message.incineration !== 0)\n            writer.tag(32, WireType.Varint).int32(message.incineration);\n        /* int32 improved_fireball = 33; */\n        if (message.improvedFireball !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedFireball);\n        /* int32 ignite = 34; */\n        if (message.ignite !== 0)\n            writer.tag(34, WireType.Varint).int32(message.ignite);\n        /* int32 burning_determination = 35; */\n        if (message.burningDetermination !== 0)\n            writer.tag(35, WireType.Varint).int32(message.burningDetermination);\n        /* int32 world_in_flames = 36; */\n        if (message.worldInFlames !== 0)\n            writer.tag(36, WireType.Varint).int32(message.worldInFlames);\n        /* int32 flame_throwing = 37; */\n        if (message.flameThrowing !== 0)\n            writer.tag(37, WireType.Varint).int32(message.flameThrowing);\n        /* int32 impact = 38; */\n        if (message.impact !== 0)\n            writer.tag(38, WireType.Varint).int32(message.impact);\n        /* bool pyroblast = 39; */\n        if (message.pyroblast !== false)\n            writer.tag(39, WireType.Varint).bool(message.pyroblast);\n        /* int32 burning_soul = 40; */\n        if (message.burningSoul !== 0)\n            writer.tag(40, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_scorch = 41; */\n        if (message.improvedScorch !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedScorch);\n        /* int32 molten_shields = 42; */\n        if (message.moltenShields !== 0)\n            writer.tag(42, WireType.Varint).int32(message.moltenShields);\n        /* int32 master_of_elements = 43; */\n        if (message.masterOfElements !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterOfElements);\n        /* int32 playing_with_fire = 44; */\n        if (message.playingWithFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.playingWithFire);\n        /* int32 critical_mass = 45; */\n        if (message.criticalMass !== 0)\n            writer.tag(45, WireType.Varint).int32(message.criticalMass);\n        /* bool blast_wave = 46; */\n        if (message.blastWave !== false)\n            writer.tag(46, WireType.Varint).bool(message.blastWave);\n        /* int32 blazing_speed = 47; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 fire_power = 48; */\n        if (message.firePower !== 0)\n            writer.tag(48, WireType.Varint).int32(message.firePower);\n        /* int32 pyromaniac = 49; */\n        if (message.pyromaniac !== 0)\n            writer.tag(49, WireType.Varint).int32(message.pyromaniac);\n        /* bool combustion = 50; */\n        if (message.combustion !== false)\n            writer.tag(50, WireType.Varint).bool(message.combustion);\n        /* int32 molten_fury = 51; */\n        if (message.moltenFury !== 0)\n            writer.tag(51, WireType.Varint).int32(message.moltenFury);\n        /* int32 fiery_payback = 52; */\n        if (message.fieryPayback !== 0)\n            writer.tag(52, WireType.Varint).int32(message.fieryPayback);\n        /* int32 empowered_fire = 53; */\n        if (message.empoweredFire !== 0)\n            writer.tag(53, WireType.Varint).int32(message.empoweredFire);\n        /* int32 firestarter = 54; */\n        if (message.firestarter !== 0)\n            writer.tag(54, WireType.Varint).int32(message.firestarter);\n        /* bool dragons_breath = 55; */\n        if (message.dragonsBreath !== false)\n            writer.tag(55, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 hot_streak = 56; */\n        if (message.hotStreak !== 0)\n            writer.tag(56, WireType.Varint).int32(message.hotStreak);\n        /* int32 burnout = 57; */\n        if (message.burnout !== 0)\n            writer.tag(57, WireType.Varint).int32(message.burnout);\n        /* bool living_bomb = 58; */\n        if (message.livingBomb !== false)\n            writer.tag(58, WireType.Varint).bool(message.livingBomb);\n        /* int32 frostbite = 59; */\n        if (message.frostbite !== 0)\n            writer.tag(59, WireType.Varint).int32(message.frostbite);\n        /* int32 improved_frostbolt = 60; */\n        if (message.improvedFrostbolt !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedFrostbolt);\n        /* int32 ice_floes = 61; */\n        if (message.iceFloes !== 0)\n            writer.tag(61, WireType.Varint).int32(message.iceFloes);\n        /* int32 ice_shards = 62; */\n        if (message.iceShards !== 0)\n            writer.tag(62, WireType.Varint).int32(message.iceShards);\n        /* int32 frost_warding = 63; */\n        if (message.frostWarding !== 0)\n            writer.tag(63, WireType.Varint).int32(message.frostWarding);\n        /* int32 precision = 64; */\n        if (message.precision !== 0)\n            writer.tag(64, WireType.Varint).int32(message.precision);\n        /* int32 permafrost = 65; */\n        if (message.permafrost !== 0)\n            writer.tag(65, WireType.Varint).int32(message.permafrost);\n        /* int32 piercing_ice = 66; */\n        if (message.piercingIce !== 0)\n            writer.tag(66, WireType.Varint).int32(message.piercingIce);\n        /* bool icy_veins = 67; */\n        if (message.icyVeins !== false)\n            writer.tag(67, WireType.Varint).bool(message.icyVeins);\n        /* int32 improved_blizzard = 68; */\n        if (message.improvedBlizzard !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedBlizzard);\n        /* int32 arctic_reach = 69; */\n        if (message.arcticReach !== 0)\n            writer.tag(69, WireType.Varint).int32(message.arcticReach);\n        /* int32 frost_channeling = 70; */\n        if (message.frostChanneling !== 0)\n            writer.tag(70, WireType.Varint).int32(message.frostChanneling);\n        /* int32 shatter = 71; */\n        if (message.shatter !== 0)\n            writer.tag(71, WireType.Varint).int32(message.shatter);\n        /* bool cold_snap = 72; */\n        if (message.coldSnap !== false)\n            writer.tag(72, WireType.Varint).bool(message.coldSnap);\n        /* int32 improved_cone_of_cold = 73; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 frozen_core = 74; */\n        if (message.frozenCore !== 0)\n            writer.tag(74, WireType.Varint).int32(message.frozenCore);\n        /* int32 cold_as_ice = 75; */\n        if (message.coldAsIce !== 0)\n            writer.tag(75, WireType.Varint).int32(message.coldAsIce);\n        /* int32 winters_chill = 76; */\n        if (message.wintersChill !== 0)\n            writer.tag(76, WireType.Varint).int32(message.wintersChill);\n        /* int32 shattered_barrier = 77; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(77, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 78; */\n        if (message.iceBarrier !== false)\n            writer.tag(78, WireType.Varint).bool(message.iceBarrier);\n        /* int32 arctic_winds = 79; */\n        if (message.arcticWinds !== 0)\n            writer.tag(79, WireType.Varint).int32(message.arcticWinds);\n        /* int32 empowered_frostbolt = 80; */\n        if (message.empoweredFrostbolt !== 0)\n            writer.tag(80, WireType.Varint).int32(message.empoweredFrostbolt);\n        /* int32 fingers_of_frost = 81; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(81, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 brain_freeze = 82; */\n        if (message.brainFreeze !== 0)\n            writer.tag(82, WireType.Varint).int32(message.brainFreeze);\n        /* bool summon_water_elemental = 83; */\n        if (message.summonWaterElemental !== false)\n            writer.tag(83, WireType.Varint).bool(message.summonWaterElemental);\n        /* int32 enduring_winter = 84; */\n        if (message.enduringWinter !== 0)\n            writer.tag(84, WireType.Varint).int32(message.enduringWinter);\n        /* int32 chilled_to_the_bone = 85; */\n        if (message.chilledToTheBone !== 0)\n            writer.tag(85, WireType.Varint).int32(message.chilledToTheBone);\n        /* bool deep_freeze = 86; */\n        if (message.deepFreeze !== false)\n            writer.tag(86, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage$Type extends MessageType<Mage> {\n    constructor() {\n        super(\"proto.Mage\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Mage_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Mage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Mage>): Mage {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage): Mage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation rotation */ 1:\n                    message.rotation = Mage_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Mage.Options options */ 3:\n                    message.options = Mage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation rotation = 1; */\n        if (message.rotation)\n            Mage_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage.Options options = 3; */\n        if (message.options)\n            Mage_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage\n */\nexport const Mage = new Mage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Rotation$Type extends MessageType<Mage_Rotation> {\n    constructor() {\n        super(\"proto.Mage.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.Type\", Mage_Rotation_Type] },\n            { no: 10, name: \"extra_blasts_during_first_ap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"missile_barrage_below_arcane_blast_stacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"missile_barrage_below_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 16, name: \"blast_without_missile_barrage_above_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 17, name: \"only_3_arcane_blast_stacks_below_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 20, name: \"use_arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"primary_fire_spell\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.PrimaryFireSpell\", Mage_Rotation_PrimaryFireSpell] },\n            { no: 4, name: \"maintain_improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"pyroblast_delay_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 18, name: \"use_ice_lance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"aoe\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.AoeRotation\", Mage_Rotation_AoeRotation] }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Rotation>): Mage_Rotation {\n        const message = { type: 0, extraBlastsDuringFirstAp: 0, missileBarrageBelowArcaneBlastStacks: 0, missileBarrageBelowManaPercent: 0, blastWithoutMissileBarrageAboveManaPercent: 0, only3ArcaneBlastStacksBelowManaPercent: 0, useArcaneBarrage: false, primaryFireSpell: 0, maintainImprovedScorch: false, pyroblastDelayMs: 0, useIceLance: false, waterElementalDisobeyChance: 0, aoe: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Rotation): Mage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 extra_blasts_during_first_ap */ 10:\n                    message.extraBlastsDuringFirstAp = reader.int32();\n                    break;\n                case /* int32 missile_barrage_below_arcane_blast_stacks */ 14:\n                    message.missileBarrageBelowArcaneBlastStacks = reader.int32();\n                    break;\n                case /* double missile_barrage_below_mana_percent */ 15:\n                    message.missileBarrageBelowManaPercent = reader.double();\n                    break;\n                case /* double blast_without_missile_barrage_above_mana_percent */ 16:\n                    message.blastWithoutMissileBarrageAboveManaPercent = reader.double();\n                    break;\n                case /* double only_3_arcane_blast_stacks_below_mana_percent */ 17:\n                    message.only3ArcaneBlastStacksBelowManaPercent = reader.double();\n                    break;\n                case /* bool use_arcane_barrage */ 20:\n                    message.useArcaneBarrage = reader.bool();\n                    break;\n                case /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell */ 3:\n                    message.primaryFireSpell = reader.int32();\n                    break;\n                case /* bool maintain_improved_scorch */ 4:\n                    message.maintainImprovedScorch = reader.bool();\n                    break;\n                case /* double pyroblast_delay_ms */ 19:\n                    message.pyroblastDelayMs = reader.double();\n                    break;\n                case /* bool use_ice_lance */ 18:\n                    message.useIceLance = reader.bool();\n                    break;\n                case /* double water_elemental_disobey_chance */ 6:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                case /* proto.Mage.Rotation.AoeRotation aoe */ 7:\n                    message.aoe = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* int32 extra_blasts_during_first_ap = 10; */\n        if (message.extraBlastsDuringFirstAp !== 0)\n            writer.tag(10, WireType.Varint).int32(message.extraBlastsDuringFirstAp);\n        /* int32 missile_barrage_below_arcane_blast_stacks = 14; */\n        if (message.missileBarrageBelowArcaneBlastStacks !== 0)\n            writer.tag(14, WireType.Varint).int32(message.missileBarrageBelowArcaneBlastStacks);\n        /* double missile_barrage_below_mana_percent = 15; */\n        if (message.missileBarrageBelowManaPercent !== 0)\n            writer.tag(15, WireType.Bit64).double(message.missileBarrageBelowManaPercent);\n        /* double blast_without_missile_barrage_above_mana_percent = 16; */\n        if (message.blastWithoutMissileBarrageAboveManaPercent !== 0)\n            writer.tag(16, WireType.Bit64).double(message.blastWithoutMissileBarrageAboveManaPercent);\n        /* double only_3_arcane_blast_stacks_below_mana_percent = 17; */\n        if (message.only3ArcaneBlastStacksBelowManaPercent !== 0)\n            writer.tag(17, WireType.Bit64).double(message.only3ArcaneBlastStacksBelowManaPercent);\n        /* bool use_arcane_barrage = 20; */\n        if (message.useArcaneBarrage !== false)\n            writer.tag(20, WireType.Varint).bool(message.useArcaneBarrage);\n        /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3; */\n        if (message.primaryFireSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primaryFireSpell);\n        /* bool maintain_improved_scorch = 4; */\n        if (message.maintainImprovedScorch !== false)\n            writer.tag(4, WireType.Varint).bool(message.maintainImprovedScorch);\n        /* double pyroblast_delay_ms = 19; */\n        if (message.pyroblastDelayMs !== 0)\n            writer.tag(19, WireType.Bit64).double(message.pyroblastDelayMs);\n        /* bool use_ice_lance = 18; */\n        if (message.useIceLance !== false)\n            writer.tag(18, WireType.Varint).bool(message.useIceLance);\n        /* double water_elemental_disobey_chance = 6; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(6, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        /* proto.Mage.Rotation.AoeRotation aoe = 7; */\n        if (message.aoe !== 0)\n            writer.tag(7, WireType.Varint).int32(message.aoe);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Rotation\n */\nexport const Mage_Rotation = new Mage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Options$Type extends MessageType<Mage_Options> {\n    constructor() {\n        super(\"proto.Mage.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Mage.Options.ArmorType\", Mage_Options_ArmorType] },\n            { no: 6, name: \"ignite_munching\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"evocation_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"focus_magic_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 5, name: \"reaction_time_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Options>): Mage_Options {\n        const message = { armor: 0, igniteMunching: false, evocationTicks: 0, focusMagicPercentUptime: 0, reactionTimeMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Options): Mage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Options.ArmorType armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool ignite_munching */ 6:\n                    message.igniteMunching = reader.bool();\n                    break;\n                case /* int32 evocation_ticks */ 2:\n                    message.evocationTicks = reader.int32();\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 3:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                case /* proto.RaidTarget focus_magic_target */ 4:\n                    message.focusMagicTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.focusMagicTarget);\n                    break;\n                case /* int32 reaction_time_ms */ 5:\n                    message.reactionTimeMs = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Options.ArmorType armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* bool ignite_munching = 6; */\n        if (message.igniteMunching !== false)\n            writer.tag(6, WireType.Varint).bool(message.igniteMunching);\n        /* int32 evocation_ticks = 2; */\n        if (message.evocationTicks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.evocationTicks);\n        /* int32 focus_magic_percent_uptime = 3; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusMagicPercentUptime);\n        /* proto.RaidTarget focus_magic_target = 4; */\n        if (message.focusMagicTarget)\n            RaidTarget.internalBinaryWrite(message.focusMagicTarget, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* int32 reaction_time_ms = 5; */\n        if (message.reactionTimeMs !== 0)\n            writer.tag(5, WireType.Varint).int32(message.reactionTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Options\n */\nexport const Mage_Options = new Mage_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_aspect_of_the_hawk = 1;\n     */\n    improvedAspectOfTheHawk: number;\n    /**\n     * @generated from protobuf field: int32 endurance_training = 2;\n     */\n    enduranceTraining: number;\n    /**\n     * @generated from protobuf field: int32 focused_fire = 3;\n     */\n    focusedFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_aspect_of_the_monkey = 4;\n     */\n    improvedAspectOfTheMonkey: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 5;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 improved_revive_pet = 6;\n     */\n    improvedRevivePet: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 7;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: bool aspect_mastery = 8;\n     */\n    aspectMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_fury = 9;\n     */\n    unleashedFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 10;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 ferocity = 11;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 12;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: bool intimidation = 13;\n     */\n    intimidation: boolean;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 14;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 animal_handler = 15;\n     */\n    animalHandler: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 16;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 ferocious_inspiration = 17;\n     */\n    ferociousInspiration: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 18;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 catlike_reflexes = 19;\n     */\n    catlikeReflexes: number;\n    /**\n     * @generated from protobuf field: int32 invigoration = 20;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: int32 serpents_swiftness = 21;\n     */\n    serpentsSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 longevity = 22;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 23;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 24;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 25;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 26;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 improved_concussive_shot = 27;\n     */\n    improvedConcussiveShot: number;\n    /**\n     * @generated from protobuf field: int32 focused_aim = 28;\n     */\n    focusedAim: number;\n    /**\n     * @generated from protobuf field: int32 lethal_shots = 29;\n     */\n    lethalShots: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 30;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: int32 improved_hunters_mark = 31;\n     */\n    improvedHuntersMark: number;\n    /**\n     * @generated from protobuf field: int32 mortal_shots = 32;\n     */\n    mortalShots: number;\n    /**\n     * @generated from protobuf field: int32 go_for_the_throat = 33;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_shot = 34;\n     */\n    improvedArcaneShot: number;\n    /**\n     * @generated from protobuf field: bool aimed_shot = 35;\n     */\n    aimedShot: boolean;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 36;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 improved_stings = 37;\n     */\n    improvedStings: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 38;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 39;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: bool readiness = 40;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 barrage = 41;\n     */\n    barrage: number;\n    /**\n     * @generated from protobuf field: int32 combat_experience = 42;\n     */\n    combatExperience: number;\n    /**\n     * @generated from protobuf field: int32 ranged_weapon_specialization = 43;\n     */\n    rangedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 44;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 45;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_barrage = 46;\n     */\n    improvedBarrage: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 47;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 48;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 wild_quiver = 49;\n     */\n    wildQuiver: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 50;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 51;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 52;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 53;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 improved_tracking = 54;\n     */\n    improvedTracking: number;\n    /**\n     * @generated from protobuf field: int32 hawk_eye = 55;\n     */\n    hawkEye: number;\n    /**\n     * @generated from protobuf field: int32 savage_strikes = 56;\n     */\n    savageStrikes: number;\n    /**\n     * @generated from protobuf field: int32 surefooted = 57;\n     */\n    surefooted: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 58;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 59;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 survival_instincts = 60;\n     */\n    survivalInstincts: number;\n    /**\n     * @generated from protobuf field: int32 survivalist = 61;\n     */\n    survivalist: number;\n    /**\n     * @generated from protobuf field: bool scatter_shot = 62;\n     */\n    scatterShot: boolean;\n    /**\n     * @generated from protobuf field: int32 deflection = 63;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 64;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 65;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 66;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 hunter_vs_wild = 67;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 killer_instinct = 68;\n     */\n    killerInstinct: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 69;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 70;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 71;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 expose_weakness = 72;\n     */\n    exposeWeakness: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 73;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 74;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: int32 master_tactician = 75;\n     */\n    masterTactician: number;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 76;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 77;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 78;\n     */\n    blackArrow: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 79;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 hunting_party = 80;\n     */\n    huntingParty: number;\n    /**\n     * @generated from protobuf field: bool explosive_shot = 81;\n     */\n    explosiveShot: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: int32 cobra_reflexes = 1;\n     */\n    cobraReflexes: number;\n    /**\n     * @generated from protobuf field: bool dive = 2;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 5;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 6;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 7;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 8;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 11;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 12;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: int32 cornered = 13;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 14;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 15;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 16;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 17;\n     */\n    bullheaded: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 18;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 20;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 improved_cower = 21;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 22;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: bool heart_of_the_pheonix = 23;\n     */\n    heartOfThePheonix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 24;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: bool rabid = 25;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 26;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 27;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 28;\n     */\n    sharkAttack: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: bool charge = 29;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_rhino = 30;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 31;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 32;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 33;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: bool last_stand = 34;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 35;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 36;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 37;\n     */\n    silverback: number;\n}\n/**\n * @generated from protobuf message proto.Hunter\n */\nexport interface Hunter {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation rotation = 1;\n     */\n    rotation?: Hunter_Rotation;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options options = 3;\n     */\n    options?: Hunter_Options;\n}\n/**\n * @generated from protobuf message proto.Hunter.Rotation\n */\nexport interface Hunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.RotationType type = 9;\n     */\n    type: Hunter_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.StingType sting = 5;\n     */\n    sting: Hunter_Rotation_StingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 2;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.RotationType\n */\nexport enum Hunter_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.StingType\n */\nexport enum Hunter_Rotation_StingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.SpellOption\n */\nexport enum Hunter_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: SteadyShot = 1;\n     */\n    SteadyShot = 1,\n    /**\n     * @generated from protobuf enum value: ArcaneShot = 2;\n     */\n    ArcaneShot = 2,\n    /**\n     * @generated from protobuf enum value: AimedShot = 3;\n     */\n    AimedShot = 3,\n    /**\n     * @generated from protobuf enum value: MultiShot = 4;\n     */\n    MultiShot = 4,\n    /**\n     * @generated from protobuf enum value: SerpentStingSpell = 5;\n     */\n    SerpentStingSpell = 5,\n    /**\n     * @generated from protobuf enum value: ScorpidStingSpell = 6;\n     */\n    ScorpidStingSpell = 6,\n    /**\n     * @generated from protobuf enum value: KillShot = 7;\n     */\n    KillShot = 7,\n    /**\n     * @generated from protobuf enum value: BlackArrow = 8;\n     */\n    BlackArrow = 8,\n    /**\n     * @generated from protobuf enum value: ChimeraShot = 9;\n     */\n    ChimeraShot = 9,\n    /**\n     * @generated from protobuf enum value: ExplosiveShot = 10;\n     */\n    ExplosiveShot = 10,\n    /**\n     * @generated from protobuf enum value: ExplosiveShotDownrank = 13;\n     */\n    ExplosiveShotDownrank = 13,\n    /**\n     * @generated from protobuf enum value: ExplosiveTrap = 11;\n     */\n    ExplosiveTrap = 11,\n    /**\n     * @generated from protobuf enum value: Volley = 12;\n     */\n    Volley = 12\n}\n/**\n * @generated from protobuf message proto.Hunter.Options\n */\nexport interface Hunter_Options {\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.Ammo ammo = 1;\n     */\n    ammo: Hunter_Options_Ammo;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.PetType pet_type = 2;\n     */\n    petType: Hunter_Options_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 7;\n     */\n    sniperTrainingUptime: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 5;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.Ammo\n */\nexport enum Hunter_Options_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.PetType\n */\nexport enum Hunter_Options_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfTheViper = 42901;\n     */\n    GlyphOfAspectOfTheViper = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveTrap = 45733;\n     */\n    GlyphOfExplosiveTrap = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostTrap = 42906;\n     */\n    GlyphOfFrostTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfHuntersMark = 42907;\n     */\n    GlyphOfHuntersMark = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMultiShot = 42910;\n     */\n    GlyphOfMultiShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheBeast = 42899;\n     */\n    GlyphOfTheBeast = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheHawk = 42909;\n     */\n    GlyphOfTheHawk = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrueshotAura = 42915;\n     */\n    GlyphOfTrueshotAura = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfVolley = 42916;\n     */\n    GlyphOfVolley = 42916,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfMendPet = 43350;\n     */\n    GlyphOfMendPet = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfPossessedStrength = 43354;\n     */\n    GlyphOfPossessedStrength = 43354,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePack = 43355;\n     */\n    GlyphOfThePack = 43355\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_aspect_of_the_hawk\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"endurance_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focused_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_aspect_of_the_monkey\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_revive_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"aspect_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"unleashed_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"intimidation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"animal_handler\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"ferocious_inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"catlike_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"serpents_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"improved_concussive_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"focused_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"lethal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"mortal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"improved_arcane_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"aimed_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"combat_experience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"ranged_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"wild_quiver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"improved_tracking\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hawk_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"savage_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"surefooted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"survival_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"survivalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"scatter_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"killer_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"expose_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 74, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"master_tactician\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"hunting_party\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"explosive_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedAspectOfTheHawk: 0, enduranceTraining: 0, focusedFire: 0, improvedAspectOfTheMonkey: 0, thickHide: 0, improvedRevivePet: 0, pathfinding: 0, aspectMastery: false, unleashedFury: 0, improvedMendPet: 0, ferocity: 0, spiritBond: 0, intimidation: false, bestialDiscipline: 0, animalHandler: 0, frenzy: 0, ferociousInspiration: 0, bestialWrath: false, catlikeReflexes: 0, invigoration: 0, serpentsSwiftness: 0, longevity: 0, theBeastWithin: false, cobraStrikes: 0, kindredSpirits: 0, beastMastery: false, improvedConcussiveShot: 0, focusedAim: 0, lethalShots: 0, carefulAim: 0, improvedHuntersMark: 0, mortalShots: 0, goForTheThroat: 0, improvedArcaneShot: 0, aimedShot: false, rapidKilling: 0, improvedStings: 0, efficiency: 0, concussiveBarrage: 0, readiness: false, barrage: 0, combatExperience: 0, rangedWeaponSpecialization: 0, piercingShots: 0, trueshotAura: false, improvedBarrage: 0, masterMarksman: 0, rapidRecuperation: 0, wildQuiver: 0, silencingShot: false, improvedSteadyShot: 0, markedForDeath: 0, chimeraShot: false, improvedTracking: 0, hawkEye: 0, savageStrikes: 0, surefooted: 0, entrapment: 0, trapMastery: 0, survivalInstincts: 0, survivalist: 0, scatterShot: false, deflection: 0, survivalTactics: 0, tNT: 0, lockAndLoad: 0, hunterVsWild: 0, killerInstinct: 0, counterattack: false, lightningReflexes: 0, resourcefulness: 0, exposeWeakness: 0, wyvernSting: false, thrillOfTheHunt: 0, masterTactician: 0, noxiousStings: 0, pointOfNoEscape: 0, blackArrow: false, sniperTraining: 0, huntingParty: 0, explosiveShot: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_aspect_of_the_hawk */ 1:\n                    message.improvedAspectOfTheHawk = reader.int32();\n                    break;\n                case /* int32 endurance_training */ 2:\n                    message.enduranceTraining = reader.int32();\n                    break;\n                case /* int32 focused_fire */ 3:\n                    message.focusedFire = reader.int32();\n                    break;\n                case /* int32 improved_aspect_of_the_monkey */ 4:\n                    message.improvedAspectOfTheMonkey = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 5:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 improved_revive_pet */ 6:\n                    message.improvedRevivePet = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 7:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* bool aspect_mastery */ 8:\n                    message.aspectMastery = reader.bool();\n                    break;\n                case /* int32 unleashed_fury */ 9:\n                    message.unleashedFury = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 10:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 ferocity */ 11:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 12:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* bool intimidation */ 13:\n                    message.intimidation = reader.bool();\n                    break;\n                case /* int32 bestial_discipline */ 14:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 animal_handler */ 15:\n                    message.animalHandler = reader.int32();\n                    break;\n                case /* int32 frenzy */ 16:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 ferocious_inspiration */ 17:\n                    message.ferociousInspiration = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 18:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* int32 catlike_reflexes */ 19:\n                    message.catlikeReflexes = reader.int32();\n                    break;\n                case /* int32 invigoration */ 20:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* int32 serpents_swiftness */ 21:\n                    message.serpentsSwiftness = reader.int32();\n                    break;\n                case /* int32 longevity */ 22:\n                    message.longevity = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 23:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 cobra_strikes */ 24:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* int32 kindred_spirits */ 25:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 26:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 improved_concussive_shot */ 27:\n                    message.improvedConcussiveShot = reader.int32();\n                    break;\n                case /* int32 focused_aim */ 28:\n                    message.focusedAim = reader.int32();\n                    break;\n                case /* int32 lethal_shots */ 29:\n                    message.lethalShots = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 30:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* int32 improved_hunters_mark */ 31:\n                    message.improvedHuntersMark = reader.int32();\n                    break;\n                case /* int32 mortal_shots */ 32:\n                    message.mortalShots = reader.int32();\n                    break;\n                case /* int32 go_for_the_throat */ 33:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 improved_arcane_shot */ 34:\n                    message.improvedArcaneShot = reader.int32();\n                    break;\n                case /* bool aimed_shot */ 35:\n                    message.aimedShot = reader.bool();\n                    break;\n                case /* int32 rapid_killing */ 36:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 improved_stings */ 37:\n                    message.improvedStings = reader.int32();\n                    break;\n                case /* int32 efficiency */ 38:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 concussive_barrage */ 39:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* bool readiness */ 40:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 barrage */ 41:\n                    message.barrage = reader.int32();\n                    break;\n                case /* int32 combat_experience */ 42:\n                    message.combatExperience = reader.int32();\n                    break;\n                case /* int32 ranged_weapon_specialization */ 43:\n                    message.rangedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 44:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 45:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 improved_barrage */ 46:\n                    message.improvedBarrage = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 47:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 48:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 wild_quiver */ 49:\n                    message.wildQuiver = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 50:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 improved_steady_shot */ 51:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 52:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 53:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 improved_tracking */ 54:\n                    message.improvedTracking = reader.int32();\n                    break;\n                case /* int32 hawk_eye */ 55:\n                    message.hawkEye = reader.int32();\n                    break;\n                case /* int32 savage_strikes */ 56:\n                    message.savageStrikes = reader.int32();\n                    break;\n                case /* int32 surefooted */ 57:\n                    message.surefooted = reader.int32();\n                    break;\n                case /* int32 entrapment */ 58:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 59:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 survival_instincts */ 60:\n                    message.survivalInstincts = reader.int32();\n                    break;\n                case /* int32 survivalist */ 61:\n                    message.survivalist = reader.int32();\n                    break;\n                case /* bool scatter_shot */ 62:\n                    message.scatterShot = reader.bool();\n                    break;\n                case /* int32 deflection */ 63:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 64:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 65:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 lock_and_load */ 66:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 hunter_vs_wild */ 67:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 killer_instinct */ 68:\n                    message.killerInstinct = reader.int32();\n                    break;\n                case /* bool counterattack */ 69:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lightning_reflexes */ 70:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 71:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 expose_weakness */ 72:\n                    message.exposeWeakness = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 73:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 74:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* int32 master_tactician */ 75:\n                    message.masterTactician = reader.int32();\n                    break;\n                case /* int32 noxious_stings */ 76:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 77:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* bool black_arrow */ 78:\n                    message.blackArrow = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 79:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 hunting_party */ 80:\n                    message.huntingParty = reader.int32();\n                    break;\n                case /* bool explosive_shot */ 81:\n                    message.explosiveShot = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_aspect_of_the_hawk = 1; */\n        if (message.improvedAspectOfTheHawk !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedAspectOfTheHawk);\n        /* int32 endurance_training = 2; */\n        if (message.enduranceTraining !== 0)\n            writer.tag(2, WireType.Varint).int32(message.enduranceTraining);\n        /* int32 focused_fire = 3; */\n        if (message.focusedFire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusedFire);\n        /* int32 improved_aspect_of_the_monkey = 4; */\n        if (message.improvedAspectOfTheMonkey !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedAspectOfTheMonkey);\n        /* int32 thick_hide = 5; */\n        if (message.thickHide !== 0)\n            writer.tag(5, WireType.Varint).int32(message.thickHide);\n        /* int32 improved_revive_pet = 6; */\n        if (message.improvedRevivePet !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedRevivePet);\n        /* int32 pathfinding = 7; */\n        if (message.pathfinding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.pathfinding);\n        /* bool aspect_mastery = 8; */\n        if (message.aspectMastery !== false)\n            writer.tag(8, WireType.Varint).bool(message.aspectMastery);\n        /* int32 unleashed_fury = 9; */\n        if (message.unleashedFury !== 0)\n            writer.tag(9, WireType.Varint).int32(message.unleashedFury);\n        /* int32 improved_mend_pet = 10; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 ferocity = 11; */\n        if (message.ferocity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.ferocity);\n        /* int32 spirit_bond = 12; */\n        if (message.spiritBond !== 0)\n            writer.tag(12, WireType.Varint).int32(message.spiritBond);\n        /* bool intimidation = 13; */\n        if (message.intimidation !== false)\n            writer.tag(13, WireType.Varint).bool(message.intimidation);\n        /* int32 bestial_discipline = 14; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 animal_handler = 15; */\n        if (message.animalHandler !== 0)\n            writer.tag(15, WireType.Varint).int32(message.animalHandler);\n        /* int32 frenzy = 16; */\n        if (message.frenzy !== 0)\n            writer.tag(16, WireType.Varint).int32(message.frenzy);\n        /* int32 ferocious_inspiration = 17; */\n        if (message.ferociousInspiration !== 0)\n            writer.tag(17, WireType.Varint).int32(message.ferociousInspiration);\n        /* bool bestial_wrath = 18; */\n        if (message.bestialWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.bestialWrath);\n        /* int32 catlike_reflexes = 19; */\n        if (message.catlikeReflexes !== 0)\n            writer.tag(19, WireType.Varint).int32(message.catlikeReflexes);\n        /* int32 invigoration = 20; */\n        if (message.invigoration !== 0)\n            writer.tag(20, WireType.Varint).int32(message.invigoration);\n        /* int32 serpents_swiftness = 21; */\n        if (message.serpentsSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.serpentsSwiftness);\n        /* int32 longevity = 22; */\n        if (message.longevity !== 0)\n            writer.tag(22, WireType.Varint).int32(message.longevity);\n        /* bool the_beast_within = 23; */\n        if (message.theBeastWithin !== false)\n            writer.tag(23, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 cobra_strikes = 24; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(24, WireType.Varint).int32(message.cobraStrikes);\n        /* int32 kindred_spirits = 25; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(25, WireType.Varint).int32(message.kindredSpirits);\n        /* bool beast_mastery = 26; */\n        if (message.beastMastery !== false)\n            writer.tag(26, WireType.Varint).bool(message.beastMastery);\n        /* int32 improved_concussive_shot = 27; */\n        if (message.improvedConcussiveShot !== 0)\n            writer.tag(27, WireType.Varint).int32(message.improvedConcussiveShot);\n        /* int32 focused_aim = 28; */\n        if (message.focusedAim !== 0)\n            writer.tag(28, WireType.Varint).int32(message.focusedAim);\n        /* int32 lethal_shots = 29; */\n        if (message.lethalShots !== 0)\n            writer.tag(29, WireType.Varint).int32(message.lethalShots);\n        /* int32 careful_aim = 30; */\n        if (message.carefulAim !== 0)\n            writer.tag(30, WireType.Varint).int32(message.carefulAim);\n        /* int32 improved_hunters_mark = 31; */\n        if (message.improvedHuntersMark !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedHuntersMark);\n        /* int32 mortal_shots = 32; */\n        if (message.mortalShots !== 0)\n            writer.tag(32, WireType.Varint).int32(message.mortalShots);\n        /* int32 go_for_the_throat = 33; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(33, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 improved_arcane_shot = 34; */\n        if (message.improvedArcaneShot !== 0)\n            writer.tag(34, WireType.Varint).int32(message.improvedArcaneShot);\n        /* bool aimed_shot = 35; */\n        if (message.aimedShot !== false)\n            writer.tag(35, WireType.Varint).bool(message.aimedShot);\n        /* int32 rapid_killing = 36; */\n        if (message.rapidKilling !== 0)\n            writer.tag(36, WireType.Varint).int32(message.rapidKilling);\n        /* int32 improved_stings = 37; */\n        if (message.improvedStings !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedStings);\n        /* int32 efficiency = 38; */\n        if (message.efficiency !== 0)\n            writer.tag(38, WireType.Varint).int32(message.efficiency);\n        /* int32 concussive_barrage = 39; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(39, WireType.Varint).int32(message.concussiveBarrage);\n        /* bool readiness = 40; */\n        if (message.readiness !== false)\n            writer.tag(40, WireType.Varint).bool(message.readiness);\n        /* int32 barrage = 41; */\n        if (message.barrage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.barrage);\n        /* int32 combat_experience = 42; */\n        if (message.combatExperience !== 0)\n            writer.tag(42, WireType.Varint).int32(message.combatExperience);\n        /* int32 ranged_weapon_specialization = 43; */\n        if (message.rangedWeaponSpecialization !== 0)\n            writer.tag(43, WireType.Varint).int32(message.rangedWeaponSpecialization);\n        /* int32 piercing_shots = 44; */\n        if (message.piercingShots !== 0)\n            writer.tag(44, WireType.Varint).int32(message.piercingShots);\n        /* bool trueshot_aura = 45; */\n        if (message.trueshotAura !== false)\n            writer.tag(45, WireType.Varint).bool(message.trueshotAura);\n        /* int32 improved_barrage = 46; */\n        if (message.improvedBarrage !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedBarrage);\n        /* int32 master_marksman = 47; */\n        if (message.masterMarksman !== 0)\n            writer.tag(47, WireType.Varint).int32(message.masterMarksman);\n        /* int32 rapid_recuperation = 48; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(48, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 wild_quiver = 49; */\n        if (message.wildQuiver !== 0)\n            writer.tag(49, WireType.Varint).int32(message.wildQuiver);\n        /* bool silencing_shot = 50; */\n        if (message.silencingShot !== false)\n            writer.tag(50, WireType.Varint).bool(message.silencingShot);\n        /* int32 improved_steady_shot = 51; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 marked_for_death = 52; */\n        if (message.markedForDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 53; */\n        if (message.chimeraShot !== false)\n            writer.tag(53, WireType.Varint).bool(message.chimeraShot);\n        /* int32 improved_tracking = 54; */\n        if (message.improvedTracking !== 0)\n            writer.tag(54, WireType.Varint).int32(message.improvedTracking);\n        /* int32 hawk_eye = 55; */\n        if (message.hawkEye !== 0)\n            writer.tag(55, WireType.Varint).int32(message.hawkEye);\n        /* int32 savage_strikes = 56; */\n        if (message.savageStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.savageStrikes);\n        /* int32 surefooted = 57; */\n        if (message.surefooted !== 0)\n            writer.tag(57, WireType.Varint).int32(message.surefooted);\n        /* int32 entrapment = 58; */\n        if (message.entrapment !== 0)\n            writer.tag(58, WireType.Varint).int32(message.entrapment);\n        /* int32 trap_mastery = 59; */\n        if (message.trapMastery !== 0)\n            writer.tag(59, WireType.Varint).int32(message.trapMastery);\n        /* int32 survival_instincts = 60; */\n        if (message.survivalInstincts !== 0)\n            writer.tag(60, WireType.Varint).int32(message.survivalInstincts);\n        /* int32 survivalist = 61; */\n        if (message.survivalist !== 0)\n            writer.tag(61, WireType.Varint).int32(message.survivalist);\n        /* bool scatter_shot = 62; */\n        if (message.scatterShot !== false)\n            writer.tag(62, WireType.Varint).bool(message.scatterShot);\n        /* int32 deflection = 63; */\n        if (message.deflection !== 0)\n            writer.tag(63, WireType.Varint).int32(message.deflection);\n        /* int32 survival_tactics = 64; */\n        if (message.survivalTactics !== 0)\n            writer.tag(64, WireType.Varint).int32(message.survivalTactics);\n        /* int32 t_n_t = 65; */\n        if (message.tNT !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tNT);\n        /* int32 lock_and_load = 66; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(66, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 hunter_vs_wild = 67; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(67, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 killer_instinct = 68; */\n        if (message.killerInstinct !== 0)\n            writer.tag(68, WireType.Varint).int32(message.killerInstinct);\n        /* bool counterattack = 69; */\n        if (message.counterattack !== false)\n            writer.tag(69, WireType.Varint).bool(message.counterattack);\n        /* int32 lightning_reflexes = 70; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(70, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 resourcefulness = 71; */\n        if (message.resourcefulness !== 0)\n            writer.tag(71, WireType.Varint).int32(message.resourcefulness);\n        /* int32 expose_weakness = 72; */\n        if (message.exposeWeakness !== 0)\n            writer.tag(72, WireType.Varint).int32(message.exposeWeakness);\n        /* bool wyvern_sting = 73; */\n        if (message.wyvernSting !== false)\n            writer.tag(73, WireType.Varint).bool(message.wyvernSting);\n        /* int32 thrill_of_the_hunt = 74; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(74, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* int32 master_tactician = 75; */\n        if (message.masterTactician !== 0)\n            writer.tag(75, WireType.Varint).int32(message.masterTactician);\n        /* int32 noxious_stings = 76; */\n        if (message.noxiousStings !== 0)\n            writer.tag(76, WireType.Varint).int32(message.noxiousStings);\n        /* int32 point_of_no_escape = 77; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(77, WireType.Varint).int32(message.pointOfNoEscape);\n        /* bool black_arrow = 78; */\n        if (message.blackArrow !== false)\n            writer.tag(78, WireType.Varint).bool(message.blackArrow);\n        /* int32 sniper_training = 79; */\n        if (message.sniperTraining !== 0)\n            writer.tag(79, WireType.Varint).int32(message.sniperTraining);\n        /* int32 hunting_party = 80; */\n        if (message.huntingParty !== 0)\n            writer.tag(80, WireType.Varint).int32(message.huntingParty);\n        /* bool explosive_shot = 81; */\n        if (message.explosiveShot !== false)\n            writer.tag(81, WireType.Varint).bool(message.explosiveShot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"cobra_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"heart_of_the_pheonix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { cobraReflexes: 0, dive: false, greatStamina: 0, naturalArmor: 0, boarsSpeed: false, mobility: 0, owlsFocus: 0, spikedCollar: 0, cullingTheHerd: 0, lionhearted: 0, carrionFeeder: false, greatResistance: 0, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false, graceOfTheMantis: 0, wildHunt: 0, roarOfSacrifice: false, improvedCower: 0, bloodthirsty: 0, heartOfThePheonix: false, spidersBite: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, charge: false, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, lastStand: false, taunt: false, intervene: false, silverback: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 cobra_reflexes */ 1:\n                    message.cobraReflexes = reader.int32();\n                    break;\n                case /* bool dive */ 2:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* bool boars_speed */ 5:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 mobility */ 6:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 7:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 8:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 11:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 great_resistance */ 12:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* int32 cornered */ 13:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 14:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 15:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 16:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 17:\n                    message.bullheaded = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 18:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* bool roar_of_sacrifice */ 20:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_cower */ 21:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 22:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* bool heart_of_the_pheonix */ 23:\n                    message.heartOfThePheonix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 24:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* bool rabid */ 25:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 26:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 27:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 28:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* bool charge */ 29:\n                    message.charge = reader.bool();\n                    break;\n                case /* int32 blood_of_the_rhino */ 30:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 31:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 32:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 33:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* bool last_stand */ 34:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 35:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool intervene */ 36:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 37:\n                    message.silverback = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 cobra_reflexes = 1; */\n        if (message.cobraReflexes !== 0)\n            writer.tag(1, WireType.Varint).int32(message.cobraReflexes);\n        /* bool dive = 2; */\n        if (message.dive !== false)\n            writer.tag(2, WireType.Varint).bool(message.dive);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* bool boars_speed = 5; */\n        if (message.boarsSpeed !== false)\n            writer.tag(5, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 mobility = 6; */\n        if (message.mobility !== 0)\n            writer.tag(6, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 7; */\n        if (message.owlsFocus !== 0)\n            writer.tag(7, WireType.Varint).int32(message.owlsFocus);\n        /* int32 spiked_collar = 8; */\n        if (message.spikedCollar !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spikedCollar);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool carrion_feeder = 11; */\n        if (message.carrionFeeder !== false)\n            writer.tag(11, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 great_resistance = 12; */\n        if (message.greatResistance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.greatResistance);\n        /* int32 cornered = 13; */\n        if (message.cornered !== 0)\n            writer.tag(13, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 14; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 15; */\n        if (message.wolverineBite !== false)\n            writer.tag(15, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 16; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(16, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 17; */\n        if (message.bullheaded !== false)\n            writer.tag(17, WireType.Varint).bool(message.bullheaded);\n        /* int32 grace_of_the_mantis = 18; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(18, WireType.Varint).int32(message.graceOfTheMantis);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* bool roar_of_sacrifice = 20; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(20, WireType.Varint).bool(message.roarOfSacrifice);\n        /* int32 improved_cower = 21; */\n        if (message.improvedCower !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 22; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(22, WireType.Varint).int32(message.bloodthirsty);\n        /* bool heart_of_the_pheonix = 23; */\n        if (message.heartOfThePheonix !== false)\n            writer.tag(23, WireType.Varint).bool(message.heartOfThePheonix);\n        /* int32 spiders_bite = 24; */\n        if (message.spidersBite !== 0)\n            writer.tag(24, WireType.Varint).int32(message.spidersBite);\n        /* bool rabid = 25; */\n        if (message.rabid !== false)\n            writer.tag(25, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 26; */\n        if (message.lickYourWounds !== false)\n            writer.tag(26, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 27; */\n        if (message.callOfTheWild !== false)\n            writer.tag(27, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 28; */\n        if (message.sharkAttack !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sharkAttack);\n        /* bool charge = 29; */\n        if (message.charge !== false)\n            writer.tag(29, WireType.Varint).bool(message.charge);\n        /* int32 blood_of_the_rhino = 30; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(30, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 31; */\n        if (message.petBarding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 32; */\n        if (message.guardDog !== 0)\n            writer.tag(32, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 33; */\n        if (message.thunderstomp !== false)\n            writer.tag(33, WireType.Varint).bool(message.thunderstomp);\n        /* bool last_stand = 34; */\n        if (message.lastStand !== false)\n            writer.tag(34, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 35; */\n        if (message.taunt !== false)\n            writer.tag(35, WireType.Varint).bool(message.taunt);\n        /* bool intervene = 36; */\n        if (message.intervene !== false)\n            writer.tag(36, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 37; */\n        if (message.silverback !== 0)\n            writer.tag(37, WireType.Varint).int32(message.silverback);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter$Type extends MessageType<Hunter> {\n    constructor() {\n        super(\"proto.Hunter\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Hunter_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Hunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter>): Hunter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter): Hunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation rotation */ 1:\n                    message.rotation = Hunter_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.Hunter.Options options */ 3:\n                    message.options = Hunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation rotation = 1; */\n        if (message.rotation)\n            Hunter_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter.Options options = 3; */\n        if (message.options)\n            Hunter_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter\n */\nexport const Hunter = new Hunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Rotation$Type extends MessageType<Hunter_Rotation> {\n    constructor() {\n        super(\"proto.Hunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.RotationType\", Hunter_Rotation_RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.StingType\", Hunter_Rotation_StingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Rotation>): Hunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, timeToTrapWeaveMs: 0, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Rotation): Hunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.Hunter.Rotation.StingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double time_to_trap_weave_ms */ 2:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.Hunter.Rotation.StingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double time_to_trap_weave_ms = 2; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(2, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Rotation\n */\nexport const Hunter_Rotation = new Hunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Options$Type extends MessageType<Hunter_Options> {\n    constructor() {\n        super(\"proto.Hunter.Options\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.Hunter.Options.Ammo\", Hunter_Options_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.Hunter.Options.PetType\", Hunter_Options_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Options>): Hunter_Options {\n        const message = { ammo: 0, petType: 0, petUptime: 0, sniperTrainingUptime: 0, useHuntersMark: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Options): Hunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Options.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.Hunter.Options.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double sniper_training_uptime */ 7:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 5:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Options.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.Hunter.Options.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double sniper_training_uptime = 7; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(7, WireType.Bit64).double(message.sniperTrainingUptime);\n        /* bool use_hunters_mark = 5; */\n        if (message.useHuntersMark !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Options\n */\nexport const Hunter_Options = new Hunter_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 starlight_wrath = 1;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 2;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 3;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 4;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 improved_moonfire = 5;\n     */\n    improvedMoonfire: number;\n    /**\n     * @generated from protobuf field: int32 brambles = 6;\n     */\n    brambles: number;\n    /**\n     * @generated from protobuf field: int32 natures_grace = 7;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: bool natures_splendor = 8;\n     */\n    naturesSplendor: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_reach = 9;\n     */\n    naturesReach: number;\n    /**\n     * @generated from protobuf field: int32 vengeance = 10;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 celestial_focus = 11;\n     */\n    celestialFocus: number;\n    /**\n     * @generated from protobuf field: int32 lunar_guidance = 12;\n     */\n    lunarGuidance: number;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 13;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_insect_swarm = 14;\n     */\n    improvedInsectSwarm: number;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 15;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: int32 moonfury = 16;\n     */\n    moonfury: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 17;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 18;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_moonkin_form = 19;\n     */\n    improvedMoonkinForm: number;\n    /**\n     * @generated from protobuf field: int32 improved_faerie_fire = 20;\n     */\n    improvedFaerieFire: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 21;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrath_of_cenarius = 22;\n     */\n    wrathOfCenarius: number;\n    /**\n     * @generated from protobuf field: int32 eclipse = 23;\n     */\n    eclipse: number;\n    /**\n     * @generated from protobuf field: bool typhoon = 24;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 25;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 26;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: int32 earth_and_moon = 27;\n     */\n    earthAndMoon: number;\n    /**\n     * @generated from protobuf field: bool starfall = 28;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 ferocity = 29;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 30;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 feral_instinct = 31;\n     */\n    feralInstinct: number;\n    /**\n     * @generated from protobuf field: int32 savage_fury = 32;\n     */\n    savageFury: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 33;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 feral_swiftness = 34;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 35;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 sharpened_claws = 36;\n     */\n    sharpenedClaws: number;\n    /**\n     * @generated from protobuf field: int32 shredding_attacks = 37;\n     */\n    shreddingAttacks: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 38;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 39;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 primal_precision = 40;\n     */\n    primalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 41;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 42;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 43;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 44;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 45;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 survival_of_the_fittest = 46;\n     */\n    survivalOfTheFittest: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 47;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_leader_of_the_pack = 48;\n     */\n    improvedLeaderOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 primal_tenacity = 49;\n     */\n    primalTenacity: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_pack = 50;\n     */\n    protectorOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 predatory_instincts = 51;\n     */\n    predatoryInstincts: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 52;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 53;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool mangle = 54;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mangle = 55;\n     */\n    improvedMangle: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 56;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool primal_gore = 57;\n     */\n    primalGore: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 58;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_mark_of_the_wild = 59;\n     */\n    improvedMarkOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 natures_focus = 60;\n     */\n    naturesFocus: number;\n    /**\n     * @generated from protobuf field: int32 furor = 61;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 62;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 subtlety = 63;\n     */\n    subtlety: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 64;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 65;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: bool omen_of_clarity = 66;\n     */\n    omenOfClarity: boolean;\n    /**\n     * @generated from protobuf field: int32 master_shapeshifter = 67;\n     */\n    masterShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 tranquil_spirit = 68;\n     */\n    tranquilSpirit: number;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 69;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 70;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 gift_of_nature = 71;\n     */\n    giftOfNature: number;\n    /**\n     * @generated from protobuf field: int32 improved_tranquility = 72;\n     */\n    improvedTranquility: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 73;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 74;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 living_spirit = 75;\n     */\n    livingSpirit: number;\n    /**\n     * @generated from protobuf field: bool swiftmend = 76;\n     */\n    swiftmend: boolean;\n    /**\n     * @generated from protobuf field: int32 natural_perfection = 77;\n     */\n    naturalPerfection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_rejuvenation = 78;\n     */\n    empoweredRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 79;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 80;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 81;\n     */\n    treeOfLife: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_tree_of_life = 82;\n     */\n    improvedTreeOfLife: number;\n    /**\n     * @generated from protobuf field: int32 improved_barkskin = 83;\n     */\n    improvedBarkskin: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 84;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 85;\n     */\n    wildGrowth: boolean;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation rotation = 1;\n     */\n    rotation?: BalanceDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.Type type = 1;\n     */\n    type: BalanceDruid_Rotation_Type;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.MfUsage mf_usage = 2;\n     */\n    mfUsage: BalanceDruid_Rotation_MfUsage;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.IsUsage is_usage = 3;\n     */\n    isUsage: BalanceDruid_Rotation_IsUsage;\n    /**\n     * @generated from protobuf field: bool use_battle_res = 4;\n     */\n    useBattleRes: boolean;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.WrathUsage wrath_usage = 5;\n     */\n    wrathUsage: BalanceDruid_Rotation_WrathUsage;\n    /**\n     * @generated from protobuf field: bool use_starfire = 6;\n     */\n    useStarfire: boolean;\n    /**\n     * @generated from protobuf field: bool use_typhoon = 7;\n     */\n    useTyphoon: boolean;\n    /**\n     * @generated from protobuf field: bool use_hurricane = 8;\n     */\n    useHurricane: boolean;\n    /**\n     * @generated from protobuf field: bool use_smart_cooldowns = 9;\n     */\n    useSmartCooldowns: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 10;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 player_latency = 11;\n     */\n    playerLatency: number;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.EclipsePrio eclipse_prio = 12;\n     */\n    eclipsePrio: BalanceDruid_Rotation_EclipsePrio;\n    /**\n     * @generated from protobuf field: bool eclipse_shuffling = 13;\n     */\n    eclipseShuffling: boolean;\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.Type\n */\nexport enum BalanceDruid_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Default = 1;\n     */\n    Default = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.MfUsage\n */\nexport enum BalanceDruid_Rotation_MfUsage {\n    /**\n     * @generated from protobuf enum value: NoMf = 0;\n     */\n    NoMf = 0,\n    /**\n     * @generated from protobuf enum value: BeforeLunar = 1;\n     */\n    BeforeLunar = 1,\n    /**\n     * @generated from protobuf enum value: MaximizeMf = 2;\n     */\n    MaximizeMf = 2\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.IsUsage\n */\nexport enum BalanceDruid_Rotation_IsUsage {\n    /**\n     * @generated from protobuf enum value: NoIs = 0;\n     */\n    NoIs = 0,\n    /**\n     * @generated from protobuf enum value: BeforeSolar = 1;\n     */\n    BeforeSolar = 1,\n    /**\n     * @generated from protobuf enum value: MaximizeIs = 2;\n     */\n    MaximizeIs = 2,\n    /**\n     * @generated from protobuf enum value: MultidotIs = 3;\n     */\n    MultidotIs = 3\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.WrathUsage\n */\nexport enum BalanceDruid_Rotation_WrathUsage {\n    /**\n     * @generated from protobuf enum value: NoWrath = 0;\n     */\n    NoWrath = 0,\n    /**\n     * @generated from protobuf enum value: FishingForLunar = 1;\n     */\n    FishingForLunar = 1,\n    /**\n     * @generated from protobuf enum value: RegularWrath = 2;\n     */\n    RegularWrath = 2\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.EclipsePrio\n */\nexport enum BalanceDruid_Rotation_EclipsePrio {\n    /**\n     * @generated from protobuf enum value: Lunar = 0;\n     */\n    Lunar = 0,\n    /**\n     * @generated from protobuf enum value: Solar = 1;\n     */\n    Solar = 1\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1;\n     */\n    bearWeaveType: FeralDruid_Rotation_BearweaveType;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 2;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_rip = 3;\n     */\n    minCombosForRip: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 4;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 5;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: bool mangle_spam = 6;\n     */\n    mangleSpam: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 7;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_bite = 8;\n     */\n    minCombosForBite: number;\n    /**\n     * @generated from protobuf field: int32 berserk_bite_thresh = 9;\n     */\n    berserkBiteThresh: number;\n    /**\n     * @generated from protobuf field: int32 berserk_ff_thresh = 18;\n     */\n    berserkFfThresh: number;\n    /**\n     * @generated from protobuf field: int32 rip_leeway = 19;\n     */\n    ripLeeway: number;\n    /**\n     * @generated from protobuf field: bool powerbear = 10;\n     */\n    powerbear: boolean;\n    /**\n     * @generated from protobuf field: float min_roar_offset = 11;\n     */\n    minRoarOffset: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12;\n     */\n    biteModeType: FeralDruid_Rotation_BiteModeType;\n    /**\n     * @generated from protobuf field: float hot_uptime = 13;\n     */\n    hotUptime: number;\n    /**\n     * @generated from protobuf field: bool snek_weave = 14;\n     */\n    snekWeave: boolean;\n    /**\n     * @generated from protobuf field: bool flower_weave = 15;\n     */\n    flowerWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 raid_targets = 16;\n     */\n    raidTargets: number;\n    /**\n     * @generated from protobuf field: bool manual_params = 17;\n     */\n    manualParams: boolean;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BearweaveType\n */\nexport enum FeralDruid_Rotation_BearweaveType {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Mangle = 1;\n     */\n    Mangle = 1,\n    /**\n     * @generated from protobuf enum value: Lacerate = 2;\n     */\n    Lacerate = 2\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BiteModeType\n */\nexport enum FeralDruid_Rotation_BiteModeType {\n    /**\n     * @generated from protobuf enum value: Emperical = 0;\n     */\n    Emperical = 0,\n    /**\n     * @generated from protobuf enum value: Analytical = 1;\n     */\n    Analytical = 1\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: int32 latency_ms = 2;\n     */\n    latencyMs: number;\n    /**\n     * @generated from protobuf field: bool prepop_ooc = 3;\n     */\n    prepopOoc: boolean;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 4;\n     */\n    assumeBleedActive: boolean;\n    /**\n     * @generated from protobuf field: bool pre_pop_berserk = 5;\n     */\n    prePopBerserk: boolean;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralTankDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: double lacerate_time = 3;\n     */\n    lacerateTime: number;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid\n */\nexport interface RestorationDruid {\n    /**\n     * @generated from protobuf field: proto.RestorationDruid.Rotation rotation = 1;\n     */\n    rotation?: RestorationDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.RestorationDruid.Options options = 3;\n     */\n    options?: RestorationDruid_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Rotation\n */\nexport interface RestorationDruid_Rotation {\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Options\n */\nexport interface RestorationDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfClaw = 48720;\n     */\n    GlyphOfClaw = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfGrowling = 40899;\n     */\n    GlyphOfGrowling = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfNourish = 45603;\n     */\n    GlyphOfNourish = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfRake = 40903;\n     */\n    GlyphOfRake = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidRejuvenation = 50125;\n     */\n    GlyphOfRapidRejuvenation = 50125,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfShred = 40901;\n     */\n    GlyphOfShred = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfSurvivalInstincts = 46372;\n     */\n    GlyphOfSurvivalInstincts = 46372,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWild = 43335;\n     */\n    GlyphOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_moonfire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"brambles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"natures_splendor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"natures_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"celestial_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lunar_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_insect_swarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"moonfury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"improved_moonkin_form\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"improved_faerie_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"wrath_of_cenarius\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eclipse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earth_and_moon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"feral_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"savage_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"sharpened_claws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"shredding_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"primal_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"survival_of_the_fittest\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"improved_leader_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"primal_tenacity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"protector_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"predatory_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_mangle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"primal_gore\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_mark_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"natures_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"omen_of_clarity\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"master_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"tranquil_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"gift_of_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"improved_tranquility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"living_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"swiftmend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"natural_perfection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"empowered_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"improved_tree_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"improved_barkskin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { starlightWrath: 0, genesis: 0, moonglow: 0, naturesMajesty: 0, improvedMoonfire: 0, brambles: 0, naturesGrace: 0, naturesSplendor: false, naturesReach: 0, vengeance: 0, celestialFocus: 0, lunarGuidance: 0, insectSwarm: false, improvedInsectSwarm: 0, dreamstate: 0, moonfury: 0, balanceOfPower: 0, moonkinForm: false, improvedMoonkinForm: 0, improvedFaerieFire: 0, owlkinFrenzy: 0, wrathOfCenarius: 0, eclipse: 0, typhoon: false, forceOfNature: false, galeWinds: 0, earthAndMoon: 0, starfall: false, ferocity: 0, feralAggression: 0, feralInstinct: 0, savageFury: 0, thickHide: 0, feralSwiftness: 0, survivalInstincts: false, sharpenedClaws: 0, shreddingAttacks: 0, predatoryStrikes: 0, primalFury: 0, primalPrecision: 0, brutalImpact: 0, feralCharge: false, nurturingInstinct: 0, naturalReaction: 0, heartOfTheWild: 0, survivalOfTheFittest: 0, leaderOfThePack: false, improvedLeaderOfThePack: 0, primalTenacity: 0, protectorOfThePack: 0, predatoryInstincts: 0, infectedWounds: 0, kingOfTheJungle: 0, mangle: false, improvedMangle: 0, rendAndTear: 0, primalGore: false, berserk: false, improvedMarkOfTheWild: 0, naturesFocus: 0, furor: 0, naturalist: 0, subtlety: 0, naturalShapeshifter: 0, intensity: 0, omenOfClarity: false, masterShapeshifter: 0, tranquilSpirit: 0, improvedRejuvenation: 0, naturesSwiftness: false, giftOfNature: 0, improvedTranquility: 0, empoweredTouch: 0, naturesBounty: 0, livingSpirit: 0, swiftmend: false, naturalPerfection: 0, empoweredRejuvenation: 0, livingSeed: 0, revitalize: 0, treeOfLife: false, improvedTreeOfLife: 0, improvedBarkskin: 0, giftOfTheEarthmother: 0, wildGrowth: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 starlight_wrath */ 1:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 genesis */ 2:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 3:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 4:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 improved_moonfire */ 5:\n                    message.improvedMoonfire = reader.int32();\n                    break;\n                case /* int32 brambles */ 6:\n                    message.brambles = reader.int32();\n                    break;\n                case /* int32 natures_grace */ 7:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* bool natures_splendor */ 8:\n                    message.naturesSplendor = reader.bool();\n                    break;\n                case /* int32 natures_reach */ 9:\n                    message.naturesReach = reader.int32();\n                    break;\n                case /* int32 vengeance */ 10:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 celestial_focus */ 11:\n                    message.celestialFocus = reader.int32();\n                    break;\n                case /* int32 lunar_guidance */ 12:\n                    message.lunarGuidance = reader.int32();\n                    break;\n                case /* bool insect_swarm */ 13:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* int32 improved_insect_swarm */ 14:\n                    message.improvedInsectSwarm = reader.int32();\n                    break;\n                case /* int32 dreamstate */ 15:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* int32 moonfury */ 16:\n                    message.moonfury = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 17:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 18:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* int32 improved_moonkin_form */ 19:\n                    message.improvedMoonkinForm = reader.int32();\n                    break;\n                case /* int32 improved_faerie_fire */ 20:\n                    message.improvedFaerieFire = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 21:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 wrath_of_cenarius */ 22:\n                    message.wrathOfCenarius = reader.int32();\n                    break;\n                case /* int32 eclipse */ 23:\n                    message.eclipse = reader.int32();\n                    break;\n                case /* bool typhoon */ 24:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* bool force_of_nature */ 25:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* int32 gale_winds */ 26:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* int32 earth_and_moon */ 27:\n                    message.earthAndMoon = reader.int32();\n                    break;\n                case /* bool starfall */ 28:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 ferocity */ 29:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 30:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 feral_instinct */ 31:\n                    message.feralInstinct = reader.int32();\n                    break;\n                case /* int32 savage_fury */ 32:\n                    message.savageFury = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 33:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 feral_swiftness */ 34:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 35:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 sharpened_claws */ 36:\n                    message.sharpenedClaws = reader.int32();\n                    break;\n                case /* int32 shredding_attacks */ 37:\n                    message.shreddingAttacks = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 38:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 39:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 primal_precision */ 40:\n                    message.primalPrecision = reader.int32();\n                    break;\n                case /* int32 brutal_impact */ 41:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* bool feral_charge */ 42:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 nurturing_instinct */ 43:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 44:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 45:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 survival_of_the_fittest */ 46:\n                    message.survivalOfTheFittest = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 47:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 improved_leader_of_the_pack */ 48:\n                    message.improvedLeaderOfThePack = reader.int32();\n                    break;\n                case /* int32 primal_tenacity */ 49:\n                    message.primalTenacity = reader.int32();\n                    break;\n                case /* int32 protector_of_the_pack */ 50:\n                    message.protectorOfThePack = reader.int32();\n                    break;\n                case /* int32 predatory_instincts */ 51:\n                    message.predatoryInstincts = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 52:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 53:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool mangle */ 54:\n                    message.mangle = reader.bool();\n                    break;\n                case /* int32 improved_mangle */ 55:\n                    message.improvedMangle = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 56:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool primal_gore */ 57:\n                    message.primalGore = reader.bool();\n                    break;\n                case /* bool berserk */ 58:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 improved_mark_of_the_wild */ 59:\n                    message.improvedMarkOfTheWild = reader.int32();\n                    break;\n                case /* int32 natures_focus */ 60:\n                    message.naturesFocus = reader.int32();\n                    break;\n                case /* int32 furor */ 61:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 naturalist */ 62:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 subtlety */ 63:\n                    message.subtlety = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 64:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 intensity */ 65:\n                    message.intensity = reader.int32();\n                    break;\n                case /* bool omen_of_clarity */ 66:\n                    message.omenOfClarity = reader.bool();\n                    break;\n                case /* int32 master_shapeshifter */ 67:\n                    message.masterShapeshifter = reader.int32();\n                    break;\n                case /* int32 tranquil_spirit */ 68:\n                    message.tranquilSpirit = reader.int32();\n                    break;\n                case /* int32 improved_rejuvenation */ 69:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 70:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 gift_of_nature */ 71:\n                    message.giftOfNature = reader.int32();\n                    break;\n                case /* int32 improved_tranquility */ 72:\n                    message.improvedTranquility = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 73:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 74:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 living_spirit */ 75:\n                    message.livingSpirit = reader.int32();\n                    break;\n                case /* bool swiftmend */ 76:\n                    message.swiftmend = reader.bool();\n                    break;\n                case /* int32 natural_perfection */ 77:\n                    message.naturalPerfection = reader.int32();\n                    break;\n                case /* int32 empowered_rejuvenation */ 78:\n                    message.empoweredRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 79:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 80:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool tree_of_life */ 81:\n                    message.treeOfLife = reader.bool();\n                    break;\n                case /* int32 improved_tree_of_life */ 82:\n                    message.improvedTreeOfLife = reader.int32();\n                    break;\n                case /* int32 improved_barkskin */ 83:\n                    message.improvedBarkskin = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 84:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool wild_growth */ 85:\n                    message.wildGrowth = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 starlight_wrath = 1; */\n        if (message.starlightWrath !== 0)\n            writer.tag(1, WireType.Varint).int32(message.starlightWrath);\n        /* int32 genesis = 2; */\n        if (message.genesis !== 0)\n            writer.tag(2, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 3; */\n        if (message.moonglow !== 0)\n            writer.tag(3, WireType.Varint).int32(message.moonglow);\n        /* int32 natures_majesty = 4; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 improved_moonfire = 5; */\n        if (message.improvedMoonfire !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedMoonfire);\n        /* int32 brambles = 6; */\n        if (message.brambles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.brambles);\n        /* int32 natures_grace = 7; */\n        if (message.naturesGrace !== 0)\n            writer.tag(7, WireType.Varint).int32(message.naturesGrace);\n        /* bool natures_splendor = 8; */\n        if (message.naturesSplendor !== false)\n            writer.tag(8, WireType.Varint).bool(message.naturesSplendor);\n        /* int32 natures_reach = 9; */\n        if (message.naturesReach !== 0)\n            writer.tag(9, WireType.Varint).int32(message.naturesReach);\n        /* int32 vengeance = 10; */\n        if (message.vengeance !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vengeance);\n        /* int32 celestial_focus = 11; */\n        if (message.celestialFocus !== 0)\n            writer.tag(11, WireType.Varint).int32(message.celestialFocus);\n        /* int32 lunar_guidance = 12; */\n        if (message.lunarGuidance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lunarGuidance);\n        /* bool insect_swarm = 13; */\n        if (message.insectSwarm !== false)\n            writer.tag(13, WireType.Varint).bool(message.insectSwarm);\n        /* int32 improved_insect_swarm = 14; */\n        if (message.improvedInsectSwarm !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedInsectSwarm);\n        /* int32 dreamstate = 15; */\n        if (message.dreamstate !== 0)\n            writer.tag(15, WireType.Varint).int32(message.dreamstate);\n        /* int32 moonfury = 16; */\n        if (message.moonfury !== 0)\n            writer.tag(16, WireType.Varint).int32(message.moonfury);\n        /* int32 balance_of_power = 17; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(17, WireType.Varint).int32(message.balanceOfPower);\n        /* bool moonkin_form = 18; */\n        if (message.moonkinForm !== false)\n            writer.tag(18, WireType.Varint).bool(message.moonkinForm);\n        /* int32 improved_moonkin_form = 19; */\n        if (message.improvedMoonkinForm !== 0)\n            writer.tag(19, WireType.Varint).int32(message.improvedMoonkinForm);\n        /* int32 improved_faerie_fire = 20; */\n        if (message.improvedFaerieFire !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFaerieFire);\n        /* int32 owlkin_frenzy = 21; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 wrath_of_cenarius = 22; */\n        if (message.wrathOfCenarius !== 0)\n            writer.tag(22, WireType.Varint).int32(message.wrathOfCenarius);\n        /* int32 eclipse = 23; */\n        if (message.eclipse !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eclipse);\n        /* bool typhoon = 24; */\n        if (message.typhoon !== false)\n            writer.tag(24, WireType.Varint).bool(message.typhoon);\n        /* bool force_of_nature = 25; */\n        if (message.forceOfNature !== false)\n            writer.tag(25, WireType.Varint).bool(message.forceOfNature);\n        /* int32 gale_winds = 26; */\n        if (message.galeWinds !== 0)\n            writer.tag(26, WireType.Varint).int32(message.galeWinds);\n        /* int32 earth_and_moon = 27; */\n        if (message.earthAndMoon !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthAndMoon);\n        /* bool starfall = 28; */\n        if (message.starfall !== false)\n            writer.tag(28, WireType.Varint).bool(message.starfall);\n        /* int32 ferocity = 29; */\n        if (message.ferocity !== 0)\n            writer.tag(29, WireType.Varint).int32(message.ferocity);\n        /* int32 feral_aggression = 30; */\n        if (message.feralAggression !== 0)\n            writer.tag(30, WireType.Varint).int32(message.feralAggression);\n        /* int32 feral_instinct = 31; */\n        if (message.feralInstinct !== 0)\n            writer.tag(31, WireType.Varint).int32(message.feralInstinct);\n        /* int32 savage_fury = 32; */\n        if (message.savageFury !== 0)\n            writer.tag(32, WireType.Varint).int32(message.savageFury);\n        /* int32 thick_hide = 33; */\n        if (message.thickHide !== 0)\n            writer.tag(33, WireType.Varint).int32(message.thickHide);\n        /* int32 feral_swiftness = 34; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.feralSwiftness);\n        /* bool survival_instincts = 35; */\n        if (message.survivalInstincts !== false)\n            writer.tag(35, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 sharpened_claws = 36; */\n        if (message.sharpenedClaws !== 0)\n            writer.tag(36, WireType.Varint).int32(message.sharpenedClaws);\n        /* int32 shredding_attacks = 37; */\n        if (message.shreddingAttacks !== 0)\n            writer.tag(37, WireType.Varint).int32(message.shreddingAttacks);\n        /* int32 predatory_strikes = 38; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(38, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 primal_fury = 39; */\n        if (message.primalFury !== 0)\n            writer.tag(39, WireType.Varint).int32(message.primalFury);\n        /* int32 primal_precision = 40; */\n        if (message.primalPrecision !== 0)\n            writer.tag(40, WireType.Varint).int32(message.primalPrecision);\n        /* int32 brutal_impact = 41; */\n        if (message.brutalImpact !== 0)\n            writer.tag(41, WireType.Varint).int32(message.brutalImpact);\n        /* bool feral_charge = 42; */\n        if (message.feralCharge !== false)\n            writer.tag(42, WireType.Varint).bool(message.feralCharge);\n        /* int32 nurturing_instinct = 43; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(43, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 natural_reaction = 44; */\n        if (message.naturalReaction !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalReaction);\n        /* int32 heart_of_the_wild = 45; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(45, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 survival_of_the_fittest = 46; */\n        if (message.survivalOfTheFittest !== 0)\n            writer.tag(46, WireType.Varint).int32(message.survivalOfTheFittest);\n        /* bool leader_of_the_pack = 47; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(47, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 improved_leader_of_the_pack = 48; */\n        if (message.improvedLeaderOfThePack !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedLeaderOfThePack);\n        /* int32 primal_tenacity = 49; */\n        if (message.primalTenacity !== 0)\n            writer.tag(49, WireType.Varint).int32(message.primalTenacity);\n        /* int32 protector_of_the_pack = 50; */\n        if (message.protectorOfThePack !== 0)\n            writer.tag(50, WireType.Varint).int32(message.protectorOfThePack);\n        /* int32 predatory_instincts = 51; */\n        if (message.predatoryInstincts !== 0)\n            writer.tag(51, WireType.Varint).int32(message.predatoryInstincts);\n        /* int32 infected_wounds = 52; */\n        if (message.infectedWounds !== 0)\n            writer.tag(52, WireType.Varint).int32(message.infectedWounds);\n        /* int32 king_of_the_jungle = 53; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(53, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool mangle = 54; */\n        if (message.mangle !== false)\n            writer.tag(54, WireType.Varint).bool(message.mangle);\n        /* int32 improved_mangle = 55; */\n        if (message.improvedMangle !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedMangle);\n        /* int32 rend_and_tear = 56; */\n        if (message.rendAndTear !== 0)\n            writer.tag(56, WireType.Varint).int32(message.rendAndTear);\n        /* bool primal_gore = 57; */\n        if (message.primalGore !== false)\n            writer.tag(57, WireType.Varint).bool(message.primalGore);\n        /* bool berserk = 58; */\n        if (message.berserk !== false)\n            writer.tag(58, WireType.Varint).bool(message.berserk);\n        /* int32 improved_mark_of_the_wild = 59; */\n        if (message.improvedMarkOfTheWild !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedMarkOfTheWild);\n        /* int32 natures_focus = 60; */\n        if (message.naturesFocus !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesFocus);\n        /* int32 furor = 61; */\n        if (message.furor !== 0)\n            writer.tag(61, WireType.Varint).int32(message.furor);\n        /* int32 naturalist = 62; */\n        if (message.naturalist !== 0)\n            writer.tag(62, WireType.Varint).int32(message.naturalist);\n        /* int32 subtlety = 63; */\n        if (message.subtlety !== 0)\n            writer.tag(63, WireType.Varint).int32(message.subtlety);\n        /* int32 natural_shapeshifter = 64; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(64, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 intensity = 65; */\n        if (message.intensity !== 0)\n            writer.tag(65, WireType.Varint).int32(message.intensity);\n        /* bool omen_of_clarity = 66; */\n        if (message.omenOfClarity !== false)\n            writer.tag(66, WireType.Varint).bool(message.omenOfClarity);\n        /* int32 master_shapeshifter = 67; */\n        if (message.masterShapeshifter !== 0)\n            writer.tag(67, WireType.Varint).int32(message.masterShapeshifter);\n        /* int32 tranquil_spirit = 68; */\n        if (message.tranquilSpirit !== 0)\n            writer.tag(68, WireType.Varint).int32(message.tranquilSpirit);\n        /* int32 improved_rejuvenation = 69; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedRejuvenation);\n        /* bool natures_swiftness = 70; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(70, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 gift_of_nature = 71; */\n        if (message.giftOfNature !== 0)\n            writer.tag(71, WireType.Varint).int32(message.giftOfNature);\n        /* int32 improved_tranquility = 72; */\n        if (message.improvedTranquility !== 0)\n            writer.tag(72, WireType.Varint).int32(message.improvedTranquility);\n        /* int32 empowered_touch = 73; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(73, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 natures_bounty = 74; */\n        if (message.naturesBounty !== 0)\n            writer.tag(74, WireType.Varint).int32(message.naturesBounty);\n        /* int32 living_spirit = 75; */\n        if (message.livingSpirit !== 0)\n            writer.tag(75, WireType.Varint).int32(message.livingSpirit);\n        /* bool swiftmend = 76; */\n        if (message.swiftmend !== false)\n            writer.tag(76, WireType.Varint).bool(message.swiftmend);\n        /* int32 natural_perfection = 77; */\n        if (message.naturalPerfection !== 0)\n            writer.tag(77, WireType.Varint).int32(message.naturalPerfection);\n        /* int32 empowered_rejuvenation = 78; */\n        if (message.empoweredRejuvenation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.empoweredRejuvenation);\n        /* int32 living_seed = 79; */\n        if (message.livingSeed !== 0)\n            writer.tag(79, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 80; */\n        if (message.revitalize !== 0)\n            writer.tag(80, WireType.Varint).int32(message.revitalize);\n        /* bool tree_of_life = 81; */\n        if (message.treeOfLife !== false)\n            writer.tag(81, WireType.Varint).bool(message.treeOfLife);\n        /* int32 improved_tree_of_life = 82; */\n        if (message.improvedTreeOfLife !== 0)\n            writer.tag(82, WireType.Varint).int32(message.improvedTreeOfLife);\n        /* int32 improved_barkskin = 83; */\n        if (message.improvedBarkskin !== 0)\n            writer.tag(83, WireType.Varint).int32(message.improvedBarkskin);\n        /* int32 gift_of_the_earthmother = 84; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(84, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool wild_growth = 85; */\n        if (message.wildGrowth !== false)\n            writer.tag(85, WireType.Varint).bool(message.wildGrowth);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BalanceDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation rotation */ 1:\n                    message.rotation = BalanceDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            BalanceDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.Type\", BalanceDruid_Rotation_Type] },\n            { no: 2, name: \"mf_usage\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.MfUsage\", BalanceDruid_Rotation_MfUsage] },\n            { no: 3, name: \"is_usage\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.IsUsage\", BalanceDruid_Rotation_IsUsage] },\n            { no: 4, name: \"use_battle_res\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"wrath_usage\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.WrathUsage\", BalanceDruid_Rotation_WrathUsage] },\n            { no: 6, name: \"use_starfire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"use_typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_hurricane\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"use_smart_cooldowns\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"player_latency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"eclipse_prio\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.EclipsePrio\", BalanceDruid_Rotation_EclipsePrio] },\n            { no: 13, name: \"eclipse_shuffling\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = { type: 0, mfUsage: 0, isUsage: 0, useBattleRes: false, wrathUsage: 0, useStarfire: false, useTyphoon: false, useHurricane: false, useSmartCooldowns: false, maintainFaerieFire: false, playerLatency: 0, eclipsePrio: 0, eclipseShuffling: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.BalanceDruid.Rotation.MfUsage mf_usage */ 2:\n                    message.mfUsage = reader.int32();\n                    break;\n                case /* proto.BalanceDruid.Rotation.IsUsage is_usage */ 3:\n                    message.isUsage = reader.int32();\n                    break;\n                case /* bool use_battle_res */ 4:\n                    message.useBattleRes = reader.bool();\n                    break;\n                case /* proto.BalanceDruid.Rotation.WrathUsage wrath_usage */ 5:\n                    message.wrathUsage = reader.int32();\n                    break;\n                case /* bool use_starfire */ 6:\n                    message.useStarfire = reader.bool();\n                    break;\n                case /* bool use_typhoon */ 7:\n                    message.useTyphoon = reader.bool();\n                    break;\n                case /* bool use_hurricane */ 8:\n                    message.useHurricane = reader.bool();\n                    break;\n                case /* bool use_smart_cooldowns */ 9:\n                    message.useSmartCooldowns = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 10:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 player_latency */ 11:\n                    message.playerLatency = reader.int32();\n                    break;\n                case /* proto.BalanceDruid.Rotation.EclipsePrio eclipse_prio */ 12:\n                    message.eclipsePrio = reader.int32();\n                    break;\n                case /* bool eclipse_shuffling */ 13:\n                    message.eclipseShuffling = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* proto.BalanceDruid.Rotation.MfUsage mf_usage = 2; */\n        if (message.mfUsage !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mfUsage);\n        /* proto.BalanceDruid.Rotation.IsUsage is_usage = 3; */\n        if (message.isUsage !== 0)\n            writer.tag(3, WireType.Varint).int32(message.isUsage);\n        /* bool use_battle_res = 4; */\n        if (message.useBattleRes !== false)\n            writer.tag(4, WireType.Varint).bool(message.useBattleRes);\n        /* proto.BalanceDruid.Rotation.WrathUsage wrath_usage = 5; */\n        if (message.wrathUsage !== 0)\n            writer.tag(5, WireType.Varint).int32(message.wrathUsage);\n        /* bool use_starfire = 6; */\n        if (message.useStarfire !== false)\n            writer.tag(6, WireType.Varint).bool(message.useStarfire);\n        /* bool use_typhoon = 7; */\n        if (message.useTyphoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.useTyphoon);\n        /* bool use_hurricane = 8; */\n        if (message.useHurricane !== false)\n            writer.tag(8, WireType.Varint).bool(message.useHurricane);\n        /* bool use_smart_cooldowns = 9; */\n        if (message.useSmartCooldowns !== false)\n            writer.tag(9, WireType.Varint).bool(message.useSmartCooldowns);\n        /* bool maintain_faerie_fire = 10; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(10, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 player_latency = 11; */\n        if (message.playerLatency !== 0)\n            writer.tag(11, WireType.Varint).int32(message.playerLatency);\n        /* proto.BalanceDruid.Rotation.EclipsePrio eclipse_prio = 12; */\n        if (message.eclipsePrio !== 0)\n            writer.tag(12, WireType.Varint).int32(message.eclipsePrio);\n        /* bool eclipse_shuffling = 13; */\n        if (message.eclipseShuffling !== false)\n            writer.tag(13, WireType.Varint).bool(message.eclipseShuffling);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"bear_weave_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BearweaveType\", FeralDruid_Rotation_BearweaveType] },\n            { no: 2, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"min_combos_for_rip\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mangle_spam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 8, name: \"min_combos_for_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"berserk_bite_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"berserk_ff_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"rip_leeway\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"powerbear\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"min_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 12, name: \"bite_mode_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BiteModeType\", FeralDruid_Rotation_BiteModeType] },\n            { no: 13, name: \"hot_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 14, name: \"snek_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"flower_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"raid_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"manual_params\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { bearWeaveType: 0, maintainFaerieFire: false, minCombosForRip: 0, useRake: false, useBite: false, mangleSpam: false, biteTime: 0, minCombosForBite: 0, berserkBiteThresh: 0, berserkFfThresh: 0, ripLeeway: 0, powerbear: false, minRoarOffset: 0, biteModeType: 0, hotUptime: 0, snekWeave: false, flowerWeave: false, raidTargets: 0, manualParams: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type */ 1:\n                    message.bearWeaveType = reader.int32();\n                    break;\n                case /* bool maintain_faerie_fire */ 2:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 min_combos_for_rip */ 3:\n                    message.minCombosForRip = reader.int32();\n                    break;\n                case /* bool use_rake */ 4:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 5:\n                    message.useBite = reader.bool();\n                    break;\n                case /* bool mangle_spam */ 6:\n                    message.mangleSpam = reader.bool();\n                    break;\n                case /* float bite_time */ 7:\n                    message.biteTime = reader.float();\n                    break;\n                case /* int32 min_combos_for_bite */ 8:\n                    message.minCombosForBite = reader.int32();\n                    break;\n                case /* int32 berserk_bite_thresh */ 9:\n                    message.berserkBiteThresh = reader.int32();\n                    break;\n                case /* int32 berserk_ff_thresh */ 18:\n                    message.berserkFfThresh = reader.int32();\n                    break;\n                case /* int32 rip_leeway */ 19:\n                    message.ripLeeway = reader.int32();\n                    break;\n                case /* bool powerbear */ 10:\n                    message.powerbear = reader.bool();\n                    break;\n                case /* float min_roar_offset */ 11:\n                    message.minRoarOffset = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type */ 12:\n                    message.biteModeType = reader.int32();\n                    break;\n                case /* float hot_uptime */ 13:\n                    message.hotUptime = reader.float();\n                    break;\n                case /* bool snek_weave */ 14:\n                    message.snekWeave = reader.bool();\n                    break;\n                case /* bool flower_weave */ 15:\n                    message.flowerWeave = reader.bool();\n                    break;\n                case /* int32 raid_targets */ 16:\n                    message.raidTargets = reader.int32();\n                    break;\n                case /* bool manual_params */ 17:\n                    message.manualParams = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1; */\n        if (message.bearWeaveType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.bearWeaveType);\n        /* bool maintain_faerie_fire = 2; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 min_combos_for_rip = 3; */\n        if (message.minCombosForRip !== 0)\n            writer.tag(3, WireType.Varint).int32(message.minCombosForRip);\n        /* bool use_rake = 4; */\n        if (message.useRake !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 5; */\n        if (message.useBite !== false)\n            writer.tag(5, WireType.Varint).bool(message.useBite);\n        /* bool mangle_spam = 6; */\n        if (message.mangleSpam !== false)\n            writer.tag(6, WireType.Varint).bool(message.mangleSpam);\n        /* float bite_time = 7; */\n        if (message.biteTime !== 0)\n            writer.tag(7, WireType.Bit32).float(message.biteTime);\n        /* int32 min_combos_for_bite = 8; */\n        if (message.minCombosForBite !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minCombosForBite);\n        /* int32 berserk_bite_thresh = 9; */\n        if (message.berserkBiteThresh !== 0)\n            writer.tag(9, WireType.Varint).int32(message.berserkBiteThresh);\n        /* int32 berserk_ff_thresh = 18; */\n        if (message.berserkFfThresh !== 0)\n            writer.tag(18, WireType.Varint).int32(message.berserkFfThresh);\n        /* int32 rip_leeway = 19; */\n        if (message.ripLeeway !== 0)\n            writer.tag(19, WireType.Varint).int32(message.ripLeeway);\n        /* bool powerbear = 10; */\n        if (message.powerbear !== false)\n            writer.tag(10, WireType.Varint).bool(message.powerbear);\n        /* float min_roar_offset = 11; */\n        if (message.minRoarOffset !== 0)\n            writer.tag(11, WireType.Bit32).float(message.minRoarOffset);\n        /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12; */\n        if (message.biteModeType !== 0)\n            writer.tag(12, WireType.Varint).int32(message.biteModeType);\n        /* float hot_uptime = 13; */\n        if (message.hotUptime !== 0)\n            writer.tag(13, WireType.Bit32).float(message.hotUptime);\n        /* bool snek_weave = 14; */\n        if (message.snekWeave !== false)\n            writer.tag(14, WireType.Varint).bool(message.snekWeave);\n        /* bool flower_weave = 15; */\n        if (message.flowerWeave !== false)\n            writer.tag(15, WireType.Varint).bool(message.flowerWeave);\n        /* int32 raid_targets = 16; */\n        if (message.raidTargets !== 0)\n            writer.tag(16, WireType.Varint).int32(message.raidTargets);\n        /* bool manual_params = 17; */\n        if (message.manualParams !== false)\n            writer.tag(17, WireType.Varint).bool(message.manualParams);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"latency_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"prepop_ooc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"pre_pop_berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { latencyMs: 0, prepopOoc: false, assumeBleedActive: false, prePopBerserk: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* int32 latency_ms */ 2:\n                    message.latencyMs = reader.int32();\n                    break;\n                case /* bool prepop_ooc */ 3:\n                    message.prepopOoc = reader.bool();\n                    break;\n                case /* bool assume_bleed_active */ 4:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                case /* bool pre_pop_berserk */ 5:\n                    message.prePopBerserk = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 latency_ms = 2; */\n        if (message.latencyMs !== 0)\n            writer.tag(2, WireType.Varint).int32(message.latencyMs);\n        /* bool prepop_ooc = 3; */\n        if (message.prepopOoc !== false)\n            writer.tag(3, WireType.Varint).bool(message.prepopOoc);\n        /* bool assume_bleed_active = 4; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(4, WireType.Varint).bool(message.assumeBleedActive);\n        /* bool pre_pop_berserk = 5; */\n        if (message.prePopBerserk !== false)\n            writer.tag(5, WireType.Varint).bool(message.prePopBerserk);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralTankDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Rotation rotation */ 1:\n                    message.rotation = FeralTankDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralTankDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"lacerate_time\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, lacerateTime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* double lacerate_time */ 3:\n                    message.lacerateTime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* double lacerate_time = 3; */\n        if (message.lacerateTime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.lacerateTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid$Type extends MessageType<RestorationDruid> {\n    constructor() {\n        super(\"proto.RestorationDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RestorationDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid>): RestorationDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid): RestorationDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationDruid.Rotation rotation */ 1:\n                    message.rotation = RestorationDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RestorationDruid.Options options */ 3:\n                    message.options = RestorationDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            RestorationDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationDruid.Options options = 3; */\n        if (message.options)\n            RestorationDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid\n */\nexport const RestorationDruid = new RestorationDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Rotation$Type extends MessageType<RestorationDruid_Rotation> {\n    constructor() {\n        super(\"proto.RestorationDruid.Rotation\", []);\n    }\n    create(value?: PartialMessage<RestorationDruid_Rotation>): RestorationDruid_Rotation {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Rotation): RestorationDruid_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RestorationDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Rotation\n */\nexport const RestorationDruid_Rotation = new RestorationDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Options$Type extends MessageType<RestorationDruid_Options> {\n    constructor() {\n        super(\"proto.RestorationDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid_Options>): RestorationDruid_Options {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Options): RestorationDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Options\n */\nexport const RestorationDruid_Options = new RestorationDruid_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ItemSlot } from \"./common\";\nimport { ItemSpec } from \"./common\";\nimport { PseudoStat } from \"./common\";\nimport { Stat } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { SimDatabase } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { APLRotation } from \"./apl\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { TankDeathknight } from \"./deathknight\";\nimport { Deathknight } from \"./deathknight\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { Warrior } from \"./warrior\";\nimport { Warlock } from \"./warlock\";\nimport { RestorationShaman } from \"./shaman\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { Rogue } from \"./rogue\";\nimport { SmitePriest } from \"./priest\";\nimport { ShadowPriest } from \"./priest\";\nimport { HealingPriest } from \"./priest\";\nimport { HolyPaladin } from \"./paladin\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { Mage } from \"./mage\";\nimport { Hunter } from \"./hunter\";\nimport { RestorationDruid } from \"./druid\";\nimport { FeralTankDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { IndividualBuffs } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 16;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats = 36;\n     */\n    bonusStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 15;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 6;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 22;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"feralTankDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralTankDruid feral_tank_druid = 26;\n         */\n        feralTankDruid: FeralTankDruid;\n    } | {\n        oneofKind: \"restorationDruid\";\n        /**\n         * @generated from protobuf field: proto.RestorationDruid restoration_druid = 37;\n         */\n        restorationDruid: RestorationDruid;\n    } | {\n        oneofKind: \"hunter\";\n        /**\n         * @generated from protobuf field: proto.Hunter hunter = 7;\n         */\n        hunter: Hunter;\n    } | {\n        oneofKind: \"mage\";\n        /**\n         * @generated from protobuf field: proto.Mage mage = 8;\n         */\n        mage: Mage;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 9;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 25;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"holyPaladin\";\n        /**\n         * @generated from protobuf field: proto.HolyPaladin holy_paladin = 38;\n         */\n        holyPaladin: HolyPaladin;\n    } | {\n        oneofKind: \"healingPriest\";\n        /**\n         * @generated from protobuf field: proto.HealingPriest healing_priest = 34;\n         */\n        healingPriest: HealingPriest;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 10;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"smitePriest\";\n        /**\n         * @generated from protobuf field: proto.SmitePriest smite_priest = 20;\n         */\n        smitePriest: SmitePriest;\n    } | {\n        oneofKind: \"rogue\";\n        /**\n         * @generated from protobuf field: proto.Rogue rogue = 11;\n         */\n        rogue: Rogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 12;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 18;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"restorationShaman\";\n        /**\n         * @generated from protobuf field: proto.RestorationShaman restoration_shaman = 39;\n         */\n        restorationShaman: RestorationShaman;\n    } | {\n        oneofKind: \"warlock\";\n        /**\n         * @generated from protobuf field: proto.Warlock warlock = 13;\n         */\n        warlock: Warlock;\n    } | {\n        oneofKind: \"warrior\";\n        /**\n         * @generated from protobuf field: proto.Warrior warrior = 14;\n         */\n        warrior: Warrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 21;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: \"deathknight\";\n        /**\n         * @generated from protobuf field: proto.Deathknight deathknight = 31;\n         */\n        deathknight: Deathknight;\n    } | {\n        oneofKind: \"tankDeathknight\";\n        /**\n         * @generated from protobuf field: proto.TankDeathknight tank_deathknight = 32;\n         */\n        tankDeathknight: TankDeathknight;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Talents in wowhead format, e.g. '01102123133-12312312-'\n     *\n     * @generated from protobuf field: string talents_string = 17;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 28;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 29;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 30;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 19;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: proto.APLRotation rotation = 40;\n     */\n    rotation?: APLRotation;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 23;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 33;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 27;\n     */\n    healingModel?: HealingModel;\n    /**\n     * Items/enchants/gems/etc to include in the database.\n     *\n     * @generated from protobuf field: proto.SimDatabase database = 35;\n     */\n    database?: SimDatabase;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * The number of parties in the raid who participate in the sim, e.g.\n     * 10-man vs 25-man raids. The remaining parties are unused but can hold\n     * bench players.\n     *\n     * If this value is 0, all parties are included.\n     *\n     * @generated from protobuf field: int32 num_active_parties = 2;\n     */\n    numActiveParties: number;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 7;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 4;\n     */\n    tanks: RaidTarget[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n    /**\n     * Extra fake players to add. Currently only used by healing sims.\n     *\n     * @generated from protobuf field: int32 target_dummies = 6;\n     */\n    targetDummies: number;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool save_all_values = 7;\n     */\n    saveAllValues: boolean; // Only used internally.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to this target by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to this target by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n    /**\n     * Total healing done to this target by this action.\n     *\n     * @generated from protobuf field: double healing = 11;\n     */\n    healing: number;\n    /**\n     * Total shielding done to this target by this action.\n     *\n     * @generated from protobuf field: double shielding = 13;\n     */\n    shielding: number;\n    /**\n     * Total time spent casting this action, in milliseconds, either from hard casts, GCD, or channeling.\n     *\n     * @generated from protobuf field: double cast_time_ms = 14;\n     */\n    castTimeMs: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 maxSeed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 minSeed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n    /**\n     * @generated from protobuf field: repeated double all_values = 8;\n     */\n    allValues: number[];\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dpasp = 16;\n     */\n    dpasp?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tmi = 17;\n     */\n    tmi?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 14;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tto = 15;\n     */\n    tto?: DistributionMetrics; // Time To OOM, in seconds.\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: proto.UnitStats base_stats = 6;\n     */\n    baseStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats gear_stats = 1;\n     */\n    gearStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats talents_stats = 7;\n     */\n    talentsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats buffs_stats = 8;\n     */\n    buffsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats consumes_stats = 9;\n     */\n    consumesStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats final_stats = 2;\n     */\n    finalStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: repeated proto.ActionID cooldowns = 5;\n     */\n    cooldowns: ActionID[];\n    /**\n     * @generated from protobuf field: repeated proto.ActionID spells = 10;\n     */\n    spells: ActionID[];\n    /**\n     * @generated from protobuf field: repeated proto.ActionID auras = 11;\n     */\n    auras: ActionID[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 8;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.PseudoStat pseudo_stats_to_weigh = 10;\n     */\n    pseudoStatsToWeigh: PseudoStat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues hps = 4;\n     */\n    hps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: proto.UnitStats weights = 1;\n     */\n    weights?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats weights_stdev = 2;\n     */\n    weightsStdev?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values = 3;\n     */\n    epValues?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values_stdev = 4;\n     */\n    epValuesStdev?: UnitStats;\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * @generated from protobuf field: double hps = 9;\n     */\n    hps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n    /**\n     * @generated from protobuf field: proto.BulkSimResult final_bulk_result = 10;\n     */\n    finalBulkResult?: BulkSimResult;\n}\n/**\n * RPC: BulkSim\n *\n * @generated from protobuf message proto.BulkSimRequest\n */\nexport interface BulkSimRequest {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest base_settings = 1;\n     */\n    baseSettings?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.BulkSettings bulk_settings = 2;\n     */\n    bulkSettings?: BulkSettings;\n}\n/**\n * @generated from protobuf message proto.BulkSettings\n */\nexport interface BulkSettings {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n    /**\n     * @generated from protobuf field: bool combinations = 2;\n     */\n    combinations: boolean;\n    /**\n     * @generated from protobuf field: bool fast_mode = 3;\n     */\n    fastMode: boolean; // Used to run with less iterations to start and slowly increase to weed out items faster.\n    /**\n     * Use current enchant on the slot if not specified by the ItemSpec.\n     * Only works when replacement item is valid target for enchant.\n     *\n     * @generated from protobuf field: bool auto_enchant = 4;\n     */\n    autoEnchant: boolean;\n    /**\n     * Currently not used.\n     * Used to fill out gem slots that are not filled in the ItemSpec\n     *\n     * @generated from protobuf field: bool auto_gem = 5;\n     */\n    autoGem: boolean;\n    /**\n     * @generated from protobuf field: int32 default_red_gem = 6;\n     */\n    defaultRedGem: number;\n    /**\n     * @generated from protobuf field: int32 default_blue_gem = 7;\n     */\n    defaultBlueGem: number;\n    /**\n     * @generated from protobuf field: int32 default_yellow_gem = 8;\n     */\n    defaultYellowGem: number;\n    /**\n     * @generated from protobuf field: int32 default_meta_gem = 9;\n     */\n    defaultMetaGem: number;\n    /**\n     * @generated from protobuf field: bool ensure_meta_req_met = 10;\n     */\n    ensureMetaReqMet: boolean; // ensures that meta requirements are met when auto-gemming.\n    /**\n     * Number of iterations per combo.\n     * If set to 0 the sim core decides the optimal iterations.\n     *\n     * @generated from protobuf field: int32 iterations_per_combo = 11;\n     */\n    iterationsPerCombo: number;\n}\n/**\n * @generated from protobuf message proto.BulkSimResult\n */\nexport interface BulkSimResult {\n    /**\n     * @generated from protobuf field: repeated proto.BulkComboResult results = 1;\n     */\n    results: BulkComboResult[];\n    /**\n     * @generated from protobuf field: proto.BulkComboResult equipped_gear_result = 2;\n     */\n    equippedGearResult?: BulkComboResult;\n    /**\n     * @generated from protobuf field: string error_result = 3;\n     */\n    errorResult: string; // only set if sim failed.\n}\n/**\n * @generated from protobuf message proto.BulkComboResult\n */\nexport interface BulkComboResult {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpecWithSlot items_added = 1;\n     */\n    itemsAdded: ItemSpecWithSlot[];\n    /**\n     * @generated from protobuf field: proto.UnitMetrics unit_metrics = 2;\n     */\n    unitMetrics?: UnitMetrics;\n}\n/**\n * @generated from protobuf message proto.ItemSpecWithSlot\n */\nexport interface ItemSpecWithSlot {\n    /**\n     * @generated from protobuf field: proto.ItemSpec item = 1;\n     */\n    item?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSlot slot = 2;\n     */\n    slot: ItemSlot;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 16, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 36, name: \"bonus_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 15, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 6, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 22, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 26, name: \"feral_tank_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralTankDruid },\n            { no: 37, name: \"restoration_druid\", kind: \"message\", oneof: \"spec\", T: () => RestorationDruid },\n            { no: 7, name: \"hunter\", kind: \"message\", oneof: \"spec\", T: () => Hunter },\n            { no: 8, name: \"mage\", kind: \"message\", oneof: \"spec\", T: () => Mage },\n            { no: 9, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 25, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 38, name: \"holy_paladin\", kind: \"message\", oneof: \"spec\", T: () => HolyPaladin },\n            { no: 34, name: \"healing_priest\", kind: \"message\", oneof: \"spec\", T: () => HealingPriest },\n            { no: 10, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 20, name: \"smite_priest\", kind: \"message\", oneof: \"spec\", T: () => SmitePriest },\n            { no: 11, name: \"rogue\", kind: \"message\", oneof: \"spec\", T: () => Rogue },\n            { no: 12, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 18, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 39, name: \"restoration_shaman\", kind: \"message\", oneof: \"spec\", T: () => RestorationShaman },\n            { no: 13, name: \"warlock\", kind: \"message\", oneof: \"spec\", T: () => Warlock },\n            { no: 14, name: \"warrior\", kind: \"message\", oneof: \"spec\", T: () => Warrior },\n            { no: 21, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 31, name: \"deathknight\", kind: \"message\", oneof: \"spec\", T: () => Deathknight },\n            { no: 32, name: \"tank_deathknight\", kind: \"message\", oneof: \"spec\", T: () => TankDeathknight },\n            { no: 17, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 28, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 29, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 30, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 19, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 40, name: \"rotation\", kind: \"message\", T: () => APLRotation },\n            { no: 23, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 27, name: \"healing_model\", kind: \"message\", T: () => HealingModel },\n            { no: 35, name: \"database\", kind: \"message\", T: () => SimDatabase }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, class: 0, spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 16:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.UnitStats bonus_stats */ 36:\n                    message.bonusStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStats);\n                    break;\n                case /* proto.IndividualBuffs buffs */ 15:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 6:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 22:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.FeralTankDruid feral_tank_druid */ 26:\n                    message.spec = {\n                        oneofKind: \"feralTankDruid\",\n                        feralTankDruid: FeralTankDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralTankDruid)\n                    };\n                    break;\n                case /* proto.RestorationDruid restoration_druid */ 37:\n                    message.spec = {\n                        oneofKind: \"restorationDruid\",\n                        restorationDruid: RestorationDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationDruid)\n                    };\n                    break;\n                case /* proto.Hunter hunter */ 7:\n                    message.spec = {\n                        oneofKind: \"hunter\",\n                        hunter: Hunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).hunter)\n                    };\n                    break;\n                case /* proto.Mage mage */ 8:\n                    message.spec = {\n                        oneofKind: \"mage\",\n                        mage: Mage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).mage)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 9:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 25:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.HolyPaladin holy_paladin */ 38:\n                    message.spec = {\n                        oneofKind: \"holyPaladin\",\n                        holyPaladin: HolyPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).holyPaladin)\n                    };\n                    break;\n                case /* proto.HealingPriest healing_priest */ 34:\n                    message.spec = {\n                        oneofKind: \"healingPriest\",\n                        healingPriest: HealingPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).healingPriest)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 10:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.SmitePriest smite_priest */ 20:\n                    message.spec = {\n                        oneofKind: \"smitePriest\",\n                        smitePriest: SmitePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).smitePriest)\n                    };\n                    break;\n                case /* proto.Rogue rogue */ 11:\n                    message.spec = {\n                        oneofKind: \"rogue\",\n                        rogue: Rogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).rogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 12:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 18:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.RestorationShaman restoration_shaman */ 39:\n                    message.spec = {\n                        oneofKind: \"restorationShaman\",\n                        restorationShaman: RestorationShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationShaman)\n                    };\n                    break;\n                case /* proto.Warlock warlock */ 13:\n                    message.spec = {\n                        oneofKind: \"warlock\",\n                        warlock: Warlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warlock)\n                    };\n                    break;\n                case /* proto.Warrior warrior */ 14:\n                    message.spec = {\n                        oneofKind: \"warrior\",\n                        warrior: Warrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 21:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* proto.Deathknight deathknight */ 31:\n                    message.spec = {\n                        oneofKind: \"deathknight\",\n                        deathknight: Deathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).deathknight)\n                    };\n                    break;\n                case /* proto.TankDeathknight tank_deathknight */ 32:\n                    message.spec = {\n                        oneofKind: \"tankDeathknight\",\n                        tankDeathknight: TankDeathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).tankDeathknight)\n                    };\n                    break;\n                case /* string talents_string */ 17:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 28:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 29:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 30:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 19:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* proto.APLRotation rotation */ 40:\n                    message.rotation = APLRotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* bool in_front_of_target */ 23:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 33:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 27:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                case /* proto.SimDatabase database */ 35:\n                    message.database = SimDatabase.internalBinaryRead(reader, reader.uint32(), options, message.database);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 16; */\n        if (message.name !== \"\")\n            writer.tag(16, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats = 36; */\n        if (message.bonusStats)\n            UnitStats.internalBinaryWrite(message.bonusStats, writer.tag(36, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs buffs = 15; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 6; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 22; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid feral_tank_druid = 26; */\n        if (message.spec.oneofKind === \"feralTankDruid\")\n            FeralTankDruid.internalBinaryWrite(message.spec.feralTankDruid, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationDruid restoration_druid = 37; */\n        if (message.spec.oneofKind === \"restorationDruid\")\n            RestorationDruid.internalBinaryWrite(message.spec.restorationDruid, writer.tag(37, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter hunter = 7; */\n        if (message.spec.oneofKind === \"hunter\")\n            Hunter.internalBinaryWrite(message.spec.hunter, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage mage = 8; */\n        if (message.spec.oneofKind === \"mage\")\n            Mage.internalBinaryWrite(message.spec.mage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 9; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 25; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPaladin holy_paladin = 38; */\n        if (message.spec.oneofKind === \"holyPaladin\")\n            HolyPaladin.internalBinaryWrite(message.spec.holyPaladin, writer.tag(38, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest healing_priest = 34; */\n        if (message.spec.oneofKind === \"healingPriest\")\n            HealingPriest.internalBinaryWrite(message.spec.healingPriest, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 10; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest smite_priest = 20; */\n        if (message.spec.oneofKind === \"smitePriest\")\n            SmitePriest.internalBinaryWrite(message.spec.smitePriest, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue rogue = 11; */\n        if (message.spec.oneofKind === \"rogue\")\n            Rogue.internalBinaryWrite(message.spec.rogue, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 12; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 18; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationShaman restoration_shaman = 39; */\n        if (message.spec.oneofKind === \"restorationShaman\")\n            RestorationShaman.internalBinaryWrite(message.spec.restorationShaman, writer.tag(39, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock warlock = 13; */\n        if (message.spec.oneofKind === \"warlock\")\n            Warlock.internalBinaryWrite(message.spec.warlock, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior warrior = 14; */\n        if (message.spec.oneofKind === \"warrior\")\n            Warrior.internalBinaryWrite(message.spec.warrior, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 21; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight deathknight = 31; */\n        if (message.spec.oneofKind === \"deathknight\")\n            Deathknight.internalBinaryWrite(message.spec.deathknight, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight tank_deathknight = 32; */\n        if (message.spec.oneofKind === \"tankDeathknight\")\n            TankDeathknight.internalBinaryWrite(message.spec.tankDeathknight, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* string talents_string = 17; */\n        if (message.talentsString !== \"\")\n            writer.tag(17, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 28; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 29; */\n        if (message.profession1 !== 0)\n            writer.tag(29, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 30; */\n        if (message.profession2 !== 0)\n            writer.tag(30, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 19; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLRotation rotation = 40; */\n        if (message.rotation)\n            APLRotation.internalBinaryWrite(message.rotation, writer.tag(40, WireType.LengthDelimited).fork(), options).join();\n        /* bool in_front_of_target = 23; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(23, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 33; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(33, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 27; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimDatabase database = 35; */\n        if (message.database)\n            SimDatabase.internalBinaryWrite(message.database, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"num_active_parties\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], numActiveParties: 0, tanks: [], staggerStormstrikes: false, targetDummies: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* int32 num_active_parties */ 2:\n                    message.numActiveParties = reader.int32();\n                    break;\n                case /* proto.RaidBuffs buffs */ 7:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 4:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                case /* int32 target_dummies */ 6:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 num_active_parties = 2; */\n        if (message.numActiveParties !== 0)\n            writer.tag(2, WireType.Varint).int32(message.numActiveParties);\n        /* proto.RaidBuffs buffs = 7; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        /* int32 target_dummies = 6; */\n        if (message.targetDummies !== 0)\n            writer.tag(6, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"save_all_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false, saveAllValues: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                case /* bool save_all_values */ 7:\n                    message.saveAllValues = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        /* bool save_all_values = 7; */\n        if (message.saveAllValues !== false)\n            writer.tag(7, WireType.Varint).bool(message.saveAllValues);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"healing\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"shielding\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"cast_time_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0, healing: 0, shielding: 0, castTimeMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                case /* double healing */ 11:\n                    message.healing = reader.double();\n                    break;\n                case /* double shielding */ 13:\n                    message.shielding = reader.double();\n                    break;\n                case /* double cast_time_ms */ 14:\n                    message.castTimeMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        /* double healing = 11; */\n        if (message.healing !== 0)\n            writer.tag(11, WireType.Bit64).double(message.healing);\n        /* double shielding = 13; */\n        if (message.shielding !== 0)\n            writer.tag(13, WireType.Bit64).double(message.shielding);\n        /* double cast_time_ms = 14; */\n        if (message.castTimeMs !== 0)\n            writer.tag(14, WireType.Bit64).double(message.castTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"maxSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"minSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } },\n            { no: 8, name: \"all_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {}, allValues: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 maxSeed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 minSeed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                case /* repeated double all_values */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.allValues.push(reader.double());\n                    else\n                        message.allValues.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 maxSeed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 minSeed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        /* repeated double all_values = 8; */\n        if (message.allValues.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.allValues.length; i++)\n                writer.double(message.allValues[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 16, name: \"dpasp\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 17, name: \"tmi\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 14, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 15, name: \"tto\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics dpasp */ 16:\n                    message.dpasp = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dpasp);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.DistributionMetrics tmi */ 17:\n                    message.tmi = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tmi);\n                    break;\n                case /* proto.DistributionMetrics hps */ 14:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.DistributionMetrics tto */ 15:\n                    message.tto = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tto);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dpasp = 16; */\n        if (message.dpasp)\n            DistributionMetrics.internalBinaryWrite(message.dpasp, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tmi = 17; */\n        if (message.tmi)\n            DistributionMetrics.internalBinaryWrite(message.tmi, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 14; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tto = 15; */\n        if (message.tto)\n            DistributionMetrics.internalBinaryWrite(message.tto, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 1, name: \"gear_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 7, name: \"talents_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 8, name: \"buffs_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 9, name: \"consumes_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"final_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 5, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID },\n            { no: 10, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID },\n            { no: 11, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { sets: [], cooldowns: [], spells: [], auras: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats base_stats */ 6:\n                    message.baseStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.baseStats);\n                    break;\n                case /* proto.UnitStats gear_stats */ 1:\n                    message.gearStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.gearStats);\n                    break;\n                case /* proto.UnitStats talents_stats */ 7:\n                    message.talentsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.talentsStats);\n                    break;\n                case /* proto.UnitStats buffs_stats */ 8:\n                    message.buffsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.buffsStats);\n                    break;\n                case /* proto.UnitStats consumes_stats */ 9:\n                    message.consumesStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.consumesStats);\n                    break;\n                case /* proto.UnitStats final_stats */ 2:\n                    message.finalStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.finalStats);\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* repeated proto.ActionID cooldowns */ 5:\n                    message.cooldowns.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ActionID spells */ 10:\n                    message.spells.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ActionID auras */ 11:\n                    message.auras.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats base_stats = 6; */\n        if (message.baseStats)\n            UnitStats.internalBinaryWrite(message.baseStats, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats gear_stats = 1; */\n        if (message.gearStats)\n            UnitStats.internalBinaryWrite(message.gearStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats talents_stats = 7; */\n        if (message.talentsStats)\n            UnitStats.internalBinaryWrite(message.talentsStats, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats buffs_stats = 8; */\n        if (message.buffsStats)\n            UnitStats.internalBinaryWrite(message.buffsStats, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats consumes_stats = 9; */\n        if (message.consumesStats)\n            UnitStats.internalBinaryWrite(message.consumesStats, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats final_stats = 2; */\n        if (message.finalStats)\n            UnitStats.internalBinaryWrite(message.finalStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID cooldowns = 5; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            ActionID.internalBinaryWrite(message.cooldowns[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID spells = 10; */\n        for (let i = 0; i < message.spells.length; i++)\n            ActionID.internalBinaryWrite(message.spells[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID auras = 11; */\n        for (let i = 0; i < message.auras.length; i++)\n            ActionID.internalBinaryWrite(message.auras[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 10, name: \"pseudo_stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.PseudoStat\", PseudoStat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], pseudoStatsToWeigh: [], epReferenceStat: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 8:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* repeated proto.PseudoStat pseudo_stats_to_weigh */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStatsToWeigh.push(reader.int32());\n                    else\n                        message.pseudoStatsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* repeated proto.PseudoStat pseudo_stats_to_weigh = 10; */\n        if (message.pseudoStatsToWeigh.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStatsToWeigh.length; i++)\n                writer.int32(message.pseudoStatsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 4, name: \"hps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues hps */ 4:\n                    message.hps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues hps = 4; */\n        if (message.hps)\n            StatWeightValues.internalBinaryWrite(message.hps, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"weights_stdev\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"ep_values\", kind: \"message\", T: () => UnitStats },\n            { no: 4, name: \"ep_values_stdev\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats weights */ 1:\n                    message.weights = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weights);\n                    break;\n                case /* proto.UnitStats weights_stdev */ 2:\n                    message.weightsStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weightsStdev);\n                    break;\n                case /* proto.UnitStats ep_values */ 3:\n                    message.epValues = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValues);\n                    break;\n                case /* proto.UnitStats ep_values_stdev */ 4:\n                    message.epValuesStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValuesStdev);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats weights = 1; */\n        if (message.weights)\n            UnitStats.internalBinaryWrite(message.weights, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats weights_stdev = 2; */\n        if (message.weightsStdev)\n            UnitStats.internalBinaryWrite(message.weightsStdev, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values = 3; */\n        if (message.epValues)\n            UnitStats.internalBinaryWrite(message.epValues, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values_stdev = 4; */\n        if (message.epValuesStdev)\n            UnitStats.internalBinaryWrite(message.epValuesStdev, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult },\n            { no: 10, name: \"final_bulk_result\", kind: \"message\", T: () => BulkSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0, hps: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* double hps */ 9:\n                    message.hps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                case /* proto.BulkSimResult final_bulk_result */ 10:\n                    message.finalBulkResult = BulkSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalBulkResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* double hps = 9; */\n        if (message.hps !== 0)\n            writer.tag(9, WireType.Bit64).double(message.hps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSimResult final_bulk_result = 10; */\n        if (message.finalBulkResult)\n            BulkSimResult.internalBinaryWrite(message.finalBulkResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimRequest$Type extends MessageType<BulkSimRequest> {\n    constructor() {\n        super(\"proto.BulkSimRequest\", [\n            { no: 1, name: \"base_settings\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"bulk_settings\", kind: \"message\", T: () => BulkSettings }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimRequest>): BulkSimRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimRequest): BulkSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest base_settings */ 1:\n                    message.baseSettings = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.baseSettings);\n                    break;\n                case /* proto.BulkSettings bulk_settings */ 2:\n                    message.bulkSettings = BulkSettings.internalBinaryRead(reader, reader.uint32(), options, message.bulkSettings);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest base_settings = 1; */\n        if (message.baseSettings)\n            RaidSimRequest.internalBinaryWrite(message.baseSettings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSettings bulk_settings = 2; */\n        if (message.bulkSettings)\n            BulkSettings.internalBinaryWrite(message.bulkSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimRequest\n */\nexport const BulkSimRequest = new BulkSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSettings$Type extends MessageType<BulkSettings> {\n    constructor() {\n        super(\"proto.BulkSettings\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec },\n            { no: 2, name: \"combinations\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"fast_mode\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"auto_enchant\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"auto_gem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"default_red_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"default_blue_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"default_yellow_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"default_meta_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"ensure_meta_req_met\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"iterations_per_combo\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSettings>): BulkSettings {\n        const message = { items: [], combinations: false, fastMode: false, autoEnchant: false, autoGem: false, defaultRedGem: 0, defaultBlueGem: 0, defaultYellowGem: 0, defaultMetaGem: 0, ensureMetaReqMet: false, iterationsPerCombo: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSettings): BulkSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool combinations */ 2:\n                    message.combinations = reader.bool();\n                    break;\n                case /* bool fast_mode */ 3:\n                    message.fastMode = reader.bool();\n                    break;\n                case /* bool auto_enchant */ 4:\n                    message.autoEnchant = reader.bool();\n                    break;\n                case /* bool auto_gem */ 5:\n                    message.autoGem = reader.bool();\n                    break;\n                case /* int32 default_red_gem */ 6:\n                    message.defaultRedGem = reader.int32();\n                    break;\n                case /* int32 default_blue_gem */ 7:\n                    message.defaultBlueGem = reader.int32();\n                    break;\n                case /* int32 default_yellow_gem */ 8:\n                    message.defaultYellowGem = reader.int32();\n                    break;\n                case /* int32 default_meta_gem */ 9:\n                    message.defaultMetaGem = reader.int32();\n                    break;\n                case /* bool ensure_meta_req_met */ 10:\n                    message.ensureMetaReqMet = reader.bool();\n                    break;\n                case /* int32 iterations_per_combo */ 11:\n                    message.iterationsPerCombo = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool combinations = 2; */\n        if (message.combinations !== false)\n            writer.tag(2, WireType.Varint).bool(message.combinations);\n        /* bool fast_mode = 3; */\n        if (message.fastMode !== false)\n            writer.tag(3, WireType.Varint).bool(message.fastMode);\n        /* bool auto_enchant = 4; */\n        if (message.autoEnchant !== false)\n            writer.tag(4, WireType.Varint).bool(message.autoEnchant);\n        /* bool auto_gem = 5; */\n        if (message.autoGem !== false)\n            writer.tag(5, WireType.Varint).bool(message.autoGem);\n        /* int32 default_red_gem = 6; */\n        if (message.defaultRedGem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.defaultRedGem);\n        /* int32 default_blue_gem = 7; */\n        if (message.defaultBlueGem !== 0)\n            writer.tag(7, WireType.Varint).int32(message.defaultBlueGem);\n        /* int32 default_yellow_gem = 8; */\n        if (message.defaultYellowGem !== 0)\n            writer.tag(8, WireType.Varint).int32(message.defaultYellowGem);\n        /* int32 default_meta_gem = 9; */\n        if (message.defaultMetaGem !== 0)\n            writer.tag(9, WireType.Varint).int32(message.defaultMetaGem);\n        /* bool ensure_meta_req_met = 10; */\n        if (message.ensureMetaReqMet !== false)\n            writer.tag(10, WireType.Varint).bool(message.ensureMetaReqMet);\n        /* int32 iterations_per_combo = 11; */\n        if (message.iterationsPerCombo !== 0)\n            writer.tag(11, WireType.Varint).int32(message.iterationsPerCombo);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSettings\n */\nexport const BulkSettings = new BulkSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimResult$Type extends MessageType<BulkSimResult> {\n    constructor() {\n        super(\"proto.BulkSimResult\", [\n            { no: 1, name: \"results\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkComboResult },\n            { no: 2, name: \"equipped_gear_result\", kind: \"message\", T: () => BulkComboResult },\n            { no: 3, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimResult>): BulkSimResult {\n        const message = { results: [], errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimResult): BulkSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BulkComboResult results */ 1:\n                    message.results.push(BulkComboResult.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BulkComboResult equipped_gear_result */ 2:\n                    message.equippedGearResult = BulkComboResult.internalBinaryRead(reader, reader.uint32(), options, message.equippedGearResult);\n                    break;\n                case /* string error_result */ 3:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BulkComboResult results = 1; */\n        for (let i = 0; i < message.results.length; i++)\n            BulkComboResult.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkComboResult equipped_gear_result = 2; */\n        if (message.equippedGearResult)\n            BulkComboResult.internalBinaryWrite(message.equippedGearResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 3; */\n        if (message.errorResult !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimResult\n */\nexport const BulkSimResult = new BulkSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkComboResult$Type extends MessageType<BulkComboResult> {\n    constructor() {\n        super(\"proto.BulkComboResult\", [\n            { no: 1, name: \"items_added\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpecWithSlot },\n            { no: 2, name: \"unit_metrics\", kind: \"message\", T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<BulkComboResult>): BulkComboResult {\n        const message = { itemsAdded: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkComboResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkComboResult): BulkComboResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpecWithSlot items_added */ 1:\n                    message.itemsAdded.push(ItemSpecWithSlot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.UnitMetrics unit_metrics */ 2:\n                    message.unitMetrics = UnitMetrics.internalBinaryRead(reader, reader.uint32(), options, message.unitMetrics);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkComboResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpecWithSlot items_added = 1; */\n        for (let i = 0; i < message.itemsAdded.length; i++)\n            ItemSpecWithSlot.internalBinaryWrite(message.itemsAdded[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitMetrics unit_metrics = 2; */\n        if (message.unitMetrics)\n            UnitMetrics.internalBinaryWrite(message.unitMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkComboResult\n */\nexport const BulkComboResult = new BulkComboResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpecWithSlot$Type extends MessageType<ItemSpecWithSlot> {\n    constructor() {\n        super(\"proto.ItemSpecWithSlot\", [\n            { no: 1, name: \"item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"slot\", kind: \"enum\", T: () => [\"proto.ItemSlot\", ItemSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpecWithSlot>): ItemSpecWithSlot {\n        const message = { slot: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpecWithSlot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpecWithSlot): ItemSpecWithSlot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec item */ 1:\n                    message.item = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.item);\n                    break;\n                case /* proto.ItemSlot slot */ 2:\n                    message.slot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpecWithSlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec item = 1; */\n        if (message.item)\n            ItemSpec.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSlot slot = 2; */\n        if (message.slot !== 0)\n            writer.tag(2, WireType.Varint).int32(message.slot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpecWithSlot\n */\nexport const ItemSpecWithSlot = new ItemSpecWithSlot$Type();\n","// @generated by protobuf-ts 2.0.4\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { Glyphs } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { Faction } from \"./common\";\nimport { EnchantType } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Class } from \"./common\";\nimport { ItemQuality } from \"./common\";\nimport { GemColor } from \"./common\";\nimport { RangedWeaponType } from \"./common\";\nimport { HandType } from \"./common\";\nimport { WeaponType } from \"./common\";\nimport { ArmorType } from \"./common\";\nimport { ItemType } from \"./common\";\nimport { PresetEncounter } from \"./common\";\n/**\n * Holds all WoW data for the UI.\n *\n * @generated from protobuf message proto.UIDatabase\n */\nexport interface UIDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.UIItem items = 1;\n     */\n    items: UIItem[];\n    /**\n     * @generated from protobuf field: repeated proto.UIEnchant enchants = 2;\n     */\n    enchants: UIEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.UIGem gems = 3;\n     */\n    gems: UIGem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 6;\n     */\n    encounters: PresetEncounter[];\n    /**\n     * @generated from protobuf field: repeated proto.UIZone zones = 8;\n     */\n    zones: UIZone[];\n    /**\n     * @generated from protobuf field: repeated proto.UINPC npcs = 9;\n     */\n    npcs: UINPC[];\n    /**\n     * Entities for which we just need a name/icon.\n     *\n     * @generated from protobuf field: repeated proto.IconData item_icons = 4;\n     */\n    itemIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.IconData spell_icons = 5;\n     */\n    spellIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.GlyphID glyph_ids = 7;\n     */\n    glyphIds: GlyphID[];\n}\n/**\n * @generated from protobuf message proto.UIZone\n */\nexport interface UIZone {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 3;\n     */\n    expansion: Expansion;\n}\n/**\n * @generated from protobuf message proto.UINPC\n */\nexport interface UINPC {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * Contains all information about an Item needed by the UI.\n * Generally this will include everything needed by the sim, plus some\n * additional data for displaying / filtering.\n *\n * @generated from protobuf message proto.UIItem\n */\nexport interface UIItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 5;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 6;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 7;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 8;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 9;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 10;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 11;\n     */\n    socketBonus: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 12;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 13;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 14;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 ilvl = 15;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: int32 phase = 16;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 17;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 18;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: bool heroic = 19;\n     */\n    heroic: boolean;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 20;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * Name of the item set to which this item belongs, if any.\n     *\n     * @generated from protobuf field: string set_name = 22;\n     */\n    setName: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 24;\n     */\n    expansion: Expansion;\n    /**\n     * @generated from protobuf field: repeated proto.UIItemSource sources = 23;\n     */\n    sources: UIItemSource[];\n}\n/**\n * @generated from protobuf message proto.UIItemSource\n */\nexport interface UIItemSource {\n    /**\n     * @generated from protobuf oneof: source\n     */\n    source: {\n        oneofKind: \"crafted\";\n        /**\n         * @generated from protobuf field: proto.CraftedSource crafted = 1;\n         */\n        crafted: CraftedSource;\n    } | {\n        oneofKind: \"drop\";\n        /**\n         * @generated from protobuf field: proto.DropSource drop = 2;\n         */\n        drop: DropSource;\n    } | {\n        oneofKind: \"quest\";\n        /**\n         * @generated from protobuf field: proto.QuestSource quest = 3;\n         */\n        quest: QuestSource;\n    } | {\n        oneofKind: \"soldBy\";\n        /**\n         * @generated from protobuf field: proto.SoldBySource sold_by = 4;\n         */\n        soldBy: SoldBySource;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message proto.CraftedSource\n */\nexport interface CraftedSource {\n    /**\n     * @generated from protobuf field: proto.Profession profession = 1;\n     */\n    profession: Profession;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * @generated from protobuf message proto.DropSource\n */\nexport interface DropSource {\n    /**\n     * @generated from protobuf field: proto.DungeonDifficulty difficulty = 1;\n     */\n    difficulty: DungeonDifficulty;\n    /**\n     * @generated from protobuf field: int32 npc_id = 2;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n    /**\n     * @generated from protobuf field: string other_name = 4;\n     */\n    otherName: string; // For drops in zones from things other than NPCs, e.g. \"Trash\"\n    /**\n     * @generated from protobuf field: string category = 5;\n     */\n    category: string; // For conditions/categories of drops, e.g. 'Hard Mode' or 'Titan Rune'\n}\n/**\n * @generated from protobuf message proto.QuestSource\n */\nexport interface QuestSource {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n}\n/**\n * @generated from protobuf message proto.SoldBySource\n */\nexport interface SoldBySource {\n    /**\n     * @generated from protobuf field: int32 npc_id = 1;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: string npc_name = 2;\n     */\n    npcName: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * @generated from protobuf message proto.UIEnchant\n */\nexport interface UIEnchant {\n    /**\n     * All enchants have an effect ID. Some also have an item ID, others have a spell ID,\n     * and yet others have both item and spell IDs. No single ID alone is enough to\n     * uniquely identify an enchant. Uniqueness requires either effect ID + slot, or\n     * effect ID + item/spell ID.\n     *\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number; // ID of the effect.\n    /**\n     * @generated from protobuf field: int32 item_id = 2;\n     */\n    itemId: number; // ID of the enchant \"item\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: int32 spell_id = 3;\n     */\n    spellId: number; // ID of the enchant \"spell\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: string name = 4;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 5;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 6;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: repeated proto.ItemType extra_types = 13;\n     */\n    extraTypes: ItemType[]; // Extra types for enchants that can go in multiple slots (like armor kits).\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 7;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 9;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 10;\n     */\n    phase: number;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 11;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 12;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.UIGem\n */\nexport interface UIGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: int32 phase = 6;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 7;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 8;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 9;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.IconData\n */\nexport interface IconData {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n}\n/**\n * @generated from protobuf message proto.GlyphID\n */\nexport interface GlyphID {\n    /**\n     * @generated from protobuf field: int32 item_id = 1;\n     */\n    itemId: number;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * @generated from protobuf message proto.DatabaseFilters\n */\nexport interface DatabaseFilters {\n    /**\n     * @generated from protobuf field: repeated proto.ArmorType armor_types = 1;\n     */\n    armorTypes: ArmorType[];\n    /**\n     * @generated from protobuf field: repeated proto.WeaponType weapon_types = 2;\n     */\n    weaponTypes: WeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.RangedWeaponType ranged_weapon_types = 16;\n     */\n    rangedWeaponTypes: RangedWeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.SourceFilterOption sources = 17;\n     */\n    sources: SourceFilterOption[];\n    /**\n     * @generated from protobuf field: repeated proto.RaidFilterOption raids = 18;\n     */\n    raids: RaidFilterOption[];\n    /**\n     * @generated from protobuf field: double min_mh_weapon_speed = 4;\n     */\n    minMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_mh_weapon_speed = 5;\n     */\n    maxMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_oh_weapon_speed = 9;\n     */\n    minOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_oh_weapon_speed = 10;\n     */\n    maxOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_ranged_weapon_speed = 14;\n     */\n    minRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_ranged_weapon_speed = 15;\n     */\n    maxRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: bool one_handed_weapons = 6;\n     */\n    oneHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool two_handed_weapons = 7;\n     */\n    twoHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool matching_gems_only = 8;\n     */\n    matchingGemsOnly: boolean;\n    /**\n     * Item IDs for favorited items.\n     *\n     * @generated from protobuf field: repeated int32 favorite_items = 11;\n     */\n    favoriteItems: number[];\n    /**\n     * Item IDs for favorited gems.\n     *\n     * @generated from protobuf field: repeated int32 favorite_gems = 12;\n     */\n    favoriteGems: number[];\n    /**\n     * Uniquely-identifying strings for favorited enchants.\n     *\n     * @generated from protobuf field: repeated string favorite_enchants = 13;\n     */\n    favoriteEnchants: string[];\n}\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_damage_metrics = 8;\n     */\n    showDamageMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_healing_metrics = 7;\n     */\n    showHealingMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: string language = 9;\n     */\n    language: string;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: proto.DatabaseFilters filters = 10;\n     */\n    filters?: DatabaseFilters;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 7;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: int32 target_dummies = 9;\n     */\n    targetDummies: number;\n    /**\n     * Deprecate after 2 months (on 2023/02/13)\n     *\n     * @generated from protobuf field: repeated double ep_weights = 6;\n     */\n    epWeights: number[];\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_weights_stats = 10;\n     */\n    epWeightsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated double ep_ratios = 11;\n     */\n    epRatios: number[];\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * Deprecate after 2 months (on 2023/02/13)\n     *\n     * @generated from protobuf field: repeated double bonus_stats = 2;\n     */\n    bonusStats: number[];\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats_stats = 3;\n     */\n    bonusStatsStats?: UnitStats;\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 6;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: string rotation_json = 8;\n     */\n    rotationJson: string;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf enum proto.Expansion\n */\nexport enum Expansion {\n    /**\n     * @generated from protobuf enum value: ExpansionUnknown = 0;\n     */\n    ExpansionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExpansionVanilla = 1;\n     */\n    ExpansionVanilla = 1,\n    /**\n     * @generated from protobuf enum value: ExpansionTbc = 2;\n     */\n    ExpansionTbc = 2,\n    /**\n     * @generated from protobuf enum value: ExpansionWotlk = 3;\n     */\n    ExpansionWotlk = 3\n}\n/**\n * @generated from protobuf enum proto.DungeonDifficulty\n */\nexport enum DungeonDifficulty {\n    /**\n     * @generated from protobuf enum value: DifficultyUnknown = 0;\n     */\n    DifficultyUnknown = 0,\n    /**\n     * @generated from protobuf enum value: DifficultyNormal = 1;\n     */\n    DifficultyNormal = 1,\n    /**\n     * @generated from protobuf enum value: DifficultyHeroic = 2;\n     */\n    DifficultyHeroic = 2,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10 = 3;\n     */\n    DifficultyRaid10 = 3,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10H = 4;\n     */\n    DifficultyRaid10H = 4,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25 = 5;\n     */\n    DifficultyRaid25 = 5,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25H = 6;\n     */\n    DifficultyRaid25H = 6\n}\n/**\n * @generated from protobuf enum proto.SourceFilterOption\n */\nexport enum SourceFilterOption {\n    /**\n     * @generated from protobuf enum value: SourceUnknown = 0;\n     */\n    SourceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SourceCrafting = 1;\n     */\n    SourceCrafting = 1,\n    /**\n     * @generated from protobuf enum value: SourceQuest = 2;\n     */\n    SourceQuest = 2,\n    /**\n     * @generated from protobuf enum value: SourceDungeon = 3;\n     */\n    SourceDungeon = 3,\n    /**\n     * @generated from protobuf enum value: SourceDungeonH = 4;\n     */\n    SourceDungeonH = 4,\n    /**\n     * @generated from protobuf enum value: SourceRaid10 = 5;\n     */\n    SourceRaid10 = 5,\n    /**\n     * @generated from protobuf enum value: SourceRaid10H = 6;\n     */\n    SourceRaid10H = 6,\n    /**\n     * @generated from protobuf enum value: SourceRaid25 = 7;\n     */\n    SourceRaid25 = 7,\n    /**\n     * @generated from protobuf enum value: SourceRaid25H = 8;\n     */\n    SourceRaid25H = 8\n}\n/**\n * @generated from protobuf enum proto.RaidFilterOption\n */\nexport enum RaidFilterOption {\n    /**\n     * @generated from protobuf enum value: RaidUnknown = 0;\n     */\n    RaidUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaidVanilla = 1;\n     */\n    RaidVanilla = 1,\n    /**\n     * @generated from protobuf enum value: RaidTbc = 2;\n     */\n    RaidTbc = 2,\n    /**\n     * @generated from protobuf enum value: RaidNaxxramas = 3;\n     */\n    RaidNaxxramas = 3,\n    /**\n     * @generated from protobuf enum value: RaidEyeOfEternity = 4;\n     */\n    RaidEyeOfEternity = 4,\n    /**\n     * @generated from protobuf enum value: RaidObsidianSanctum = 5;\n     */\n    RaidObsidianSanctum = 5,\n    /**\n     * @generated from protobuf enum value: RaidVaultOfArchavon = 6;\n     */\n    RaidVaultOfArchavon = 6,\n    /**\n     * @generated from protobuf enum value: RaidUlduar = 7;\n     */\n    RaidUlduar = 7,\n    /**\n     * @generated from protobuf enum value: RaidTrialOfTheCrusader = 8;\n     */\n    RaidTrialOfTheCrusader = 8,\n    /**\n     * @generated from protobuf enum value: RaidOnyxiasLair = 9;\n     */\n    RaidOnyxiasLair = 9,\n    /**\n     * @generated from protobuf enum value: RaidIcecrownCitadel = 10;\n     */\n    RaidIcecrownCitadel = 10,\n    /**\n     * @generated from protobuf enum value: RaidRubySanctum = 11;\n     */\n    RaidRubySanctum = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIDatabase$Type extends MessageType<UIDatabase> {\n    constructor() {\n        super(\"proto.UIDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItem },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIGem },\n            { no: 6, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter },\n            { no: 8, name: \"zones\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIZone },\n            { no: 9, name: \"npcs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UINPC },\n            { no: 4, name: \"item_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 5, name: \"spell_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 7, name: \"glyph_ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => GlyphID }\n        ]);\n    }\n    create(value?: PartialMessage<UIDatabase>): UIDatabase {\n        const message = { items: [], enchants: [], gems: [], encounters: [], zones: [], npcs: [], itemIcons: [], spellIcons: [], glyphIds: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDatabase): UIDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UIItem items */ 1:\n                    message.items.push(UIItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIEnchant enchants */ 2:\n                    message.enchants.push(UIEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIGem gems */ 3:\n                    message.gems.push(UIGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 6:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIZone zones */ 8:\n                    message.zones.push(UIZone.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UINPC npcs */ 9:\n                    message.npcs.push(UINPC.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData item_icons */ 4:\n                    message.itemIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData spell_icons */ 5:\n                    message.spellIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.GlyphID glyph_ids */ 7:\n                    message.glyphIds.push(GlyphID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UIItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            UIItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            UIEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            UIGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 6; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIZone zones = 8; */\n        for (let i = 0; i < message.zones.length; i++)\n            UIZone.internalBinaryWrite(message.zones[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UINPC npcs = 9; */\n        for (let i = 0; i < message.npcs.length; i++)\n            UINPC.internalBinaryWrite(message.npcs[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData item_icons = 4; */\n        for (let i = 0; i < message.itemIcons.length; i++)\n            IconData.internalBinaryWrite(message.itemIcons[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData spell_icons = 5; */\n        for (let i = 0; i < message.spellIcons.length; i++)\n            IconData.internalBinaryWrite(message.spellIcons[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.GlyphID glyph_ids = 7; */\n        for (let i = 0; i < message.glyphIds.length; i++)\n            GlyphID.internalBinaryWrite(message.glyphIds[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIDatabase\n */\nexport const UIDatabase = new UIDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIZone$Type extends MessageType<UIZone> {\n    constructor() {\n        super(\"proto.UIZone\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] }\n        ]);\n    }\n    create(value?: PartialMessage<UIZone>): UIZone {\n        const message = { id: 0, name: \"\", expansion: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIZone>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIZone): UIZone {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 3:\n                    message.expansion = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIZone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.Expansion expansion = 3; */\n        if (message.expansion !== 0)\n            writer.tag(3, WireType.Varint).int32(message.expansion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIZone\n */\nexport const UIZone = new UIZone$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UINPC$Type extends MessageType<UINPC> {\n    constructor() {\n        super(\"proto.UINPC\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UINPC>): UINPC {\n        const message = { id: 0, name: \"\", zoneId: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UINPC>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UINPC): UINPC {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UINPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UINPC\n */\nexport const UINPC = new UINPC$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItem$Type extends MessageType<UIItem> {\n    constructor() {\n        super(\"proto.UIItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 5, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 6, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 7, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 8, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 9, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 11, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 18, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 24, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] },\n            { no: 23, name: \"sources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItemSource }\n        ]);\n    }\n    create(value?: PartialMessage<UIItem>): UIItem {\n        const message = { id: 0, name: \"\", icon: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, ilvl: 0, phase: 0, quality: 0, unique: false, heroic: false, classAllowlist: [], requiredProfession: 0, setName: \"\", expansion: 0, sources: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItem): UIItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 5:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 6:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 7:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 8:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 12:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 13:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 14:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 ilvl */ 15:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* int32 phase */ 16:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 17:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 18:\n                    message.unique = reader.bool();\n                    break;\n                case /* bool heroic */ 19:\n                    message.heroic = reader.bool();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 20:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* string set_name */ 22:\n                    message.setName = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 24:\n                    message.expansion = reader.int32();\n                    break;\n                case /* repeated proto.UIItemSource sources */ 23:\n                    message.sources.push(UIItemSource.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 5; */\n        if (message.armorType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 6; */\n        if (message.weaponType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 7; */\n        if (message.handType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 8; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 9; */\n        if (message.stats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 10; */\n        if (message.gemSockets.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 11; */\n        if (message.socketBonus.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 12; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 13; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 14; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 ilvl = 15; */\n        if (message.ilvl !== 0)\n            writer.tag(15, WireType.Varint).int32(message.ilvl);\n        /* int32 phase = 16; */\n        if (message.phase !== 0)\n            writer.tag(16, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 17; */\n        if (message.quality !== 0)\n            writer.tag(17, WireType.Varint).int32(message.quality);\n        /* bool unique = 18; */\n        if (message.unique !== false)\n            writer.tag(18, WireType.Varint).bool(message.unique);\n        /* bool heroic = 19; */\n        if (message.heroic !== false)\n            writer.tag(19, WireType.Varint).bool(message.heroic);\n        /* repeated proto.Class class_allowlist = 20; */\n        if (message.classAllowlist.length) {\n            writer.tag(20, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* string set_name = 22; */\n        if (message.setName !== \"\")\n            writer.tag(22, WireType.LengthDelimited).string(message.setName);\n        /* proto.Expansion expansion = 24; */\n        if (message.expansion !== 0)\n            writer.tag(24, WireType.Varint).int32(message.expansion);\n        /* repeated proto.UIItemSource sources = 23; */\n        for (let i = 0; i < message.sources.length; i++)\n            UIItemSource.internalBinaryWrite(message.sources[i], writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItem\n */\nexport const UIItem = new UIItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItemSource$Type extends MessageType<UIItemSource> {\n    constructor() {\n        super(\"proto.UIItemSource\", [\n            { no: 1, name: \"crafted\", kind: \"message\", oneof: \"source\", T: () => CraftedSource },\n            { no: 2, name: \"drop\", kind: \"message\", oneof: \"source\", T: () => DropSource },\n            { no: 3, name: \"quest\", kind: \"message\", oneof: \"source\", T: () => QuestSource },\n            { no: 4, name: \"sold_by\", kind: \"message\", oneof: \"source\", T: () => SoldBySource }\n        ]);\n    }\n    create(value?: PartialMessage<UIItemSource>): UIItemSource {\n        const message = { source: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItemSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItemSource): UIItemSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.CraftedSource crafted */ 1:\n                    message.source = {\n                        oneofKind: \"crafted\",\n                        crafted: CraftedSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).crafted)\n                    };\n                    break;\n                case /* proto.DropSource drop */ 2:\n                    message.source = {\n                        oneofKind: \"drop\",\n                        drop: DropSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).drop)\n                    };\n                    break;\n                case /* proto.QuestSource quest */ 3:\n                    message.source = {\n                        oneofKind: \"quest\",\n                        quest: QuestSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).quest)\n                    };\n                    break;\n                case /* proto.SoldBySource sold_by */ 4:\n                    message.source = {\n                        oneofKind: \"soldBy\",\n                        soldBy: SoldBySource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).soldBy)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItemSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.CraftedSource crafted = 1; */\n        if (message.source.oneofKind === \"crafted\")\n            CraftedSource.internalBinaryWrite(message.source.crafted, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DropSource drop = 2; */\n        if (message.source.oneofKind === \"drop\")\n            DropSource.internalBinaryWrite(message.source.drop, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.QuestSource quest = 3; */\n        if (message.source.oneofKind === \"quest\")\n            QuestSource.internalBinaryWrite(message.source.quest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SoldBySource sold_by = 4; */\n        if (message.source.oneofKind === \"soldBy\")\n            SoldBySource.internalBinaryWrite(message.source.soldBy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItemSource\n */\nexport const UIItemSource = new UIItemSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CraftedSource$Type extends MessageType<CraftedSource> {\n    constructor() {\n        super(\"proto.CraftedSource\", [\n            { no: 1, name: \"profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CraftedSource>): CraftedSource {\n        const message = { profession: 0, spellId: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CraftedSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CraftedSource): CraftedSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Profession profession */ 1:\n                    message.profession = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CraftedSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Profession profession = 1; */\n        if (message.profession !== 0)\n            writer.tag(1, WireType.Varint).int32(message.profession);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CraftedSource\n */\nexport const CraftedSource = new CraftedSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DropSource$Type extends MessageType<DropSource> {\n    constructor() {\n        super(\"proto.DropSource\", [\n            { no: 1, name: \"difficulty\", kind: \"enum\", T: () => [\"proto.DungeonDifficulty\", DungeonDifficulty] },\n            { no: 2, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"other_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"category\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DropSource>): DropSource {\n        const message = { difficulty: 0, npcId: 0, zoneId: 0, otherName: \"\", category: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DropSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropSource): DropSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DungeonDifficulty difficulty */ 1:\n                    message.difficulty = reader.int32();\n                    break;\n                case /* int32 npc_id */ 2:\n                    message.npcId = reader.int32();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                case /* string other_name */ 4:\n                    message.otherName = reader.string();\n                    break;\n                case /* string category */ 5:\n                    message.category = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DropSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DungeonDifficulty difficulty = 1; */\n        if (message.difficulty !== 0)\n            writer.tag(1, WireType.Varint).int32(message.difficulty);\n        /* int32 npc_id = 2; */\n        if (message.npcId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.npcId);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        /* string other_name = 4; */\n        if (message.otherName !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.otherName);\n        /* string category = 5; */\n        if (message.category !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.category);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DropSource\n */\nexport const DropSource = new DropSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuestSource$Type extends MessageType<QuestSource> {\n    constructor() {\n        super(\"proto.QuestSource\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<QuestSource>): QuestSource {\n        const message = { id: 0, name: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<QuestSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestSource): QuestSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: QuestSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.QuestSource\n */\nexport const QuestSource = new QuestSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SoldBySource$Type extends MessageType<SoldBySource> {\n    constructor() {\n        super(\"proto.SoldBySource\", [\n            { no: 1, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"npc_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SoldBySource>): SoldBySource {\n        const message = { npcId: 0, npcName: \"\", zoneId: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SoldBySource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoldBySource): SoldBySource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 npc_id */ 1:\n                    message.npcId = reader.int32();\n                    break;\n                case /* string npc_name */ 2:\n                    message.npcName = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SoldBySource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 npc_id = 1; */\n        if (message.npcId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.npcId);\n        /* string npc_name = 2; */\n        if (message.npcName !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.npcName);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SoldBySource\n */\nexport const SoldBySource = new SoldBySource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIEnchant$Type extends MessageType<UIEnchant> {\n    constructor() {\n        super(\"proto.UIEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 13, name: \"extra_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ItemType\", ItemType] },\n            { no: 7, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 10, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 12, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIEnchant>): UIEnchant {\n        const message = { effectId: 0, itemId: 0, spellId: 0, name: \"\", icon: \"\", type: 0, extraTypes: [], enchantType: 0, stats: [], quality: 0, phase: 0, classAllowlist: [], requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIEnchant): UIEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* int32 item_id */ 2:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 3:\n                    message.spellId = reader.int32();\n                    break;\n                case /* string name */ 4:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 5:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 6:\n                    message.type = reader.int32();\n                    break;\n                case /* repeated proto.ItemType extra_types */ 13:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.extraTypes.push(reader.int32());\n                    else\n                        message.extraTypes.push(reader.int32());\n                    break;\n                case /* proto.EnchantType enchant_type */ 7:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 9:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 10:\n                    message.phase = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 12:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* int32 item_id = 2; */\n        if (message.itemId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 3; */\n        if (message.spellId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.spellId);\n        /* string name = 4; */\n        if (message.name !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.name);\n        /* string icon = 5; */\n        if (message.icon !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 6; */\n        if (message.type !== 0)\n            writer.tag(6, WireType.Varint).int32(message.type);\n        /* repeated proto.ItemType extra_types = 13; */\n        if (message.extraTypes.length) {\n            writer.tag(13, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.extraTypes.length; i++)\n                writer.int32(message.extraTypes[i]);\n            writer.join();\n        }\n        /* proto.EnchantType enchant_type = 7; */\n        if (message.enchantType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 9; */\n        if (message.quality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.quality);\n        /* int32 phase = 10; */\n        if (message.phase !== 0)\n            writer.tag(10, WireType.Varint).int32(message.phase);\n        /* repeated proto.Class class_allowlist = 11; */\n        if (message.classAllowlist.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 12; */\n        if (message.requiredProfession !== 0)\n            writer.tag(12, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIEnchant\n */\nexport const UIEnchant = new UIEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIGem$Type extends MessageType<UIGem> {\n    constructor() {\n        super(\"proto.UIGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 8, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIGem>): UIGem {\n        const message = { id: 0, name: \"\", icon: \"\", color: 0, stats: [], phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIGem): UIGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* int32 phase */ 6:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 7:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 8:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 9:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* int32 phase = 6; */\n        if (message.phase !== 0)\n            writer.tag(6, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 7; */\n        if (message.quality !== 0)\n            writer.tag(7, WireType.Varint).int32(message.quality);\n        /* bool unique = 8; */\n        if (message.unique !== false)\n            writer.tag(8, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 9; */\n        if (message.requiredProfession !== 0)\n            writer.tag(9, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIGem\n */\nexport const UIGem = new UIGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IconData$Type extends MessageType<IconData> {\n    constructor() {\n        super(\"proto.IconData\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IconData>): IconData {\n        const message = { id: 0, name: \"\", icon: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IconData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IconData): IconData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IconData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IconData\n */\nexport const IconData = new IconData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GlyphID$Type extends MessageType<GlyphID> {\n    constructor() {\n        super(\"proto.GlyphID\", [\n            { no: 1, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<GlyphID>): GlyphID {\n        const message = { itemId: 0, spellId: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GlyphID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlyphID): GlyphID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 item_id */ 1:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: GlyphID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 item_id = 1; */\n        if (message.itemId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GlyphID\n */\nexport const GlyphID = new GlyphID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DatabaseFilters$Type extends MessageType<DatabaseFilters> {\n    constructor() {\n        super(\"proto.DatabaseFilters\", [\n            { no: 1, name: \"armor_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 2, name: \"weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 16, name: \"ranged_weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 17, name: \"sources\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.SourceFilterOption\", SourceFilterOption] },\n            { no: 18, name: \"raids\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RaidFilterOption\", RaidFilterOption] },\n            { no: 4, name: \"min_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"min_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"max_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"min_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"max_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"one_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"two_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"matching_gems_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"favorite_items\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"favorite_gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"favorite_enchants\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DatabaseFilters>): DatabaseFilters {\n        const message = { armorTypes: [], weaponTypes: [], rangedWeaponTypes: [], sources: [], raids: [], minMhWeaponSpeed: 0, maxMhWeaponSpeed: 0, minOhWeaponSpeed: 0, maxOhWeaponSpeed: 0, minRangedWeaponSpeed: 0, maxRangedWeaponSpeed: 0, oneHandedWeapons: false, twoHandedWeapons: false, matchingGemsOnly: false, favoriteItems: [], favoriteGems: [], favoriteEnchants: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DatabaseFilters>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseFilters): DatabaseFilters {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ArmorType armor_types */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.armorTypes.push(reader.int32());\n                    else\n                        message.armorTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.WeaponType weapon_types */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weaponTypes.push(reader.int32());\n                    else\n                        message.weaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.RangedWeaponType ranged_weapon_types */ 16:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.rangedWeaponTypes.push(reader.int32());\n                    else\n                        message.rangedWeaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.SourceFilterOption sources */ 17:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.sources.push(reader.int32());\n                    else\n                        message.sources.push(reader.int32());\n                    break;\n                case /* repeated proto.RaidFilterOption raids */ 18:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.raids.push(reader.int32());\n                    else\n                        message.raids.push(reader.int32());\n                    break;\n                case /* double min_mh_weapon_speed */ 4:\n                    message.minMhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_mh_weapon_speed */ 5:\n                    message.maxMhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_oh_weapon_speed */ 9:\n                    message.minOhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_oh_weapon_speed */ 10:\n                    message.maxOhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_ranged_weapon_speed */ 14:\n                    message.minRangedWeaponSpeed = reader.double();\n                    break;\n                case /* double max_ranged_weapon_speed */ 15:\n                    message.maxRangedWeaponSpeed = reader.double();\n                    break;\n                case /* bool one_handed_weapons */ 6:\n                    message.oneHandedWeapons = reader.bool();\n                    break;\n                case /* bool two_handed_weapons */ 7:\n                    message.twoHandedWeapons = reader.bool();\n                    break;\n                case /* bool matching_gems_only */ 8:\n                    message.matchingGemsOnly = reader.bool();\n                    break;\n                case /* repeated int32 favorite_items */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteItems.push(reader.int32());\n                    else\n                        message.favoriteItems.push(reader.int32());\n                    break;\n                case /* repeated int32 favorite_gems */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteGems.push(reader.int32());\n                    else\n                        message.favoriteGems.push(reader.int32());\n                    break;\n                case /* repeated string favorite_enchants */ 13:\n                    message.favoriteEnchants.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DatabaseFilters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ArmorType armor_types = 1; */\n        if (message.armorTypes.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.armorTypes.length; i++)\n                writer.int32(message.armorTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.WeaponType weapon_types = 2; */\n        if (message.weaponTypes.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weaponTypes.length; i++)\n                writer.int32(message.weaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.RangedWeaponType ranged_weapon_types = 16; */\n        if (message.rangedWeaponTypes.length) {\n            writer.tag(16, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.rangedWeaponTypes.length; i++)\n                writer.int32(message.rangedWeaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.SourceFilterOption sources = 17; */\n        if (message.sources.length) {\n            writer.tag(17, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.sources.length; i++)\n                writer.int32(message.sources[i]);\n            writer.join();\n        }\n        /* repeated proto.RaidFilterOption raids = 18; */\n        if (message.raids.length) {\n            writer.tag(18, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.raids.length; i++)\n                writer.int32(message.raids[i]);\n            writer.join();\n        }\n        /* double min_mh_weapon_speed = 4; */\n        if (message.minMhWeaponSpeed !== 0)\n            writer.tag(4, WireType.Bit64).double(message.minMhWeaponSpeed);\n        /* double max_mh_weapon_speed = 5; */\n        if (message.maxMhWeaponSpeed !== 0)\n            writer.tag(5, WireType.Bit64).double(message.maxMhWeaponSpeed);\n        /* double min_oh_weapon_speed = 9; */\n        if (message.minOhWeaponSpeed !== 0)\n            writer.tag(9, WireType.Bit64).double(message.minOhWeaponSpeed);\n        /* double max_oh_weapon_speed = 10; */\n        if (message.maxOhWeaponSpeed !== 0)\n            writer.tag(10, WireType.Bit64).double(message.maxOhWeaponSpeed);\n        /* double min_ranged_weapon_speed = 14; */\n        if (message.minRangedWeaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.minRangedWeaponSpeed);\n        /* double max_ranged_weapon_speed = 15; */\n        if (message.maxRangedWeaponSpeed !== 0)\n            writer.tag(15, WireType.Bit64).double(message.maxRangedWeaponSpeed);\n        /* bool one_handed_weapons = 6; */\n        if (message.oneHandedWeapons !== false)\n            writer.tag(6, WireType.Varint).bool(message.oneHandedWeapons);\n        /* bool two_handed_weapons = 7; */\n        if (message.twoHandedWeapons !== false)\n            writer.tag(7, WireType.Varint).bool(message.twoHandedWeapons);\n        /* bool matching_gems_only = 8; */\n        if (message.matchingGemsOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.matchingGemsOnly);\n        /* repeated int32 favorite_items = 11; */\n        if (message.favoriteItems.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteItems.length; i++)\n                writer.int32(message.favoriteItems[i]);\n            writer.join();\n        }\n        /* repeated int32 favorite_gems = 12; */\n        if (message.favoriteGems.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteGems.length; i++)\n                writer.int32(message.favoriteGems[i]);\n            writer.join();\n        }\n        /* repeated string favorite_enchants = 13; */\n        for (let i = 0; i < message.favoriteEnchants.length; i++)\n            writer.tag(13, WireType.LengthDelimited).string(message.favoriteEnchants[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DatabaseFilters\n */\nexport const DatabaseFilters = new DatabaseFilters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"show_damage_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"show_healing_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"language\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 10, name: \"filters\", kind: \"message\", T: () => DatabaseFilters }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showDamageMetrics: false, showThreatMetrics: false, showHealingMetrics: false, showExperimental: false, language: \"\", faction: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_damage_metrics */ 8:\n                    message.showDamageMetrics = reader.bool();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_healing_metrics */ 7:\n                    message.showHealingMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* string language */ 9:\n                    message.language = reader.string();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                case /* proto.DatabaseFilters filters */ 10:\n                    message.filters = DatabaseFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_damage_metrics = 8; */\n        if (message.showDamageMetrics !== false)\n            writer.tag(8, WireType.Varint).bool(message.showDamageMetrics);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_healing_metrics = 7; */\n        if (message.showHealingMetrics !== false)\n            writer.tag(7, WireType.Varint).bool(message.showHealingMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* string language = 9; */\n        if (message.language !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.language);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        /* proto.DatabaseFilters filters = 10; */\n        if (message.filters)\n            DatabaseFilters.internalBinaryWrite(message.filters, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 9, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"ep_weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"ep_weights_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 11, name: \"ep_ratios\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], targetDummies: 0, epWeights: [], epRatios: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 7:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* int32 target_dummies */ 9:\n                    message.targetDummies = reader.int32();\n                    break;\n                case /* repeated double ep_weights */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epWeights.push(reader.double());\n                    else\n                        message.epWeights.push(reader.double());\n                    break;\n                case /* proto.UnitStats ep_weights_stats */ 10:\n                    message.epWeightsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epWeightsStats);\n                    break;\n                case /* repeated double ep_ratios */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epRatios.push(reader.double());\n                    else\n                        message.epRatios.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* int32 target_dummies = 9; */\n        if (message.targetDummies !== 0)\n            writer.tag(9, WireType.Varint).int32(message.targetDummies);\n        /* repeated double ep_weights = 6; */\n        if (message.epWeights.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epWeights.length; i++)\n                writer.double(message.epWeights[i]);\n            writer.join();\n        }\n        /* proto.UnitStats ep_weights_stats = 10; */\n        if (message.epWeightsStats)\n            UnitStats.internalBinaryWrite(message.epWeightsStats, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double ep_ratios = 11; */\n        if (message.epRatios.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epRatios.length; i++)\n                writer.double(message.epRatios[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 2, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"bonus_stats_stats\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = { bonusStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* repeated double bonus_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                case /* proto.UnitStats bonus_stats_stats */ 3:\n                    message.bonusStatsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStatsStats);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 2; */\n        if (message.bonusStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        /* proto.UnitStats bonus_stats_stats = 3; */\n        if (message.bonusStatsStats)\n            UnitStats.internalBinaryWrite(message.bonusStatsStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 6, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 8, name: \"rotation_json\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0, rotationJson: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 6:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* string rotation_json */ 8:\n                    message.rotationJson = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* proto.Cooldowns cooldowns = 6; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* string rotation_json = 8; */\n        if (message.rotationJson !== \"\")\n            writer.tag(8, WireType.LengthDelimited).string(message.rotationJson);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { faction: 0, phase: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","export const CURRENT_PHASE = 2;\n\n// Github pages serves our site under the /wotlk directory (because the repo name is wotlk)\nexport const REPO_NAME = 'wotlk';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n","// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null)\n\t\treturn true;\n\n\tif (a == null || b == null)\n\t\treturn false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Sorts an objectArray by a property. Returns a new array.\n// Can be called recursively.\nexport function sortByProperty(objArray: any[], prop: string) {\n\tif (!Array.isArray(objArray)) throw new Error('FIRST ARGUMENT NOT AN ARRAY');\n\tconst clone = objArray.slice(0);\n\tconst direct = arguments.length > 2 ? arguments[2] : 1; //Default to ascending\n\tconst propPath = (prop.constructor === Array) ? prop : prop.split('.');\n\tclone.sort(function(a, b) {\n\t\tfor (let p in propPath) {\n\t\t\tif (a[propPath[p]] && b[propPath[p]]) {\n\t\t\t\ta = a[propPath[p]];\n\t\t\t\tb = b[propPath[p]];\n\t\t\t}\n\t\t}\n\t\t// convert numeric strings to integers\n\t\ta = a.toString().match(/^\\d+$/) ? +a : a;\n\t\tb = b.toString().match(/^\\d+$/) ? +b : b;\n\t\treturn ((a < b) ? -1 * direct : ((a > b) ? 1 * direct : 0));\n\t});\n\treturn clone;\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => v > arr[cur] ? i : cur, 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn 1.645 * stDev / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\", dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number, lowerIsBetter?: boolean, noColor?: boolean) {\n\tconst delta = after - before;\n\tlet deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\tdeltaStr = '+' + deltaStr;\n\t}\n\telem.textContent = deltaStr;\n\n\tif (noColor || delta == 0) {\n\t\telem.classList.remove('positive');\n\t\telem.classList.remove('negative');\n\t} else if (delta > 0 != Boolean(lowerIsBetter)) {\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr.map((v, i) => {\n\t\t\tconst withoutThisElem = arr.slice();\n\t\t\twithoutThisElem.splice(i, 1);\n\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k - 1);\n\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: ((_a: T, _b: T) => boolean) = comparator ? ((a, b) => comparator(a, b) == 0) : ((a, b) => a == b);\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr.map(v => {\n\t\t\treturn smaller.map(permutation => {\n\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\tnewPerm.push(v);\n\t\t\t\treturn newPerm;\n\t\t\t});\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n\n// Converts a Uint8Array into a hex string.\nexport function buf2hex(data: Uint8Array): string {\n\treturn [...data]\n\t\t.map(x => x.toString(16).padStart(2, '0'))\n\t\t.join('');\n}\n","import { GemColor } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport {\n\tUIGem as Gem,\n} from '../proto/ui.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n\tGemColor.GemColorRed,\n\tGemColor.GemColorOrange,\n\tGemColor.GemColorYellow,\n\tGemColor.GemColorGreen,\n\tGemColor.GemColorBlue,\n\tGemColor.GemColorPurple,\n\tGemColor.GemColorPrismatic,\n]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n\treturn gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n\treturn (gem.color == GemColor.GemColorMeta) == (socketColor == GemColor.GemColorMeta);\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n\treadonly id: number;\n\treadonly description: string;\n\n\treadonly minRed: number;\n\treadonly minYellow: number;\n\treadonly minBlue: number;\n\n\treadonly compareColorGreater: GemColor;\n\treadonly compareColorLesser: GemColor;\n\n\tconstructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n\t\tthis.id = id;\n\t\tthis.description = description;\n\t\tthis.minRed = minRed;\n\t\tthis.minYellow = minYellow;\n\t\tthis.minBlue = minBlue;\n\t\tthis.compareColorGreater = compareColorGreater;\n\t\tthis.compareColorLesser = compareColorLesser;\n\n\t\tmetaGemConditions.set(this.id, this);\n\t}\n\n\t// Whether the condition is met, i.e. the meta gem is activated.\n\tisMet(numRed: number, numYellow: number, numBlue: number): boolean {\n\t\tif (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.compareColorGreater == GemColor.GemColorUnknown) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n\t\tconst numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n\t\treturn numGreater > numLesser;\n\t}\n\n\tisCompareColorCondition(): boolean {\n\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t}\n\n\tisOneOfEach(): boolean {\n\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t}\n\n\tisTwoAndOne(): boolean {\n\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t}\n\n\tisThreeOfAColor(): boolean {\n\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t}\n\n\tprivate static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n\t\tif (gemColor == GemColor.GemColorRed) {\n\t\t\treturn numRed;\n\t\t} else if (gemColor == GemColor.GemColorYellow) {\n\t\t\treturn numYellow;\n\t\t} else if (gemColor == GemColor.GemColorBlue) {\n\t\t\treturn numBlue;\n\t\t} else {\n\t\t\tthrow new Error('Invalid gem color for category check: ' + gemColor);\n\t\t}\n\t}\n\n\tstatic fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n\t}\n\n\tstatic fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n\t}\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n\tif (!metaGemConditions.has(id)) {\n\t\tthrow new Error('Missing meta gem condition for gem: ' + id);\n\t}\n\n\treturn metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n\treturn getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n\treturn getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41377, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n\t[GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n\t[GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n\t[GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n\t[GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n\tif (emptyGemSocketIcons[color])\n\t\treturn emptyGemSocketIcons[color] as string;\n\n\tthrow new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { REPO_NAME } from '../constants/other.js'\nimport { camelToSnakeCase } from '../utils.js';\nimport { getEnumValues } from '../utils.js';\nimport { intersection } from '../utils.js';\nimport { maxIndex } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport { Player } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ArmorType } from '../proto/common.js';\nimport { Class } from '../proto/common.js';\nimport { EnchantType } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { HandType } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { Faction } from '../proto/common.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { RangedWeaponType } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { Blessings } from '../proto/paladin.js';\nimport {\n\tBlessingsAssignment,\n\tBlessingsAssignments,\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { Stats } from './stats.js';\n\nimport * as Gems from '../proto_utils/gems.js';\n\nimport {\n\tBalanceDruid,\n\tBalanceDruid_Options as BalanceDruidOptions,\n\tBalanceDruid_Rotation as BalanceDruidRotation,\n\tDruidTalents,\n\tFeralDruid,\n\tFeralDruid_Options as FeralDruidOptions,\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralTankDruid,\n\tFeralTankDruid_Options as FeralTankDruidOptions,\n\tFeralTankDruid_Rotation as FeralTankDruidRotation,\n\tRestorationDruid,\n\tRestorationDruid_Options as RestorationDruidOptions,\n\tRestorationDruid_Rotation as RestorationDruidRotation,\n} from '../proto/druid.js';\nimport {\n\tElementalShaman,\n\tElementalShaman_Options as ElementalShamanOptions,\n\tElementalShaman_Rotation as ElementalShamanRotation,\n\tEnhancementShaman,\n\tEnhancementShaman_Options as EnhancementShamanOptions,\n\tEnhancementShaman_Rotation as EnhancementShamanRotation,\n\tRestorationShaman,\n\tRestorationShaman_Options as RestorationShamanOptions,\n\tRestorationShaman_Rotation as RestorationShamanRotation,\n\tShamanTalents,\n} from '../proto/shaman.js';\nimport { Hunter, Hunter_Rotation as HunterRotation, HunterTalents, Hunter_Options as HunterOptions } from '../proto/hunter.js';\nimport { Mage, Mage_Rotation as MageRotation, MageTalents, Mage_Options as MageOptions } from '../proto/mage.js';\nimport { Rogue, Rogue_Rotation as RogueRotation, RogueTalents, Rogue_Options as RogueOptions } from '../proto/rogue.js';\nimport {\n\tHolyPaladin,\n\tHolyPaladin_Options as HolyPaladinOptions,\n\tHolyPaladin_Rotation as HolyPaladinRotation,\n\tPaladinTalents,\n\tProtectionPaladin,\n\tProtectionPaladin_Options as ProtectionPaladinOptions,\n\tProtectionPaladin_Rotation as ProtectionPaladinRotation,\n\tRetributionPaladin,\n\tRetributionPaladin_Options as RetributionPaladinOptions,\n\tRetributionPaladin_Rotation as RetributionPaladinRotation,\n} from '../proto/paladin.js';\nimport {\n\tHealingPriest,\n\tHealingPriest_Options as HealingPriestOptions,\n\tHealingPriest_Rotation as HealingPriestRotation,\n\tPriestTalents,\n\tShadowPriest,\n\tShadowPriest_Options as ShadowPriestOptions,\n\tShadowPriest_Rotation as ShadowPriestRotation,\n\tSmitePriest,\n\tSmitePriest_Options as SmitePriestOptions,\n\tSmitePriest_Rotation as SmitePriestRotation,\n} from '../proto/priest.js';\nimport { Warlock, Warlock_Rotation as WarlockRotation, WarlockTalents, Warlock_Options as WarlockOptions } from '../proto/warlock.js';\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents, Warrior_Options as WarriorOptions } from '../proto/warrior.js';\nimport { Deathknight, Deathknight_Rotation as DeathknightRotation, DeathknightTalents, Deathknight_Options as DeathknightOptions } from '../proto/deathknight.js';\nimport { TankDeathknight, TankDeathknight_Rotation as TankDeathknightRotation, TankDeathknight_Options as TankDeathknightOptions } from '../proto/deathknight.js';\nimport { ProtectionWarrior, ProtectionWarrior_Rotation as ProtectionWarriorRotation, ProtectionWarrior_Options as ProtectionWarriorOptions } from '../proto/warrior.js';\n\nexport type DeathknightSpecs = Spec.SpecDeathknight | Spec.SpecTankDeathknight;\nexport type DruidSpecs = Spec.SpecBalanceDruid | Spec.SpecFeralDruid | Spec.SpecFeralTankDruid | Spec.SpecRestorationDruid;\nexport type HunterSpecs = Spec.SpecHunter;\nexport type MageSpecs = Spec.SpecMage;\nexport type PaladinSpecs = Spec.SpecHolyPaladin | Spec.SpecRetributionPaladin | Spec.SpecProtectionPaladin;\nexport type PriestSpecs = Spec.SpecHealingPriest | Spec.SpecShadowPriest | Spec.SpecSmitePriest;\nexport type RogueSpecs = Spec.SpecRogue;\nexport type ShamanSpecs = Spec.SpecElementalShaman | Spec.SpecEnhancementShaman | Spec.SpecRestorationShaman;\nexport type WarlockSpecs = Spec.SpecWarlock;\nexport type WarriorSpecs = Spec.SpecWarrior | Spec.SpecProtectionWarrior;\n\nexport type ClassSpecs<T extends Class> =\n\tT extends Class.ClassDeathknight ? DeathknightSpecs :\n\tT extends Class.ClassDruid ? DruidSpecs :\n\tT extends Class.ClassHunter ? HunterSpecs :\n\tT extends Class.ClassMage ? MageSpecs :\n\tT extends Class.ClassPaladin ? PaladinSpecs :\n\tT extends Class.ClassPriest ? PriestSpecs :\n\tT extends Class.ClassRogue ? RogueSpecs :\n\tT extends Class.ClassShaman ? ShamanSpecs :\n\tT extends Class.ClassWarlock ? WarlockSpecs :\n\tT extends Class.ClassWarrior ? WarriorSpecs :\n\tShamanSpecs; // Should never reach this case\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\n// The order in which specs should be presented, when it matters.\n// Currently this is only used for the order of the paladin blessings UI.\nexport const naturalSpecOrder: Array<Spec> = [\n\tSpec.SpecBalanceDruid,\n\tSpec.SpecFeralDruid,\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecRestorationDruid,\n\tSpec.SpecHunter,\n\tSpec.SpecMage,\n\tSpec.SpecHolyPaladin,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecRetributionPaladin,\n\tSpec.SpecHealingPriest,\n\tSpec.SpecShadowPriest,\n\tSpec.SpecSmitePriest,\n\tSpec.SpecRogue,\n\tSpec.SpecElementalShaman,\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecRestorationShaman,\n\tSpec.SpecWarlock,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\n\nexport const naturalClassOrder: Array<Class> = [\n\tClass.ClassDeathknight,\n\tClass.ClassDruid,\n\tClass.ClassHunter,\n\tClass.ClassMage,\n\tClass.ClassPaladin,\n\tClass.ClassPriest,\n\tClass.ClassRogue,\n\tClass.ClassShaman,\n\tClass.ClassWarlock,\n\tClass.ClassWarrior,\n]\n\nexport const specNames: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: 'Balance Druid',\n\t[Spec.SpecFeralDruid]: 'Feral DPS Druid',\n\t[Spec.SpecFeralTankDruid]: 'Feral Tank Druid',\n\t[Spec.SpecRestorationDruid]: 'Restoration Druid',\n\t[Spec.SpecElementalShaman]: 'Elemental Shaman',\n\t[Spec.SpecEnhancementShaman]: 'Enhancement Shaman',\n\t[Spec.SpecRestorationShaman]: 'Restoration Shaman',\n\t[Spec.SpecHunter]: 'Hunter',\n\t[Spec.SpecMage]: 'Mage',\n\t[Spec.SpecRogue]: 'Rogue',\n\t[Spec.SpecHolyPaladin]: 'Holy Paladin',\n\t[Spec.SpecProtectionPaladin]: 'Protection Paladin',\n\t[Spec.SpecRetributionPaladin]: 'Retribution Paladin',\n\t[Spec.SpecHealingPriest]: 'Priest',\n\t[Spec.SpecShadowPriest]: 'Shadow Priest',\n\t[Spec.SpecSmitePriest]: 'Smite Priest',\n\t[Spec.SpecWarlock]: 'Warlock',\n\t[Spec.SpecWarrior]: 'DPS Warrior',\n\t[Spec.SpecProtectionWarrior]: 'Protection Warrior',\n\t[Spec.SpecDeathknight]: 'DPS Death Knight',\n\t[Spec.SpecTankDeathknight]: 'Tank Death Knight',\n};\n\nexport const classNames: Record<Class, string> = {\n\t[Class.ClassUnknown]: '',\n\t[Class.ClassDruid]: 'Druid',\n\t[Class.ClassHunter]: 'Hunter',\n\t[Class.ClassMage]: 'Mage',\n\t[Class.ClassPaladin]: 'Paladin',\n\t[Class.ClassPriest]: 'Priest',\n\t[Class.ClassRogue]: 'Rogue',\n\t[Class.ClassShaman]: 'Shaman',\n\t[Class.ClassWarlock]: 'Warlock',\n\t[Class.ClassWarrior]: 'Warrior',\n\t[Class.ClassDeathknight]: 'Death Knight'\n}\n\nexport const classColors: Record<Class, string> = {\n\t[Class.ClassUnknown]: '#fff',\n\t[Class.ClassDruid]: '#ff7d0a',\n\t[Class.ClassHunter]: '#abd473',\n\t[Class.ClassMage]: '#69ccf0',\n\t[Class.ClassPaladin]: '#f58cba',\n\t[Class.ClassPriest]: '#fff',\n\t[Class.ClassRogue]: '#fff569',\n\t[Class.ClassShaman]: '#2459ff',\n\t[Class.ClassWarlock]: '#9482c9',\n\t[Class.ClassWarrior]: '#c79c6e',\n\t[Class.ClassDeathknight]: '#c41e3a'\n}\n\nexport const talentTreeIcons: Record<Class, Array<string>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDeathknight]: [\n\t\t'spell_deathknight_bloodpresence.jpg',\n\t\t'spell_deathknight_frostpresence.jpg',\n\t\t'spell_deathknight_unholypresence.jpg',\n\t\t'spell_deathknight_darkconviction.jpg',\n\t],\n\t[Class.ClassDruid]: [\n\t\t'spell_nature_starfall.jpg',\n\t\t'ability_racial_bearform.jpg',\n\t\t'spell_nature_healingtouch.jpg',\n\t\t'ability_druid_catform.jpg',\n\t],\n\t[Class.ClassHunter]: [\n\t\t'ability_hunter_beasttaming.jpg',\n\t\t'ability_marksmanship.jpg',\n\t\t'ability_hunter_swiftstrike.jpg',\n\t],\n\t[Class.ClassMage]: [\n\t\t'spell_holy_magicalsentry.jpg',\n\t\t'spell_fire_firebolt02.jpg',\n\t\t'spell_frost_frostbolt02.jpg',\n\t],\n\t[Class.ClassPaladin]: [\n\t\t'spell_holy_holybolt.jpg',\n\t\t'spell_holy_devotionaura.jpg',\n\t\t'spell_holy_auraoflight.jpg',\n\t],\n\t[Class.ClassPriest]: [\n\t\t'spell_holy_powerwordshield.jpg',\n\t\t'spell_holy_guardianspirit.jpg',\n\t\t'spell_shadow_shadowwordpain.jpg',\n\t\t'spell_holy_holysmite.jpg',\n\t],\n\t[Class.ClassRogue]: [\n\t\t'ability_rogue_eviscerate.jpg',\n\t\t'ability_backstab.jpg',\n\t\t'ability_stealth.jpg',\n\t],\n\t[Class.ClassShaman]: [\n\t\t'spell_nature_lightning.jpg',\n\t\t'ability_shaman_stormstrike.jpg',\n\t\t'spell_nature_magicimmunity.jpg',\n\t],\n\t[Class.ClassWarlock]: [\n\t\t'spell_shadow_deathcoil.jpg',\n\t\t'spell_shadow_metamorphosis.jpg',\n\t\t'spell_shadow_rainoffire.jpg',\n\t],\n\t[Class.ClassWarrior]: [\n\t\t'ability_warrior_savageblow.jpg',\n\t\t'ability_warrior_innerrage.jpg',\n\t\t'inv_shield_06.jpg',\n\t],\n};\n\nexport const titleIcons: Record<Class|Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '/wotlk/assets/img/balance_druid_icon.png',\n\t[Spec.SpecFeralDruid]: '/wotlk/assets/img/feral_druid_icon.png',\n\t[Spec.SpecFeralTankDruid]: '/wotlk/assets/img/feral_druid_tank_icon.png',\n\t[Spec.SpecRestorationDruid]: '/wotlk/assets/img/resto_druid_icon.png',\n\t[Spec.SpecElementalShaman]: '/wotlk/assets/img/elemental_shaman_icon.png',\n\t[Spec.SpecEnhancementShaman]: '/wotlk/assets/img/enhancement_shaman_icon.png',\n\t[Spec.SpecRestorationShaman]: '/wotlk/assets/img/resto_shaman_icon.png',\n\t[Spec.SpecHunter]: '/wotlk/assets/img/hunter_icon.png',\n\t[Spec.SpecMage]: '/wotlk/assets/img/mage_icon.png',\n\t[Spec.SpecRogue]: '/wotlk/assets/img/rogue_icon.png',\n\t[Spec.SpecHolyPaladin]: '/wotlk/assets/img/holy_paladin_icon.png',\n\t[Spec.SpecProtectionPaladin]: '/wotlk/assets/img/protection_paladin_icon.png',\n\t[Spec.SpecRetributionPaladin]: '/wotlk/assets/img/retribution_icon.png',\n\t[Spec.SpecHealingPriest]: '/wotlk/assets/img/priest_icon.png',\n\t[Spec.SpecShadowPriest]: '/wotlk/assets/img/shadow_priest_icon.png',\n\t[Spec.SpecSmitePriest]: '/wotlk/assets/img/smite_priest_icon.png',\n\t[Spec.SpecWarlock]: '/wotlk/assets/img/warlock_icon.png',\n\t[Spec.SpecWarrior]: '/wotlk/assets/img/warrior_icon.png',\n\t[Spec.SpecProtectionWarrior]: '/wotlk/assets/img/protection_warrior_icon.png',\n\t[Spec.SpecDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n\t[Spec.SpecTankDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n};\n\nexport const raidSimIcon: string = '/wotlk/assets/img/raid_icon.png';\nexport const raidSimLabel: string = 'Full Raid Sim';\n\n// Converts '1231321-12313123-0' to [40, 21, 0].\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char))));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\nenum IconSizes {\n\tSmall = 'small',\n\tMedium = 'medium',\n\tLarge = 'large',\n}\n\n// Returns the icon for a given spec\nexport function getSpecIcon(klass: Class, specNumber: number, size: IconSizes = IconSizes.Medium): string {\n\tconst fileName = talentTreeIcons[klass][specNumber];\n\t\t\n\treturn `https://wow.zamimg.com/images/wow/icons/${size}/${fileName}`;\n}\n\n// Returns the icon for a given spec based on talent point allocation.\nexport function getTalentTreeIcon(spec: Spec, talentsString: string, size: IconSizes = IconSizes.Medium): string {\n\tlet specNumber = getTalentTree(talentsString);\n\n\t// Blood DPS DK\n\tif (spec == Spec.SpecDeathknight && specNumber == 0)\n\t\tspecNumber += 3;\n\n\t// Cat Druid and Smite Priest are being considered a \"4th spec\"\n\tif (spec == Spec.SpecFeralDruid)\n\t\tspecNumber += 2;\n\t\n\tif (spec == Spec.SpecSmitePriest)\n\t\tspecNumber += 3;\n\t\n\tconst fileName = talentTreeIcons[specToClass[spec]][specNumber];\n\t\t\n\treturn `https://wow.zamimg.com/images/wow/icons/${size}/${fileName}`;\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/SPEC/`);\nexport function getSpecSiteUrl(spec: Spec): string {\n\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\tspecString = camelToSnakeCase(specString); // 'balance_druid'\n\treturn specSiteUrlTemplate.toString().replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport function cssClassForClass(klass: Class): string {\n\treturn classNames[klass].toLowerCase().replace(/\\s/g, '-');\n}\n\nexport function textCssClassForClass(klass: Class): string {\n\treturn `text-${cssClassForClass(klass)}`;\n}\nexport function textCssClassForSpec(spec: Spec): string {\n\treturn textCssClassForClass(specToClass[spec]);\n}\n\nexport type RotationUnion =\n\tBalanceDruidRotation |\n\tFeralDruidRotation |\n\tFeralTankDruidRotation |\n\tRestorationDruidRotation |\n\tHunterRotation |\n\tMageRotation |\n\tElementalShamanRotation |\n\tEnhancementShamanRotation |\n\tRestorationShamanRotation |\n\tRogueRotation |\n\tHolyPaladinRotation |\n\tProtectionPaladinRotation |\n\tRetributionPaladinRotation |\n\tHealingPriestRotation |\n\tShadowPriestRotation |\n\tSmitePriestRotation |\n\tWarlockRotation |\n\tWarriorRotation |\n\tProtectionWarriorRotation |\n\tDeathknightRotation |\n\tTankDeathknightRotation;\nexport type SpecRotation<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidRotation :\n\tT extends Spec.SpecFeralDruid ? FeralDruidRotation :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidRotation :\n\tT extends Spec.SpecRestorationDruid ? RestorationDruidRotation :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanRotation :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanRotation :\n\tT extends Spec.SpecRestorationShaman ? RestorationShamanRotation :\n\tT extends Spec.SpecHunter ? HunterRotation :\n\tT extends Spec.SpecMage ? MageRotation :\n\tT extends Spec.SpecRogue ? RogueRotation :\n\tT extends Spec.SpecHolyPaladin ? HolyPaladinRotation :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinRotation :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinRotation :\n\tT extends Spec.SpecHealingPriest ? HealingPriestRotation :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestRotation :\n\tT extends Spec.SpecSmitePriest ? SmitePriestRotation :\n\tT extends Spec.SpecWarlock ? WarlockRotation :\n\tT extends Spec.SpecWarrior ? WarriorRotation :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorRotation :\n\tT extends Spec.SpecDeathknight ? DeathknightRotation :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightRotation :\n\tElementalShamanRotation; // Should never reach this case\n\nexport type TalentsUnion =\n\tDruidTalents |\n\tHunterTalents |\n\tMageTalents |\n\tRogueTalents |\n\tPaladinTalents |\n\tPriestTalents |\n\tShamanTalents |\n\tWarlockTalents |\n\tWarriorTalents |\n\tDeathknightTalents;\nexport type SpecTalents<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? DruidTalents :\n\tT extends Spec.SpecFeralDruid ? DruidTalents :\n\tT extends Spec.SpecFeralTankDruid ? DruidTalents :\n\tT extends Spec.SpecRestorationDruid ? DruidTalents :\n\tT extends Spec.SpecElementalShaman ? ShamanTalents :\n\tT extends Spec.SpecEnhancementShaman ? ShamanTalents :\n\tT extends Spec.SpecRestorationShaman ? ShamanTalents :\n\tT extends Spec.SpecHunter ? HunterTalents :\n\tT extends Spec.SpecMage ? MageTalents :\n\tT extends Spec.SpecRogue ? RogueTalents :\n\tT extends Spec.SpecHolyPaladin ? PaladinTalents :\n\tT extends Spec.SpecProtectionPaladin ? PaladinTalents :\n\tT extends Spec.SpecRetributionPaladin ? PaladinTalents :\n\tT extends Spec.SpecHealingPriest ? PriestTalents :\n\tT extends Spec.SpecShadowPriest ? PriestTalents :\n\tT extends Spec.SpecSmitePriest ? PriestTalents :\n\tT extends Spec.SpecWarlock ? WarlockTalents :\n\tT extends Spec.SpecWarrior ? WarriorTalents :\n\tT extends Spec.SpecProtectionWarrior ? WarriorTalents :\n\tT extends Spec.SpecDeathknight ? DeathknightTalents :\n\tT extends Spec.SpecTankDeathknight ? DeathknightTalents :\n\tShamanTalents; // Should never reach this case\n\nexport type SpecOptionsUnion =\n\tBalanceDruidOptions |\n\tFeralDruidOptions |\n\tFeralTankDruidOptions |\n\tRestorationDruidOptions |\n\tElementalShamanOptions |\n\tEnhancementShamanOptions |\n\tRestorationShamanOptions |\n\tHunterOptions |\n\tMageOptions |\n\tRogueOptions |\n\tHolyPaladinOptions |\n\tProtectionPaladinOptions |\n\tRetributionPaladinOptions |\n\tHealingPriestOptions |\n\tShadowPriestOptions |\n\tSmitePriestOptions |\n\tWarlockOptions |\n\tWarriorOptions |\n\tProtectionWarriorOptions |\n\tDeathknightOptions |\n\tTankDeathknightOptions;\nexport type SpecOptions<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidOptions :\n\tT extends Spec.SpecFeralDruid ? FeralDruidOptions :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidOptions :\n\tT extends Spec.SpecRestorationDruid ? RestorationDruidOptions :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanOptions :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanOptions :\n\tT extends Spec.SpecRestorationShaman ? RestorationShamanOptions :\n\tT extends Spec.SpecHunter ? HunterOptions :\n\tT extends Spec.SpecMage ? MageOptions :\n\tT extends Spec.SpecRogue ? RogueOptions :\n\tT extends Spec.SpecHolyPaladin ? HolyPaladinOptions :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinOptions :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinOptions :\n\tT extends Spec.SpecHealingPriest ? HealingPriestOptions :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestOptions :\n\tT extends Spec.SpecSmitePriest ? SmitePriestOptions :\n\tT extends Spec.SpecWarlock ? WarlockOptions :\n\tT extends Spec.SpecWarrior ? WarriorOptions :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorOptions :\n\tT extends Spec.SpecDeathknight ? DeathknightOptions :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightOptions :\n\tElementalShamanOptions; // Should never reach this case\n\nexport type SpecProtoUnion =\n\tBalanceDruid |\n\tFeralDruid |\n\tFeralTankDruid |\n\tRestorationDruid |\n\tElementalShaman |\n\tEnhancementShaman |\n\tRestorationShaman |\n\tHunter |\n\tMage |\n\tRogue |\n\tHolyPaladin |\n\tProtectionPaladin |\n\tRetributionPaladin |\n\tHealingPriest |\n\tShadowPriest |\n\tSmitePriest |\n\tWarlock |\n\tWarrior |\n\tProtectionWarrior |\n\tDeathknight |\n\tTankDeathknight;\nexport type SpecProto<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruid :\n\tT extends Spec.SpecFeralDruid ? FeralDruid :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruid :\n\tT extends Spec.SpecRestorationDruid ? RestorationDruid :\n\tT extends Spec.SpecElementalShaman ? ElementalShaman :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShaman :\n\tT extends Spec.SpecRestorationShaman ? RestorationShaman :\n\tT extends Spec.SpecHunter ? Hunter :\n\tT extends Spec.SpecMage ? Mage :\n\tT extends Spec.SpecRogue ? Rogue :\n\tT extends Spec.SpecHolyPaladin ? HolyPaladin :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladin :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladin :\n\tT extends Spec.SpecHealingPriest ? HealingPriest :\n\tT extends Spec.SpecShadowPriest ? ShadowPriest :\n\tT extends Spec.SpecSmitePriest ? SmitePriest :\n\tT extends Spec.SpecWarlock ? Warlock :\n\tT extends Spec.SpecWarrior ? Warrior :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarrior :\n\tT extends Spec.SpecDeathknight ? Deathknight :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknight :\n\tElementalShaman; // Should never reach this case\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n\trotationCreate: () => SpecRotation<SpecType>;\n\trotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n\trotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n\trotationToJson: (a: SpecRotation<SpecType>) => any;\n\trotationFromJson: (obj: any) => SpecRotation<SpecType>;\n\trotationFromPlayer: (player: Player) => SpecRotation<SpecType>;\n\n\ttalentsCreate: () => SpecTalents<SpecType>;\n\ttalentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n\ttalentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n\ttalentsToJson: (a: SpecTalents<SpecType>) => any;\n\ttalentsFromJson: (obj: any) => SpecTalents<SpecType>;\n\n\toptionsCreate: () => SpecOptions<SpecType>;\n\toptionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n\toptionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n\toptionsToJson: (a: SpecOptions<SpecType>) => any;\n\toptionsFromJson: (obj: any) => SpecOptions<SpecType>;\n\toptionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n\t[Spec.SpecBalanceDruid]: {\n\t\trotationCreate: () => BalanceDruidRotation.create(),\n\t\trotationEquals: (a, b) => BalanceDruidRotation.equals(a as BalanceDruidRotation, b as BalanceDruidRotation),\n\t\trotationCopy: (a) => BalanceDruidRotation.clone(a as BalanceDruidRotation),\n\t\trotationToJson: (a) => BalanceDruidRotation.toJson(a as BalanceDruidRotation),\n\t\trotationFromJson: (obj) => BalanceDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.rotation || BalanceDruidRotation.create()\n\t\t\t: BalanceDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BalanceDruidOptions.create(),\n\t\toptionsEquals: (a, b) => BalanceDruidOptions.equals(a as BalanceDruidOptions, b as BalanceDruidOptions),\n\t\toptionsCopy: (a) => BalanceDruidOptions.clone(a as BalanceDruidOptions),\n\t\toptionsToJson: (a) => BalanceDruidOptions.toJson(a as BalanceDruidOptions),\n\t\toptionsFromJson: (obj) => BalanceDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.options || BalanceDruidOptions.create()\n\t\t\t: BalanceDruidOptions.create(),\n\t},\n\t[Spec.SpecFeralDruid]: {\n\t\trotationCreate: () => FeralDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralDruidRotation.equals(a as FeralDruidRotation, b as FeralDruidRotation),\n\t\trotationCopy: (a) => FeralDruidRotation.clone(a as FeralDruidRotation),\n\t\trotationToJson: (a) => FeralDruidRotation.toJson(a as FeralDruidRotation),\n\t\trotationFromJson: (obj) => FeralDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.rotation || FeralDruidRotation.create()\n\t\t\t: FeralDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FeralDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralDruidOptions.equals(a as FeralDruidOptions, b as FeralDruidOptions),\n\t\toptionsCopy: (a) => FeralDruidOptions.clone(a as FeralDruidOptions),\n\t\toptionsToJson: (a) => FeralDruidOptions.toJson(a as FeralDruidOptions),\n\t\toptionsFromJson: (obj) => FeralDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.options || FeralDruidOptions.create()\n\t\t\t: FeralDruidOptions.create(),\n\t},\n\t[Spec.SpecFeralTankDruid]: {\n\t\trotationCreate: () => FeralTankDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralTankDruidRotation.equals(a as FeralTankDruidRotation, b as FeralTankDruidRotation),\n\t\trotationCopy: (a) => FeralTankDruidRotation.clone(a as FeralTankDruidRotation),\n\t\trotationToJson: (a) => FeralTankDruidRotation.toJson(a as FeralTankDruidRotation),\n\t\trotationFromJson: (obj) => FeralTankDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.rotation || FeralTankDruidRotation.create()\n\t\t\t: FeralTankDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FeralTankDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralTankDruidOptions.equals(a as FeralTankDruidOptions, b as FeralTankDruidOptions),\n\t\toptionsCopy: (a) => FeralTankDruidOptions.clone(a as FeralTankDruidOptions),\n\t\toptionsToJson: (a) => FeralTankDruidOptions.toJson(a as FeralTankDruidOptions),\n\t\toptionsFromJson: (obj) => FeralTankDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.options || FeralTankDruidOptions.create()\n\t\t\t: FeralTankDruidOptions.create(),\n\t},\n\t[Spec.SpecRestorationDruid]: {\n\t\trotationCreate: () => RestorationDruidRotation.create(),\n\t\trotationEquals: (a, b) => RestorationDruidRotation.equals(a as RestorationDruidRotation, b as RestorationDruidRotation),\n\t\trotationCopy: (a) => RestorationDruidRotation.clone(a as RestorationDruidRotation),\n\t\trotationToJson: (a) => RestorationDruidRotation.toJson(a as RestorationDruidRotation),\n\t\trotationFromJson: (obj) => RestorationDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'restorationDruid'\n\t\t\t? player.spec.restorationDruid.rotation || RestorationDruidRotation.create()\n\t\t\t: RestorationDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationDruidOptions.create(),\n\t\toptionsEquals: (a, b) => RestorationDruidOptions.equals(a as RestorationDruidOptions, b as RestorationDruidOptions),\n\t\toptionsCopy: (a) => RestorationDruidOptions.clone(a as RestorationDruidOptions),\n\t\toptionsToJson: (a) => RestorationDruidOptions.toJson(a as RestorationDruidOptions),\n\t\toptionsFromJson: (obj) => RestorationDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'restorationDruid'\n\t\t\t? player.spec.restorationDruid.options || RestorationDruidOptions.create()\n\t\t\t: RestorationDruidOptions.create(),\n\t},\n\t[Spec.SpecElementalShaman]: {\n\t\trotationCreate: () => ElementalShamanRotation.create(),\n\t\trotationEquals: (a, b) => ElementalShamanRotation.equals(a as ElementalShamanRotation, b as ElementalShamanRotation),\n\t\trotationCopy: (a) => ElementalShamanRotation.clone(a as ElementalShamanRotation),\n\t\trotationToJson: (a) => ElementalShamanRotation.toJson(a as ElementalShamanRotation),\n\t\trotationFromJson: (obj) => ElementalShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.rotation || ElementalShamanRotation.create()\n\t\t\t: ElementalShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ElementalShamanOptions.create(),\n\t\toptionsEquals: (a, b) => ElementalShamanOptions.equals(a as ElementalShamanOptions, b as ElementalShamanOptions),\n\t\toptionsCopy: (a) => ElementalShamanOptions.clone(a as ElementalShamanOptions),\n\t\toptionsToJson: (a) => ElementalShamanOptions.toJson(a as ElementalShamanOptions),\n\t\toptionsFromJson: (obj) => ElementalShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.options || ElementalShamanOptions.create()\n\t\t\t: ElementalShamanOptions.create(),\n\t},\n\t[Spec.SpecEnhancementShaman]: {\n\t\trotationCreate: () => EnhancementShamanRotation.create(),\n\t\trotationEquals: (a, b) => EnhancementShamanRotation.equals(a as EnhancementShamanRotation, b as EnhancementShamanRotation),\n\t\trotationCopy: (a) => EnhancementShamanRotation.clone(a as EnhancementShamanRotation),\n\t\trotationToJson: (a) => EnhancementShamanRotation.toJson(a as EnhancementShamanRotation),\n\t\trotationFromJson: (obj) => EnhancementShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.rotation || EnhancementShamanRotation.create()\n\t\t\t: EnhancementShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => EnhancementShamanOptions.create(),\n\t\toptionsEquals: (a, b) => EnhancementShamanOptions.equals(a as EnhancementShamanOptions, b as EnhancementShamanOptions),\n\t\toptionsCopy: (a) => EnhancementShamanOptions.clone(a as EnhancementShamanOptions),\n\t\toptionsToJson: (a) => EnhancementShamanOptions.toJson(a as EnhancementShamanOptions),\n\t\toptionsFromJson: (obj) => EnhancementShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.options || EnhancementShamanOptions.create()\n\t\t\t: EnhancementShamanOptions.create(),\n\t},\n\t[Spec.SpecRestorationShaman]: {\n\t\trotationCreate: () => RestorationShamanRotation.create(),\n\t\trotationEquals: (a, b) => RestorationShamanRotation.equals(a as RestorationShamanRotation, b as RestorationShamanRotation),\n\t\trotationCopy: (a) => RestorationShamanRotation.clone(a as RestorationShamanRotation),\n\t\trotationToJson: (a) => RestorationShamanRotation.toJson(a as RestorationShamanRotation),\n\t\trotationFromJson: (obj) => RestorationShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'restorationShaman'\n\t\t\t? player.spec.restorationShaman.rotation || RestorationShamanRotation.create()\n\t\t\t: RestorationShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationShamanOptions.create(),\n\t\toptionsEquals: (a, b) => RestorationShamanOptions.equals(a as RestorationShamanOptions, b as RestorationShamanOptions),\n\t\toptionsCopy: (a) => RestorationShamanOptions.clone(a as RestorationShamanOptions),\n\t\toptionsToJson: (a) => RestorationShamanOptions.toJson(a as RestorationShamanOptions),\n\t\toptionsFromJson: (obj) => RestorationShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'restorationShaman'\n\t\t\t? player.spec.restorationShaman.options || RestorationShamanOptions.create()\n\t\t\t: RestorationShamanOptions.create(),\n\t},\n\t[Spec.SpecHunter]: {\n\t\trotationCreate: () => HunterRotation.create(),\n\t\trotationEquals: (a, b) => HunterRotation.equals(a as HunterRotation, b as HunterRotation),\n\t\trotationCopy: (a) => HunterRotation.clone(a as HunterRotation),\n\t\trotationToJson: (a) => HunterRotation.toJson(a as HunterRotation),\n\t\trotationFromJson: (obj) => HunterRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.rotation || HunterRotation.create()\n\t\t\t: HunterRotation.create(),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: (a) => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: (a) => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: (obj) => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HunterOptions.create(),\n\t\toptionsEquals: (a, b) => HunterOptions.equals(a as HunterOptions, b as HunterOptions),\n\t\toptionsCopy: (a) => HunterOptions.clone(a as HunterOptions),\n\t\toptionsToJson: (a) => HunterOptions.toJson(a as HunterOptions),\n\t\toptionsFromJson: (obj) => HunterOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.options || HunterOptions.create()\n\t\t\t: HunterOptions.create(),\n\t},\n\t[Spec.SpecMage]: {\n\t\trotationCreate: () => MageRotation.create(),\n\t\trotationEquals: (a, b) => MageRotation.equals(a as MageRotation, b as MageRotation),\n\t\trotationCopy: (a) => MageRotation.clone(a as MageRotation),\n\t\trotationToJson: (a) => MageRotation.toJson(a as MageRotation),\n\t\trotationFromJson: (obj) => MageRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.rotation || MageRotation.create()\n\t\t\t: MageRotation.create(),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: (a) => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: (a) => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: (obj) => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => MageOptions.create(),\n\t\toptionsEquals: (a, b) => MageOptions.equals(a as MageOptions, b as MageOptions),\n\t\toptionsCopy: (a) => MageOptions.clone(a as MageOptions),\n\t\toptionsToJson: (a) => MageOptions.toJson(a as MageOptions),\n\t\toptionsFromJson: (obj) => MageOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.options || MageOptions.create()\n\t\t\t: MageOptions.create(),\n\t},\n\t[Spec.SpecHolyPaladin]: {\n\t\trotationCreate: () => HolyPaladinRotation.create(),\n\t\trotationEquals: (a, b) => HolyPaladinRotation.equals(a as HolyPaladinRotation, b as HolyPaladinRotation),\n\t\trotationCopy: (a) => HolyPaladinRotation.clone(a as HolyPaladinRotation),\n\t\trotationToJson: (a) => HolyPaladinRotation.toJson(a as HolyPaladinRotation),\n\t\trotationFromJson: (obj) => HolyPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'holyPaladin'\n\t\t\t? player.spec.holyPaladin.rotation || HolyPaladinRotation.create()\n\t\t\t: HolyPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HolyPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => HolyPaladinOptions.equals(a as HolyPaladinOptions, b as HolyPaladinOptions),\n\t\toptionsCopy: (a) => HolyPaladinOptions.clone(a as HolyPaladinOptions),\n\t\toptionsToJson: (a) => HolyPaladinOptions.toJson(a as HolyPaladinOptions),\n\t\toptionsFromJson: (obj) => HolyPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'holyPaladin'\n\t\t\t? player.spec.holyPaladin.options || HolyPaladinOptions.create()\n\t\t\t: HolyPaladinOptions.create(),\n\t},\n\t[Spec.SpecProtectionPaladin]: {\n\t\trotationCreate: () => ProtectionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionPaladinRotation.equals(a as ProtectionPaladinRotation, b as ProtectionPaladinRotation),\n\t\trotationCopy: (a) => ProtectionPaladinRotation.clone(a as ProtectionPaladinRotation),\n\t\trotationToJson: (a) => ProtectionPaladinRotation.toJson(a as ProtectionPaladinRotation),\n\t\trotationFromJson: (obj) => ProtectionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.rotation || ProtectionPaladinRotation.create()\n\t\t\t: ProtectionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionPaladinOptions.equals(a as ProtectionPaladinOptions, b as ProtectionPaladinOptions),\n\t\toptionsCopy: (a) => ProtectionPaladinOptions.clone(a as ProtectionPaladinOptions),\n\t\toptionsToJson: (a) => ProtectionPaladinOptions.toJson(a as ProtectionPaladinOptions),\n\t\toptionsFromJson: (obj) => ProtectionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.options || ProtectionPaladinOptions.create()\n\t\t\t: ProtectionPaladinOptions.create(),\n\t},\n\t[Spec.SpecRetributionPaladin]: {\n\t\trotationCreate: () => RetributionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => RetributionPaladinRotation.equals(a as RetributionPaladinRotation, b as RetributionPaladinRotation),\n\t\trotationCopy: (a) => RetributionPaladinRotation.clone(a as RetributionPaladinRotation),\n\t\trotationToJson: (a) => RetributionPaladinRotation.toJson(a as RetributionPaladinRotation),\n\t\trotationFromJson: (obj) => RetributionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.rotation || RetributionPaladinRotation.create()\n\t\t\t: RetributionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RetributionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => RetributionPaladinOptions.equals(a as RetributionPaladinOptions, b as RetributionPaladinOptions),\n\t\toptionsCopy: (a) => RetributionPaladinOptions.clone(a as RetributionPaladinOptions),\n\t\toptionsToJson: (a) => RetributionPaladinOptions.toJson(a as RetributionPaladinOptions),\n\t\toptionsFromJson: (obj) => RetributionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.options || RetributionPaladinOptions.create()\n\t\t\t: RetributionPaladinOptions.create(),\n\t},\n\t[Spec.SpecRogue]: {\n\t\trotationCreate: () => RogueRotation.create(),\n\t\trotationEquals: (a, b) => RogueRotation.equals(a as RogueRotation, b as RogueRotation),\n\t\trotationCopy: (a) => RogueRotation.clone(a as RogueRotation),\n\t\trotationToJson: (a) => RogueRotation.toJson(a as RogueRotation),\n\t\trotationFromJson: (obj) => RogueRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.rotation || RogueRotation.create()\n\t\t\t: RogueRotation.create(),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: (a) => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: (a) => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: (obj) => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RogueOptions.create(),\n\t\toptionsEquals: (a, b) => RogueOptions.equals(a as RogueOptions, b as RogueOptions),\n\t\toptionsCopy: (a) => RogueOptions.clone(a as RogueOptions),\n\t\toptionsToJson: (a) => RogueOptions.toJson(a as RogueOptions),\n\t\toptionsFromJson: (obj) => RogueOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.options || RogueOptions.create()\n\t\t\t: RogueOptions.create(),\n\t},\n\t[Spec.SpecHealingPriest]: {\n\t\trotationCreate: () => HealingPriestRotation.create(),\n\t\trotationEquals: (a, b) => HealingPriestRotation.equals(a as HealingPriestRotation, b as HealingPriestRotation),\n\t\trotationCopy: (a) => HealingPriestRotation.clone(a as HealingPriestRotation),\n\t\trotationToJson: (a) => HealingPriestRotation.toJson(a as HealingPriestRotation),\n\t\trotationFromJson: (obj) => HealingPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.rotation || HealingPriestRotation.create()\n\t\t\t: HealingPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HealingPriestOptions.create(),\n\t\toptionsEquals: (a, b) => HealingPriestOptions.equals(a as HealingPriestOptions, b as HealingPriestOptions),\n\t\toptionsCopy: (a) => HealingPriestOptions.clone(a as HealingPriestOptions),\n\t\toptionsToJson: (a) => HealingPriestOptions.toJson(a as HealingPriestOptions),\n\t\toptionsFromJson: (obj) => HealingPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.options || HealingPriestOptions.create()\n\t\t\t: HealingPriestOptions.create(),\n\t},\n\t[Spec.SpecShadowPriest]: {\n\t\trotationCreate: () => ShadowPriestRotation.create(),\n\t\trotationEquals: (a, b) => ShadowPriestRotation.equals(a as ShadowPriestRotation, b as ShadowPriestRotation),\n\t\trotationCopy: (a) => ShadowPriestRotation.clone(a as ShadowPriestRotation),\n\t\trotationToJson: (a) => ShadowPriestRotation.toJson(a as ShadowPriestRotation),\n\t\trotationFromJson: (obj) => ShadowPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.rotation || ShadowPriestRotation.create()\n\t\t\t: ShadowPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ShadowPriestOptions.create(),\n\t\toptionsEquals: (a, b) => ShadowPriestOptions.equals(a as ShadowPriestOptions, b as ShadowPriestOptions),\n\t\toptionsCopy: (a) => ShadowPriestOptions.clone(a as ShadowPriestOptions),\n\t\toptionsToJson: (a) => ShadowPriestOptions.toJson(a as ShadowPriestOptions),\n\t\toptionsFromJson: (obj) => ShadowPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.options || ShadowPriestOptions.create()\n\t\t\t: ShadowPriestOptions.create(),\n\t},\n\t[Spec.SpecSmitePriest]: {\n\t\trotationCreate: () => SmitePriestRotation.create(),\n\t\trotationEquals: (a, b) => SmitePriestRotation.equals(a as SmitePriestRotation, b as SmitePriestRotation),\n\t\trotationCopy: (a) => SmitePriestRotation.clone(a as SmitePriestRotation),\n\t\trotationToJson: (a) => SmitePriestRotation.toJson(a as SmitePriestRotation),\n\t\trotationFromJson: (obj) => SmitePriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.rotation || SmitePriestRotation.create()\n\t\t\t: SmitePriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => SmitePriestOptions.create(),\n\t\toptionsEquals: (a, b) => SmitePriestOptions.equals(a as SmitePriestOptions, b as SmitePriestOptions),\n\t\toptionsCopy: (a) => SmitePriestOptions.clone(a as SmitePriestOptions),\n\t\toptionsToJson: (a) => SmitePriestOptions.toJson(a as SmitePriestOptions),\n\t\toptionsFromJson: (obj) => SmitePriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.options || SmitePriestOptions.create()\n\t\t\t: SmitePriestOptions.create(),\n\t},\n\t[Spec.SpecWarlock]: {\n\t\trotationCreate: () => WarlockRotation.create(),\n\t\trotationEquals: (a, b) => WarlockRotation.equals(a as WarlockRotation, b as WarlockRotation),\n\t\trotationCopy: (a) => WarlockRotation.clone(a as WarlockRotation),\n\t\trotationToJson: (a) => WarlockRotation.toJson(a as WarlockRotation),\n\t\trotationFromJson: (obj) => WarlockRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.rotation || WarlockRotation.create()\n\t\t\t: WarlockRotation.create(),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: (a) => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: (a) => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: (obj) => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => WarlockOptions.create(),\n\t\toptionsEquals: (a, b) => WarlockOptions.equals(a as WarlockOptions, b as WarlockOptions),\n\t\toptionsCopy: (a) => WarlockOptions.clone(a as WarlockOptions),\n\t\toptionsToJson: (a) => WarlockOptions.toJson(a as WarlockOptions),\n\t\toptionsFromJson: (obj) => WarlockOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.options || WarlockOptions.create()\n\t\t\t: WarlockOptions.create(),\n\t},\n\t[Spec.SpecWarrior]: {\n\t\trotationCreate: () => WarriorRotation.create(),\n\t\trotationEquals: (a, b) => WarriorRotation.equals(a as WarriorRotation, b as WarriorRotation),\n\t\trotationCopy: (a) => WarriorRotation.clone(a as WarriorRotation),\n\t\trotationToJson: (a) => WarriorRotation.toJson(a as WarriorRotation),\n\t\trotationFromJson: (obj) => WarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.rotation || WarriorRotation.create()\n\t\t\t: WarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => WarriorOptions.create(),\n\t\toptionsEquals: (a, b) => WarriorOptions.equals(a as WarriorOptions, b as WarriorOptions),\n\t\toptionsCopy: (a) => WarriorOptions.clone(a as WarriorOptions),\n\t\toptionsToJson: (a) => WarriorOptions.toJson(a as WarriorOptions),\n\t\toptionsFromJson: (obj) => WarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.options || WarriorOptions.create()\n\t\t\t: WarriorOptions.create(),\n\t},\n\t[Spec.SpecProtectionWarrior]: {\n\t\trotationCreate: () => ProtectionWarriorRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionWarriorRotation.equals(a as ProtectionWarriorRotation, b as ProtectionWarriorRotation),\n\t\trotationCopy: (a) => ProtectionWarriorRotation.clone(a as ProtectionWarriorRotation),\n\t\trotationToJson: (a) => ProtectionWarriorRotation.toJson(a as ProtectionWarriorRotation),\n\t\trotationFromJson: (obj) => ProtectionWarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.rotation || ProtectionWarriorRotation.create()\n\t\t\t: ProtectionWarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionWarriorOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionWarriorOptions.equals(a as ProtectionWarriorOptions, b as ProtectionWarriorOptions),\n\t\toptionsCopy: (a) => ProtectionWarriorOptions.clone(a as ProtectionWarriorOptions),\n\t\toptionsToJson: (a) => ProtectionWarriorOptions.toJson(a as ProtectionWarriorOptions),\n\t\toptionsFromJson: (obj) => ProtectionWarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.options || ProtectionWarriorOptions.create()\n\t\t\t: ProtectionWarriorOptions.create(),\n\t},\n\t[Spec.SpecDeathknight]: {\n\t\trotationCreate: () => DeathknightRotation.create(),\n\t\trotationEquals: (a, b) => DeathknightRotation.equals(a as DeathknightRotation, b as DeathknightRotation),\n\t\trotationCopy: (a) => DeathknightRotation.clone(a as DeathknightRotation),\n\t\trotationToJson: (a) => DeathknightRotation.toJson(a as DeathknightRotation),\n\t\trotationFromJson: (obj) => DeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.rotation || DeathknightRotation.create()\n\t\t\t: DeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => DeathknightOptions.equals(a as DeathknightOptions, b as DeathknightOptions),\n\t\toptionsCopy: (a) => DeathknightOptions.clone(a as DeathknightOptions),\n\t\toptionsToJson: (a) => DeathknightOptions.toJson(a as DeathknightOptions),\n\t\toptionsFromJson: (obj) => DeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.options || DeathknightOptions.create()\n\t\t\t: DeathknightOptions.create(),\n\t},\n\t[Spec.SpecTankDeathknight]: {\n\t\trotationCreate: () => TankDeathknightRotation.create(),\n\t\trotationEquals: (a, b) => TankDeathknightRotation.equals(a as TankDeathknightRotation, b as TankDeathknightRotation),\n\t\trotationCopy: (a) => TankDeathknightRotation.clone(a as TankDeathknightRotation),\n\t\trotationToJson: (a) => TankDeathknightRotation.toJson(a as TankDeathknightRotation),\n\t\trotationFromJson: (obj) => TankDeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.rotation || TankDeathknightRotation.create()\n\t\t\t: TankDeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => TankDeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => TankDeathknightOptions.equals(a as TankDeathknightOptions, b as TankDeathknightOptions),\n\t\toptionsCopy: (a) => TankDeathknightOptions.clone(a as TankDeathknightOptions),\n\t\toptionsToJson: (a) => TankDeathknightOptions.toJson(a as TankDeathknightOptions),\n\t\toptionsFromJson: (obj) => TankDeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.options || TankDeathknightOptions.create()\n\t\t\t: TankDeathknightOptions.create(),\n\t},\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n\t[Race.RaceUnknown]: Faction.Unknown,\n\t[Race.RaceBloodElf]: Faction.Horde,\n\t[Race.RaceDraenei]: Faction.Alliance,\n\t[Race.RaceDwarf]: Faction.Alliance,\n\t[Race.RaceGnome]: Faction.Alliance,\n\t[Race.RaceHuman]: Faction.Alliance,\n\t[Race.RaceNightElf]: Faction.Alliance,\n\t[Race.RaceOrc]: Faction.Horde,\n\t[Race.RaceTauren]: Faction.Horde,\n\t[Race.RaceTroll]: Faction.Horde,\n\t[Race.RaceUndead]: Faction.Horde,\n};\n\nexport const specToClass: Record<Spec, Class> = {\n\t[Spec.SpecBalanceDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralTankDruid]: Class.ClassDruid,\n\t[Spec.SpecRestorationDruid]: Class.ClassDruid,\n\t[Spec.SpecHunter]: Class.ClassHunter,\n\t[Spec.SpecMage]: Class.ClassMage,\n\t[Spec.SpecRogue]: Class.ClassRogue,\n\t[Spec.SpecHolyPaladin]: Class.ClassPaladin,\n\t[Spec.SpecProtectionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecRetributionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecHealingPriest]: Class.ClassPriest,\n\t[Spec.SpecShadowPriest]: Class.ClassPriest,\n\t[Spec.SpecSmitePriest]: Class.ClassPriest,\n\t[Spec.SpecElementalShaman]: Class.ClassShaman,\n\t[Spec.SpecEnhancementShaman]: Class.ClassShaman,\n\t[Spec.SpecRestorationShaman]: Class.ClassShaman,\n\t[Spec.SpecWarlock]: Class.ClassWarlock,\n\t[Spec.SpecWarrior]: Class.ClassWarrior,\n\t[Spec.SpecProtectionWarrior]: Class.ClassWarrior,\n\t[Spec.SpecDeathknight]: Class.ClassDeathknight,\n\t[Spec.SpecTankDeathknight]: Class.ClassDeathknight,\n};\n\nconst druidRaces = [\n\tRace.RaceNightElf,\n\tRace.RaceTauren,\n];\nconst hunterRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst mageRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst paladinRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n];\nconst priestRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst rogueRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst shamanRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst warlockRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceOrc,\n\tRace.RaceUndead,\n];\nconst warriorRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst deathKnightRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\n\nexport const specToEligibleRaces: Record<Spec, Array<Race>> = {\n\t[Spec.SpecBalanceDruid]: druidRaces,\n\t[Spec.SpecFeralDruid]: druidRaces,\n\t[Spec.SpecFeralTankDruid]: druidRaces,\n\t[Spec.SpecRestorationDruid]: druidRaces,\n\t[Spec.SpecElementalShaman]: shamanRaces,\n\t[Spec.SpecEnhancementShaman]: shamanRaces,\n\t[Spec.SpecRestorationShaman]: shamanRaces,\n\t[Spec.SpecHunter]: hunterRaces,\n\t[Spec.SpecMage]: mageRaces,\n\t[Spec.SpecHolyPaladin]: paladinRaces,\n\t[Spec.SpecProtectionPaladin]: paladinRaces,\n\t[Spec.SpecRetributionPaladin]: paladinRaces,\n\t[Spec.SpecRogue]: rogueRaces,\n\t[Spec.SpecHealingPriest]: priestRaces,\n\t[Spec.SpecShadowPriest]: priestRaces,\n\t[Spec.SpecSmitePriest]: priestRaces,\n\t[Spec.SpecWarlock]: warlockRaces,\n\t[Spec.SpecWarrior]: warriorRaces,\n\t[Spec.SpecProtectionWarrior]: warriorRaces,\n\t[Spec.SpecDeathknight]: deathKnightRaces,\n\t[Spec.SpecTankDeathknight]: deathKnightRaces,\n};\n\n// Specs that can dual wield. This could be based on class, except that\n// Enhancement Shaman learn dual wield from a talent.\nconst dualWieldSpecs: Array<Spec> = [\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecHunter,\n\tSpec.SpecRogue,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\nexport function isDualWieldSpec(spec: Spec): boolean {\n\treturn dualWieldSpecs.includes(spec);\n}\n\nconst tankSpecs: Array<Spec> = [\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecTankDeathknight,\n];\nexport function isTankSpec(spec: Spec): boolean {\n\treturn tankSpecs.includes(spec);\n}\n\nconst healingSpecs: Array<Spec> = [\n\tSpec.SpecRestorationDruid,\n\tSpec.SpecHolyPaladin,\n\tSpec.SpecHealingPriest,\n\tSpec.SpecRestorationShaman,\n];\nexport function isHealingSpec(spec: Spec): boolean {\n\treturn healingSpecs.includes(spec);\n}\n\nconst rangedDpsSpecs: Array<Spec> = [\n\tSpec.SpecBalanceDruid,\n\tSpec.SpecHunter,\n\tSpec.SpecMage,\n\tSpec.SpecShadowPriest,\n\tSpec.SpecSmitePriest,\n\tSpec.SpecElementalShaman,\n\tSpec.SpecWarlock,\n];\nexport function isRangedDpsSpec(spec: Spec): boolean {\n\treturn rangedDpsSpecs.includes(spec);\n}\nexport function isMeleeDpsSpec(spec: Spec): boolean {\n\treturn !isTankSpec(spec) && !isHealingSpec(spec) && !isRangedDpsSpec(spec);\n}\n\n// Prefixes used for storing browser data for each site. Even if a Spec is\n// renamed, DO NOT change these values or people will lose their saved data.\nexport const specToLocalStorageKey: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '__wotlk_balance_druid',\n\t[Spec.SpecFeralDruid]: '__wotlk_feral_druid',\n\t[Spec.SpecFeralTankDruid]: '__wotlk_feral_tank_druid',\n\t[Spec.SpecRestorationDruid]: '__wotlk_restoration_druid',\n\t[Spec.SpecElementalShaman]: '__wotlk_elemental_shaman',\n\t[Spec.SpecEnhancementShaman]: '__wotlk_enhacement_shaman',\n\t[Spec.SpecRestorationShaman]: '__wotlk_restoration_shaman',\n\t[Spec.SpecHunter]: '__wotlk_hunter',\n\t[Spec.SpecMage]: '__wotlk_mage',\n\t[Spec.SpecHolyPaladin]: '__wotlk_holy_paladin',\n\t[Spec.SpecProtectionPaladin]: '__wotlk_protection_paladin',\n\t[Spec.SpecRetributionPaladin]: '__wotlk_retribution_paladin',\n\t[Spec.SpecRogue]: '__wotlk_rogue',\n\t[Spec.SpecHealingPriest]: '__wotlk_healing_priest',\n\t[Spec.SpecShadowPriest]: '__wotlk_shadow_priest',\n\t[Spec.SpecSmitePriest]: '__wotlk_smite_priest',\n\t[Spec.SpecWarlock]: '__wotlk_warlock',\n\t[Spec.SpecWarrior]: '__wotlk_warrior',\n\t[Spec.SpecProtectionWarrior]: '__wotlk_protection_warrior',\n\t[Spec.SpecDeathknight]: '__wotlk_deathknight',\n\t[Spec.SpecTankDeathknight]: '__wotlk_tank_deathknight',\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpecProto<SpecType extends Spec>(\n\tspec: Spec,\n\tplayer: Player,\n\trotation: SpecRotation<SpecType>,\n\tspecOptions: SpecOptions<SpecType>): Player {\n\tconst copy = Player.clone(player);\n\n\tswitch (spec) {\n\t\tcase Spec.SpecBalanceDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'balanceDruid',\n\t\t\t\tbalanceDruid: BalanceDruid.create({\n\t\t\t\t\trotation: rotation as BalanceDruidRotation,\n\t\t\t\t\toptions: specOptions as BalanceDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralDruid',\n\t\t\t\tferalDruid: FeralDruid.create({\n\t\t\t\t\trotation: rotation as FeralDruidRotation,\n\t\t\t\t\toptions: specOptions as FeralDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralTankDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralTankDruid',\n\t\t\t\tferalTankDruid: FeralTankDruid.create({\n\t\t\t\t\trotation: rotation as FeralTankDruidRotation,\n\t\t\t\t\toptions: specOptions as FeralTankDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationDruid',\n\t\t\t\trestorationDruid: RestorationDruid.create({\n\t\t\t\t\trotation: rotation as RestorationDruidRotation,\n\t\t\t\t\toptions: specOptions as RestorationDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecElementalShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'elementalShaman',\n\t\t\t\telementalShaman: ElementalShaman.create({\n\t\t\t\t\trotation: rotation as ElementalShamanRotation,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecEnhancementShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'enhancementShaman',\n\t\t\t\tenhancementShaman: EnhancementShaman.create({\n\t\t\t\t\trotation: rotation as EnhancementShamanRotation,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationShaman',\n\t\t\t\trestorationShaman: RestorationShaman.create({\n\t\t\t\t\trotation: rotation as RestorationShamanRotation,\n\t\t\t\t\toptions: specOptions as RestorationShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'hunter',\n\t\t\t\thunter: Hunter.create({\n\t\t\t\t\trotation: rotation as HunterRotation,\n\t\t\t\t\toptions: specOptions as HunterOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'mage',\n\t\t\t\tmage: Mage.create({\n\t\t\t\t\trotation: rotation as MageRotation,\n\t\t\t\t\toptions: specOptions as MageOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHolyPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'holyPaladin',\n\t\t\t\tholyPaladin: HolyPaladin.create({\n\t\t\t\t\trotation: rotation as HolyPaladinRotation,\n\t\t\t\t\toptions: specOptions as HolyPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionPaladin',\n\t\t\t\tprotectionPaladin: ProtectionPaladin.create({\n\t\t\t\t\trotation: rotation as ProtectionPaladinRotation,\n\t\t\t\t\toptions: specOptions as ProtectionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRetributionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'retributionPaladin',\n\t\t\t\tretributionPaladin: RetributionPaladin.create({\n\t\t\t\t\trotation: rotation as RetributionPaladinRotation,\n\t\t\t\t\toptions: specOptions as RetributionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'rogue',\n\t\t\t\trogue: Rogue.create({\n\t\t\t\t\trotation: rotation as RogueRotation,\n\t\t\t\t\toptions: specOptions as RogueOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHealingPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'healingPriest',\n\t\t\t\thealingPriest: HealingPriest.create({\n\t\t\t\t\trotation: rotation as HealingPriestRotation,\n\t\t\t\t\toptions: specOptions as HealingPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecShadowPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'shadowPriest',\n\t\t\t\tshadowPriest: ShadowPriest.create({\n\t\t\t\t\trotation: rotation as ShadowPriestRotation,\n\t\t\t\t\toptions: specOptions as ShadowPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSmitePriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'smitePriest',\n\t\t\t\tsmitePriest: SmitePriest.create({\n\t\t\t\t\trotation: rotation as SmitePriestRotation,\n\t\t\t\t\toptions: specOptions as SmitePriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warlock',\n\t\t\t\twarlock: Warlock.create({\n\t\t\t\t\trotation: rotation as WarlockRotation,\n\t\t\t\t\toptions: specOptions as WarlockOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warrior',\n\t\t\t\twarrior: Warrior.create({\n\t\t\t\t\trotation: rotation as WarriorRotation,\n\t\t\t\t\toptions: specOptions as WarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionWarrior',\n\t\t\t\tprotectionWarrior: ProtectionWarrior.create({\n\t\t\t\t\trotation: rotation as ProtectionWarriorRotation,\n\t\t\t\t\toptions: specOptions as ProtectionWarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'deathknight',\n\t\t\t\tdeathknight: Deathknight.create({\n\t\t\t\t\trotation: rotation as DeathknightRotation,\n\t\t\t\t\toptions: specOptions as DeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecTankDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'tankDeathknight',\n\t\t\t\ttankDeathknight: TankDeathknight.create({\n\t\t\t\t\trotation: rotation as TankDeathknightRotation,\n\t\t\t\t\toptions: specOptions as TankDeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t}\n}\n\nexport function playerToSpec(player: Player): Spec {\n\tconst specValues = getEnumValues(Spec);\n\tfor (let i = 0; i < specValues.length; i++) {\n\t\tconst spec = specValues[i] as Spec;\n\t\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\t\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\t\tspecString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n\t\tif (player.spec.oneofKind == specString) {\n\t\t\treturn spec;\n\t\t}\n\t}\n\n\tthrow new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nexport const classToMaxArmorType: Record<Class, ArmorType> = {\n\t[Class.ClassUnknown]: ArmorType.ArmorTypeUnknown,\n\t[Class.ClassDruid]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassHunter]: ArmorType.ArmorTypeMail,\n\t[Class.ClassMage]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassPaladin]: ArmorType.ArmorTypePlate,\n\t[Class.ClassPriest]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassRogue]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassShaman]: ArmorType.ArmorTypeMail,\n\t[Class.ClassWarlock]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassWarrior]: ArmorType.ArmorTypePlate,\n\t[Class.ClassDeathknight]: ArmorType.ArmorTypePlate,\n};\n\nexport const classToEligibleRangedWeaponTypes: Record<Class, Array<RangedWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [RangedWeaponType.RangedWeaponTypeIdol],\n\t[Class.ClassHunter]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassMage]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassPaladin]: [RangedWeaponType.RangedWeaponTypeLibram],\n\t[Class.ClassPriest]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassRogue]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassShaman]: [RangedWeaponType.RangedWeaponTypeTotem],\n\t[Class.ClassWarlock]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassWarrior]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassDeathknight]: [\n\t\tRangedWeaponType.RangedWeaponTypeSigil,\n\t],\n};\n\ninterface EligibleWeaponType {\n\tweaponType: WeaponType,\n\tcanUseTwoHand?: boolean,\n}\n\nexport const classToEligibleWeaponTypes: Record<Class, Array<EligibleWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t],\n\t[Class.ClassHunter]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassMage]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassPaladin]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassPriest]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassRogue]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassShaman]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassWarlock]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassWarrior]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassDeathknight]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t// TODO: validate proficiencies\n\t],\n};\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeAxe,\n\t\tWeaponType.WeaponTypeDagger,\n\t\tWeaponType.WeaponTypePolearm,\n\t\tWeaponType.WeaponTypeSword,\n\t].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeFist,\n\t\tWeaponType.WeaponTypeMace,\n\t\tWeaponType.WeaponTypeStaff,\n\t].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {\n\t[Spec.SpecBalanceDruid]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\t// TODO: Fix this\n\t\t\treturn (12 * 0.65) + (3 * 45);\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn (21 * 0.65) + (3 * 45);\n\t\t}\n\t\treturn 0;\n\t},\n\t[Spec.SpecElementalShaman]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn (((playerStats.getStat(Stat.StatSpellPower) * 0.795) + 603) * 2 * (playerStats.getStat(Stat.StatSpellCrit) / 2208) * 0.045) / 0.795;\n\t\t}\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecWarlock]: (gem, playerStats) => {\n\t\t// TODO: make it gear dependant\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn 84;\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn 80;\n\t\t}\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecFeralDruid]: (gem, _) => {\n\t\t// Unknown actual EP, but this is the only effect that matters\n\t\tif (gem.id == Gems.RELENTLESS_EARTHSIEGE_DIAMOND.id || gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id || gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n    \t\treturn 80;\n\t\t}\n\t\treturn 0;\n\t}\n};\n\nexport function getMetaGemEffectEP(spec: Spec, gem: Gem, playerStats: Stats) {\n\tif (metaGemEffectEPs[spec]) {\n\t\treturn metaGemEffectEPs[spec]!(gem, playerStats);\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem(item: Item, spec: Spec, slot: ItemSlot | undefined): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\tif ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tconst eligibleWeaponType = classToEligibleWeaponTypes[playerClass].find(wt => wt.weaponType == item.weaponType);\n\t\tif (!eligibleWeaponType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand))\n\t\t\t&& ![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType)\n\t\t\t&& !dualWieldSpecs.includes(spec)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n\t\t\treturn false;\n\t\t}\n\t\tif (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && spec != Spec.SpecWarrior) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeRanged) {\n\t\treturn classToEligibleRangedWeaponTypes[playerClass].includes(item.rangedWeaponType);\n\t}\n\n\t// At this point, we know the item is an armor piece (feet, chest, legs, etc).\n\treturn classToMaxArmorType[playerClass] >= item.armorType;\n}\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n\t[ItemType.ItemTypeUnknown]: [],\n\t[ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n\t[ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n\t[ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n\t[ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n\t[ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n\t[ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n\t[ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n\t[ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n\t[ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n\t[ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n\t[ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n\t[ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n\t[ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[item.type]) {\n\t\treturn itemTypeToSlotsMap[item.type]!;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t// Missing HandTypeTwoHand \n\t\t// We allow 2H weapons to be wielded in mainhand and offhand for Fury Warriors\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n};\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n\tif (mainHand == null || offHand == null) {\n\t\treturn true;\n\t}\n\n\tif (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (mainHand.handType == HandType.HandTypeTwoHand && \n\t\t(mainHand.weaponType == WeaponType.WeaponTypePolearm || mainHand.weaponType == WeaponType.WeaponTypeStaff)) {\n\t\treturn false;\n\t}\n\n\tif (offHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (offHand.handType == HandType.HandTypeTwoHand && \n\t\t(offHand.weaponType == WeaponType.WeaponTypePolearm || offHand.weaponType == WeaponType.WeaponTypeStaff)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n// \n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n\treturn [enchant.type].concat(enchant.extraTypes || []).map(type => {\n\t\tif (itemTypeToSlotsMap[type]) {\n\t\t\treturn itemTypeToSlotsMap[type]!;\n\t\t}\n\n\t\tif (type == ItemType.ItemTypeWeapon) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\n\t\t// Should never reach here\n\t\tthrow new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n\t}).flat();\n};\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n\tconst sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n\tif (sharedSlots.length == 0)\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand)\n\t\treturn false;\n\n\tif ((enchant.enchantType == EnchantType.EnchantTypeShield) != (item.weaponType == WeaponType.WeaponTypeShield))\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeStaff && item.weaponType != WeaponType.WeaponTypeStaff)\n\t\treturn false;\n\n\tif (item.weaponType == WeaponType.WeaponTypeOffHand)\n\t\treturn false;\n\n\tif (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n\t\tif (![\n\t\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\t].includes(item.rangedWeaponType))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nexport function canEquipEnchant(enchant: Enchant, spec: Spec): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport const NO_TARGET = -1;\n\nexport function newRaidTarget(raidIndex: number): RaidTarget {\n\treturn RaidTarget.create({\n\t\ttargetIndex: raidIndex,\n\t});\n}\n\nexport function emptyRaidTarget(): RaidTarget {\n\treturn newRaidTarget(NO_TARGET);\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = BlessingsAssignments.create();\n\tfor (let i = 0; i < numPaladins; i++) {\n\t\tassignments.paladins.push(BlessingsAssignment.create({\n\t\t\tblessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n\t\t}));\n\t}\n\treturn assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number, data: Array<{ spec: Spec, blessings: Array<Blessings> }>): BlessingsAssignments {\n\tconst assignments = makeBlankBlessingsAssignments(numPaladins);\n\tfor (let i = 0; i < data.length; i++) {\n\t\tconst spec = data[i].spec;\n\t\tconst blessings = data[i].blessings;\n\t\tfor (let j = 0; j < blessings.length; j++) {\n\t\t\tif (j >= assignments.paladins.length) {\n\t\t\t\t// Can't assign more blessings since we ran out of paladins\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tassignments.paladins[j].blessings[spec] = blessings[j];\n\t\t}\n\t}\n\treturn assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n\treturn makeBlessingsAssignments(numPaladins, [\n\t\t{ spec: Spec.SpecBalanceDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralTankDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecRestorationDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecHunter, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecMage, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecHolyPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecProtectionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfSanctuary, Blessings.BlessingOfWisdom, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecRetributionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecHealingPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecShadowPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecSmitePriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRogue, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecElementalShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecEnhancementShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRestorationShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarlock, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecProtectionWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSalvation] },\n\t\t{ spec: Spec.SpecTankDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t]);\n};\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n\tResourceType.ResourceTypeEnergy,\n\tResourceType.ResourceTypeRage,\n\tResourceType.ResourceTypeComboPoints,\n\tResourceType.ResourceTypeFocus,\n\tResourceType.ResourceTypeRunicPower,\n\tResourceType.ResourceTypeBloodRune,\n\tResourceType.ResourceTypeFrostRune,\n\tResourceType.ResourceTypeUnholyRune,\n\tResourceType.ResourceTypeDeathRune,\n];\n\nexport const AL_CATEGORY_HARD_MODE = 'Hard Mode';\nexport const AL_CATEGORY_TITAN_RUNE = 'Titan Rune';\n","export const wowheadSupportedLanguages: Record<string, string> = {\n\t'en': 'English',\n\t'cn': '简体中文',\n\t'de': 'Deutsch',\n\t'es': 'Español',\n\t'fr': 'Français',\n\t'it': 'Italiano',\n\t'ko': '한국어',\n\t'pt': 'Português Brasileiro',\n\t'ru': 'Русский',\n};\n\n// Returns a 2-letter language code if it is a wowhead-supported language, or '' otherwise.\nexport function getBrowserLanguageCode(): string {\n\tconst browserLang = (navigator.language || '').substring(0, 2);\n\tif (Object.keys(wowheadSupportedLanguages).includes(browserLang)) {\n\t\treturn browserLang;\n\t} else {\n\t\treturn '';\n\t}\n}\n\nexport function getLanguageCode(): string {\n\treturn cachedLanguageCode_;\n}\n\nexport function getWowheadLanguagePrefix(): string {\n\treturn cachedWowheadLanguagePrefix_;\n}\n\nexport function setLanguageCode(newLang: string) {\n\t// Use '' instead of 'en' because wowhead doesn't like having the en/ prefix.\n\tcachedLanguageCode_ = newLang == 'en' ? '' : newLang;\n\tcachedWowheadLanguagePrefix_ = cachedLanguageCode_ ? cachedLanguageCode_ + '/' : '';\n}\n\nlet cachedLanguageCode_: string = '';\nlet cachedWowheadLanguagePrefix_: string = '';\n","import { getWowheadLanguagePrefix } from '../constants/lang.js';\nimport { ActionID as ActionIdProto } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\nimport { OtherAction } from '../proto/common.js';\nimport { IconData } from '../proto/ui.js';\nimport { NO_TARGET } from '../proto_utils/utils.js';\nimport {\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { Database } from './database.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n\treadonly itemId: number;\n\treadonly spellId: number;\n\treadonly otherId: OtherAction;\n\treadonly tag: number;\n\n\treadonly baseName: string; // The name without any tag additions.\n\treadonly name: string;\n\treadonly iconUrl: string;\n\n\tprivate constructor(itemId: number, spellId: number, otherId: OtherAction, tag: number, baseName: string, name: string, iconUrl: string) {\n\t\tthis.itemId = itemId;\n\t\tthis.spellId = spellId;\n\t\tthis.otherId = otherId;\n\t\tthis.tag = tag;\n\n\t\tswitch (otherId) {\n\t\t\tcase OtherAction.OtherActionNone:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionWait:\n\t\t\t\tbaseName = 'Wait';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaRegen:\n\t\t\t\tname = 'Mana Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Casting)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Not Casting)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionEnergyRegen:\n\t\t\t\tbaseName = 'Energy Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFocusRegen:\n\t\t\t\tbaseName = 'Focus Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaGain:\n\t\t\t\tbaseName = 'Mana Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRageGain:\n\t\t\t\tbaseName = 'Rage Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionAttack:\n\t\t\t\tname = 'Attack';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionShoot:\n\t\t\t\tname = 'Shoot';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPet:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRefund:\n\t\t\t\tbaseName = 'Refund';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDamageTaken:\n\t\t\t\tbaseName = 'Damage Taken';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionHealingModel:\n\t\t\t\tbaseName = 'Incoming HPS';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionBloodRuneGain:\n\t\t\t\tbaseName = 'Blood Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFrostRuneGain:\n\t\t\t\tbaseName = 'Frost Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionUnholyRuneGain:\n\t\t\t\tbaseName = 'Unholy Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDeathRuneGain:\n\t\t\t\tbaseName = 'Death Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.baseName = baseName;\n\t\tthis.name = name || baseName;\n\t\tthis.iconUrl = iconUrl;\n\t}\n\n\tanyId(): number {\n\t\treturn this.itemId || this.spellId || this.otherId;\n\t}\n\n\tequals(other: ActionId): boolean {\n\t\treturn this.equalsIgnoringTag(other) && this.tag == other.tag;\n\t}\n\n\tequalsIgnoringTag(other: ActionId): boolean {\n\t\treturn (\n\t\t\tthis.itemId == other.itemId\n\t\t\t&& this.spellId == other.spellId\n\t\t\t&& this.otherId == other.otherId);\n\t}\n\n\tsetBackground(elem: HTMLElement) {\n\t\tif (this.iconUrl) {\n\t\t\telem.style.backgroundImage = `url('${this.iconUrl}')`;\n\t\t}\n\t}\n\n\tstatic makeItemUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?item=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}item=${id}`;\n\t\t}\n\t}\n\tstatic makeSpellUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?spell=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}spell=${id}`;\n\t\t}\n\t}\n\tstatic makeQuestUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?quest=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}quest=${id}`;\n\t\t}\n\t}\n\tstatic makeNpcUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?npc=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}npc=${id}`;\n\t\t}\n\t}\n\tstatic makeZoneUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?zone=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}zone=${id}`;\n\t\t}\n\t}\n\n\tsetWowheadHref(elem: HTMLAnchorElement) {\n\t\tif (this.itemId) {\n\t\t\telem.href = ActionId.makeItemUrl(this.itemId);\n\t\t} else if (this.spellId) {\n\t\t\telem.href = ActionId.makeSpellUrl(this.spellId);\n\t\t}\n\t}\n\n\tsetBackgroundAndHref(elem: HTMLAnchorElement) {\n\t\tthis.setBackground(elem);\n\t\tthis.setWowheadHref(elem);\n\t}\n\n\tasync fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n\t\tconst filled = await this.fill();\n\t\tif (setHref) {\n\t\t\tfilled.setWowheadHref(elem);\n\t\t}\n\t\tif (setBackground) {\n\t\t\tfilled.setBackground(elem);\n\t\t}\n\t\treturn filled;\n\t}\n\n\t// Returns an ActionId with the name and iconUrl fields filled.\n\t// playerIndex is the optional index of the player to whom this ID corresponds.\n\tasync fill(playerIndex?: number): Promise<ActionId> {\n\t\tif (this.name || this.iconUrl) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.otherId) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst tooltipData = await ActionId.getTooltipData(this);\n\n\t\tconst baseName = tooltipData['name'];\n\t\tlet name = baseName;\n\t\tswitch (baseName) {\n\t\t\tcase 'Arcane Blast':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (No Stacks)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ` (1 Stack)`;\n\t\t\t\t} else if (this.tag > 2) {\n\t\t\t\t\tname += ` (${this.tag - 1} Stacks)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fireball':\n\t\t\tcase 'Flamestrike':\n\t\t\tcase 'Pyroblast':\n\t\t\t\tif (this.tag) name += ' (DoT)';\n\t\t\t\tbreak;\n\t\t\tcase 'Living Bomb':\n\t\t\t\tif (this.spellId == 55362) name += ' (Explosion)';\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Flay':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Shattering Throw':\n\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\tname += ` (self)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Envenom':\n\t\t\tcase 'Eviscerate':\n\t\t\tcase 'Expose Armor':\n\t\t\tcase 'Rupture':\n\t\t\tcase 'Slice and Dice':\n\t\t\t\tif (this.tag) name += ` (${this.tag} CP)`;\n\t\t\t\tbreak;\n\t\t\tcase 'Instant Poison IX':\n\t\t\tcase 'Wound Poison VII':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Deadly)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shiv)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fan of Knives':\n\t\t\tcase 'Killing Spree':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Tricks of the Trade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Not Self)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Chain Lightning':\n\t\t\tcase 'Lightning Bolt':\n\t\t\t\tif (this.tag == 6) {\n\t\t\t\t\tname += ' (LO)';\n\t\t\t\t} else if (this.tag) {\n\t\t\t\t\tname += ` (${this.tag} MW)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Shield':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Proc)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Righteous Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// For targetted buffs, tag is the source player's raid index or -1 if none.\n\t\t\tcase 'Bloodlust':\n\t\t\tcase 'Ferocious Inspiration':\n\t\t\tcase 'Innervate':\n      \t\t\tcase 'Focus Magic':\n\t\t\tcase 'Mana Tide Totem':\n\t\t\tcase 'Power Infusion':\n\t\t\t\tif (this.tag != NO_TARGET) {\n\t\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\t\tname += ` (self)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname += ` (from #${this.tag + 1})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Darkmoon Card: Crusade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Melee)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Spell)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frozen Blows':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Frost)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Scourge Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shadow)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Heart Strike':\n\t\t\t\t/*if (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else */if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off-target)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Rune Strike':\n\t\t\tcase 'Frost Strike':\n\t\t\tcase 'Plague Strike':\n\t\t\tcase 'Blood Strike':\n\t\t\tcase 'Death Strike':\n\t\t\tcase 'Obliterate':\n\t\t\tcase 'Blood-Caked Strike':\n\t\t\tcase 'Lightning Speed':\n\t\t\tcase 'Windfury Weapon':\n\t\t\tcase 'Berserk':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Battle Shout':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Snapshot)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Seed of Corruption':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Explosion)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Thunderfury':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (ST)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (MT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.tag) {\n\t\t\t\t\tname += ' (??)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst idString = this.toProtoString();\n\t\tconst iconOverrideId = idOverrides[idString] || null;\n\n\t\tlet iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n\t\tif (iconOverrideId) {\n\t\t\tconst overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n\t\t\ticonUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n\t\t}\n\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl);\n\t}\n\n\ttoString(): string {\n\t\treturn this.toStringIgnoringTag() + (this.tag ? ('-' + this.tag) : '');\n\t}\n\n\ttoStringIgnoringTag(): string {\n\t\tif (this.itemId) {\n\t\t\treturn 'item-' + this.itemId;\n\t\t} else if (this.spellId) {\n\t\t\treturn 'spell-' + this.spellId;\n\t\t} else if (this.otherId) {\n\t\t\treturn 'other-' + this.otherId;\n\t\t} else {\n\t\t\tthrow new Error('Empty action id!');\n\t\t}\n\t}\n\n\ttoProto(): ActionIdProto {\n\t\tconst protoId = ActionIdProto.create({\n\t\t\ttag: this.tag,\n\t\t});\n\n\t\tif (this.itemId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'itemId',\n\t\t\t\titemId: this.itemId,\n\t\t\t};\n\t\t} else if (this.spellId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'spellId',\n\t\t\t\tspellId: this.spellId,\n\t\t\t};\n\t\t} else if (this.otherId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'otherId',\n\t\t\t\totherId: this.otherId,\n\t\t\t};\n\t\t}\n\n\t\treturn protoId;\n\t}\n\n\ttoProtoString(): string {\n\t\treturn ActionIdProto.toJsonString(this.toProto());\n\t}\n\n\twithoutTag(): ActionId {\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl);\n\t}\n\n\tstatic fromEmpty(): ActionId {\n\t\treturn new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n\t}\n\n\tstatic fromItemId(itemId: number, tag?: number): ActionId {\n\t\treturn new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromSpellId(spellId: number, tag?: number): ActionId {\n\t\treturn new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n\t\treturn new ActionId(0, 0, otherId, tag || 0, '', '', '');\n\t}\n\n\tstatic fromPetName(petName: string): ActionId {\n\t\treturn petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n\t}\n\n\tstatic fromItem(item: Item): ActionId {\n\t\treturn ActionId.fromItemId(item.id);\n\t}\n\n\tstatic fromProto(protoId: ActionIdProto): ActionId {\n\t\tif (protoId.rawId.oneofKind == 'spellId') {\n\t\t\treturn ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'itemId') {\n\t\t\treturn ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'otherId') {\n\t\t\treturn ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n\t\t} else {\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tstatic fromLogString(str: string): ActionId {\n\t\tconst match = str.match(/{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/);\n\t\tif (match) {\n\t\t\tconst idType = match[1];\n\t\t\tconst id = parseInt(match[5]);\n\t\t\treturn new ActionId(\n\t\t\t\tidType == 'ItemID' ? id : 0,\n\t\t\t\tidType == 'SpellID' ? id : 0,\n\t\t\t\tidType == 'OtherID' ? id : 0,\n\t\t\t\tmatch[7] ? parseInt(match[7]) : 0,\n\t\t\t\t'', '', '');\n\t\t} else {\n\t\t\tconsole.warn('Failed to parse action id from log: ' + str);\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tprivate static makeIconUrl(iconLabel: string): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t} else {\n\t\t\treturn `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t}\n\t}\n\n\tstatic async getTooltipData(actionId: ActionId): Promise<IconData> {\n\t\tif (actionId.itemId) {\n\t\t\treturn await Database.getItemIconData(actionId.itemId);\n\t\t} else {\n\t\t\treturn await Database.getSpellIconData(actionId.spellId);\n\t\t}\n\t}\n}\n\nconst itemToTooltipDataCache = new Map<number, Promise<any>>();\nconst spellToTooltipDataCache = new Map<number, Promise<any>>();\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t\"Greater Fire Elemental\": ActionId.fromSpellId(2894),\n\t'Shadowfiend': ActionId.fromSpellId(34433),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\t'Bloodworm': ActionId.fromSpellId(50452),\n};\n\n// https://wowhead.com/wotlk/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n\t'Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n\t'Bear': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n\t'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Boar': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n\t'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n\t'Cat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n\t'Chimaera': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n\t'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n\t'Crab': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n\t'Crocolisk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n\t'Devilsaur': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n\t'Dragonhawk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n\t'Felguard': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\t'Felhunter': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\t'Infernal': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summoninfernal.jpg',\n\t'Gargoyle': 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_pet_bat.jpg',\n\t'Ghoul': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_raisedead.jpg',\n\t'Army of the Dead': 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_armyofthedead.jpg',\n\t'Gorilla': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n\t'Hyena': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n\t'Imp': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t'Moth': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n\t'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n\t'Owl': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Raptor': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n\t'Ravager': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n\t'Rhino': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n\t'Scorpid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n\t'Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n\t'Silithid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n\t'Spider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n\t'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n\t'Succubus': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\t'Tallstrider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n\t'Turtle': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n\t'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n\t'Wasp': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n\t'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n\t'Wolf': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n\t'Worm': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n};\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '',\n\t[ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n\t[ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n\t[ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n\t[ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n\t[ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n\t[ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n\t[ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n\t[ResourceType.ResourceTypeBloodRune]: '/wotlk/assets/img/blood_rune.png',\n\t[ResourceType.ResourceTypeFrostRune]: '/wotlk/assets/img/frost_rune.png',\n\t[ResourceType.ResourceTypeUnholyRune]: '/wotlk/assets/img/unholy_rune.png',\n\t[ResourceType.ResourceTypeDeathRune]: '/wotlk/assets/img/death_rune.png',\n};\n","import {\n\tArmorType,\n\tClass,\n\tItemSlot,\n\tProfession,\n\tPseudoStat,\n\tRace,\n\tRangedWeaponType,\n\tStat,\n\tWeaponType,\n} from '../proto/common.js';\nimport {\n\tDungeonDifficulty,\n\tRaidFilterOption,\n\tSourceFilterOption,\n} from '../proto/ui.js';\nimport { ResourceType } from '../proto/api.js';\n\nexport const armorTypeNames: Record<ArmorType, string> = {\n\t[ArmorType.ArmorTypeUnknown]: 'Unknown',\n\t[ArmorType.ArmorTypeCloth]: 'Cloth',\n\t[ArmorType.ArmorTypeLeather]: 'Leather',\n\t[ArmorType.ArmorTypeMail]: 'Mail',\n\t[ArmorType.ArmorTypePlate]: 'Plate',\n};\n\nexport const weaponTypeNames: Record<WeaponType, string> = {\n\t[WeaponType.WeaponTypeUnknown]: 'Unknown',\n\t[WeaponType.WeaponTypeAxe]: 'Axe',\n\t[WeaponType.WeaponTypeDagger]: 'Dagger',\n\t[WeaponType.WeaponTypeFist]: 'Fist',\n\t[WeaponType.WeaponTypeMace]: 'Mace',\n\t[WeaponType.WeaponTypeOffHand]: 'Misc',\n\t[WeaponType.WeaponTypePolearm]: 'Polearm',\n\t[WeaponType.WeaponTypeShield]: 'Shield',\n\t[WeaponType.WeaponTypeStaff]: 'Staff',\n\t[WeaponType.WeaponTypeSword]: 'Sword',\n};\n\nexport const rangedWeaponTypeNames: Record<RangedWeaponType, string> = {\n\t[RangedWeaponType.RangedWeaponTypeUnknown]: 'Unknown',\n\t[RangedWeaponType.RangedWeaponTypeBow]: 'Bow',\n\t[RangedWeaponType.RangedWeaponTypeCrossbow]: 'Crossbow',\n\t[RangedWeaponType.RangedWeaponTypeGun]: 'Gun',\n\t[RangedWeaponType.RangedWeaponTypeIdol]: 'Idol',\n\t[RangedWeaponType.RangedWeaponTypeLibram]: 'Libram',\n\t[RangedWeaponType.RangedWeaponTypeSigil]: 'Sigil',\n\t[RangedWeaponType.RangedWeaponTypeThrown]: 'Thrown',\n\t[RangedWeaponType.RangedWeaponTypeTotem]: 'Totem',\n\t[RangedWeaponType.RangedWeaponTypeWand]: 'Wand',\n};\n\nexport const raceNames: Record<Race, string> = {\n\t[Race.RaceUnknown]: 'None',\n\t[Race.RaceBloodElf]: 'Blood Elf',\n\t[Race.RaceDraenei]: 'Draenei',\n\t[Race.RaceDwarf]: 'Dwarf',\n\t[Race.RaceGnome]: 'Gnome',\n\t[Race.RaceHuman]: 'Human',\n\t[Race.RaceNightElf]: 'Night Elf',\n\t[Race.RaceOrc]: 'Orc',\n\t[Race.RaceTauren]: 'Tauren',\n\t[Race.RaceTroll]: 'Troll',\n\t[Race.RaceUndead]: 'Undead',\n};\n\nexport function nameToRace(name: string): Race {\n\tconst normalized = name.toLowerCase().replaceAll(' ', '');\n\tfor (const key in raceNames) {\n\t\tconst race = parseInt(key) as Race;\n\t\tif (raceNames[race].toLowerCase().replaceAll(' ', '') == normalized) {\n\t\t\treturn race;\n\t\t}\n\t}\n\n\treturn Race.RaceUnknown;\n}\n\nexport const classNames: Record<Class, string> = {\n\t[Class.ClassUnknown]: 'None',\n\t[Class.ClassDruid]: 'Druid',\n\t[Class.ClassHunter]: 'Hunter',\n\t[Class.ClassMage]: 'Mage',\n\t[Class.ClassPaladin]: 'Paladin',\n\t[Class.ClassPriest]: 'Priest',\n\t[Class.ClassRogue]: 'Rogue',\n\t[Class.ClassShaman]: 'Shaman',\n\t[Class.ClassWarlock]: 'Warlock',\n\t[Class.ClassWarrior]: 'Warrior',\n\t[Class.ClassDeathknight]: 'Death Knight',\n}\n\nexport function nameToClass(name: string): Class {\n\tconst lower = name.toLowerCase();\n\tfor (const key in classNames) {\n\t\tconst charClass = parseInt(key) as Class;\n\t\tif (classNames[charClass].toLowerCase().replace(/\\s+/g, '') == lower) {\n\t\t\treturn charClass;\n\t\t}\n\t}\n\n\treturn Class.ClassUnknown;\n}\n\nexport const professionNames: Record<Profession, string> = {\n\t[Profession.ProfessionUnknown]: 'None',\n\t[Profession.Alchemy]: 'Alchemy',\n\t[Profession.Blacksmithing]: 'Blacksmithing',\n\t[Profession.Enchanting]: 'Enchanting',\n\t[Profession.Engineering]: 'Engineering',\n\t[Profession.Herbalism]: 'Herbalism',\n\t[Profession.Inscription]: 'Inscription',\n\t[Profession.Jewelcrafting]: 'Jewelcrafting',\n\t[Profession.Leatherworking]: 'Leatherworking',\n\t[Profession.Mining]: 'Mining',\n\t[Profession.Skinning]: 'Skinning',\n\t[Profession.Tailoring]: 'Tailoring',\n};\n\nexport function nameToProfession(name: string): Profession {\n\tconst lower = name.toLowerCase();\n\tfor (const key in professionNames) {\n\t\tconst prof = parseInt(key) as Profession;\n\t\tif (professionNames[prof].toLowerCase() == lower) {\n\t\t\treturn prof;\n\t\t}\n\t}\n\n\treturn Profession.ProfessionUnknown;\n}\n\nexport const statOrder: Array<Stat> = [\n\tStat.StatHealth,\n\tStat.StatMana,\n\tStat.StatArmor,\n\tStat.StatStamina,\n\tStat.StatStrength,\n\tStat.StatAgility,\n\tStat.StatIntellect,\n\tStat.StatSpirit,\n\tStat.StatSpellPower,\n\tStat.StatSpellHit,\n\tStat.StatSpellCrit,\n\tStat.StatSpellHaste,\n\tStat.StatSpellPenetration,\n\tStat.StatMP5,\n\tStat.StatAttackPower,\n\tStat.StatRangedAttackPower,\n\tStat.StatMeleeHit,\n\tStat.StatMeleeCrit,\n\tStat.StatMeleeHaste,\n\tStat.StatArmorPenetration,\n\tStat.StatExpertise,\n\tStat.StatEnergy,\n\tStat.StatRage,\n\tStat.StatDefense,\n\tStat.StatBlock,\n\tStat.StatBlockValue,\n\tStat.StatDodge,\n\tStat.StatParry,\n\tStat.StatResilience,\n\tStat.StatArcaneResistance,\n\tStat.StatFireResistance,\n\tStat.StatFrostResistance,\n\tStat.StatNatureResistance,\n\tStat.StatShadowResistance,\n];\n\nexport const statNames: Record<Stat, string> = {\n\t[Stat.StatStrength]: 'Strength',\n\t[Stat.StatAgility]: 'Agility',\n\t[Stat.StatStamina]: 'Stamina',\n\t[Stat.StatIntellect]: 'Intellect',\n\t[Stat.StatSpirit]: 'Spirit',\n\t[Stat.StatSpellPower]: 'Spell Dmg',\n\t[Stat.StatMP5]: 'MP5',\n\t[Stat.StatSpellHit]: 'Spell Hit',\n\t[Stat.StatSpellCrit]: 'Spell Crit',\n\t[Stat.StatSpellHaste]: 'Spell Haste',\n\t[Stat.StatSpellPenetration]: 'Spell Pen',\n\t[Stat.StatAttackPower]: 'Attack Power',\n\t[Stat.StatMeleeHit]: 'Melee Hit',\n\t[Stat.StatMeleeCrit]: 'Melee Crit',\n\t[Stat.StatMeleeHaste]: 'Melee Haste',\n\t[Stat.StatArmorPenetration]: 'Armor Pen',\n\t[Stat.StatExpertise]: 'Expertise',\n\t[Stat.StatMana]: 'Mana',\n\t[Stat.StatEnergy]: 'Energy',\n\t[Stat.StatRage]: 'Rage',\n\t[Stat.StatArmor]: 'Armor',\n\t[Stat.StatRangedAttackPower]: 'Ranged AP',\n\t[Stat.StatDefense]: 'Defense',\n\t[Stat.StatBlock]: 'Block',\n\t[Stat.StatBlockValue]: 'Block Value',\n\t[Stat.StatDodge]: 'Dodge',\n\t[Stat.StatParry]: 'Parry',\n\t[Stat.StatResilience]: 'Resilience',\n\t[Stat.StatHealth]: 'Health',\n\t[Stat.StatArcaneResistance]: 'Arcane Resistance',\n\t[Stat.StatFireResistance]: 'Fire Resistance',\n\t[Stat.StatFrostResistance]: 'Frost Resistance',\n\t[Stat.StatNatureResistance]: 'Nature Resistance',\n\t[Stat.StatShadowResistance]: 'Shadow Resistance',\n\t[Stat.StatBonusArmor]: 'Bonus Armor',\n};\n\nexport const pseudoStatOrder: Array<PseudoStat> = [\n\tPseudoStat.PseudoStatMainHandDps,\n\tPseudoStat.PseudoStatOffHandDps,\n\tPseudoStat.PseudoStatRangedDps,\n\tPseudoStat.PseudoStatBlockValueMultiplier,\n];\nexport const pseudoStatNames: Record<PseudoStat, string> = {\n\t[PseudoStat.PseudoStatMainHandDps]: 'Main Hand DPS',\n\t[PseudoStat.PseudoStatOffHandDps]: 'Off Hand DPS',\n\t[PseudoStat.PseudoStatRangedDps]: 'Ranged DPS',\n\t[PseudoStat.PseudoStatBlockValueMultiplier]: 'Block Value Multiplier',\n\t[PseudoStat.PseudoStatDodge]: 'Dodge Chance',\n\t[PseudoStat.PseudoStatParry]: 'Parry Chance',\n};\n\nexport function getClassStatName(stat: Stat, playerClass: Class): string {\n\tconst statName = statNames[stat];\n\tif (playerClass == Class.ClassHunter) {\n\t\treturn statName.replace('Melee', 'Ranged');\n\t} else {\n\t\treturn statName;\n\t}\n}\n\nexport const slotNames: Record<ItemSlot, string> = {\n\t[ItemSlot.ItemSlotHead]: 'Head',\n\t[ItemSlot.ItemSlotNeck]: 'Neck',\n\t[ItemSlot.ItemSlotShoulder]: 'Shoulders',\n\t[ItemSlot.ItemSlotBack]: 'Back',\n\t[ItemSlot.ItemSlotChest]: 'Chest',\n\t[ItemSlot.ItemSlotWrist]: 'Wrist',\n\t[ItemSlot.ItemSlotHands]: 'Hands',\n\t[ItemSlot.ItemSlotWaist]: 'Waist',\n\t[ItemSlot.ItemSlotLegs]: 'Legs',\n\t[ItemSlot.ItemSlotFeet]: 'Feet',\n\t[ItemSlot.ItemSlotFinger1]: 'Finger 1',\n\t[ItemSlot.ItemSlotFinger2]: 'Finger 2',\n\t[ItemSlot.ItemSlotTrinket1]: 'Trinket 1',\n\t[ItemSlot.ItemSlotTrinket2]: 'Trinket 2',\n\t[ItemSlot.ItemSlotMainHand]: 'Main Hand',\n\t[ItemSlot.ItemSlotOffHand]: 'Off Hand',\n\t[ItemSlot.ItemSlotRanged]: 'Ranged',\n};\n\nexport const resourceNames: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: 'None',\n\t[ResourceType.ResourceTypeHealth]: 'Health',\n\t[ResourceType.ResourceTypeMana]: 'Mana',\n\t[ResourceType.ResourceTypeEnergy]: 'Energy',\n\t[ResourceType.ResourceTypeRage]: 'Rage',\n\t[ResourceType.ResourceTypeComboPoints]: 'Combo Points',\n\t[ResourceType.ResourceTypeFocus]: 'Focus',\n\t[ResourceType.ResourceTypeRunicPower]: 'Runic Power',\n\t[ResourceType.ResourceTypeBloodRune]: 'Blood Rune',\n\t[ResourceType.ResourceTypeFrostRune]: 'Frost Rune',\n\t[ResourceType.ResourceTypeUnholyRune]: 'Unholy Rune',\n\t[ResourceType.ResourceTypeDeathRune]: 'Death Rune',\n};\n\nexport const resourceColors: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '#ffffff',\n\t[ResourceType.ResourceTypeHealth]: '#22ba00',\n\t[ResourceType.ResourceTypeMana]: '#2e93fa',\n\t[ResourceType.ResourceTypeEnergy]: '#ffd700',\n\t[ResourceType.ResourceTypeRage]: '#ff0000',\n\t[ResourceType.ResourceTypeComboPoints]: '#ffa07a',\n\t[ResourceType.ResourceTypeFocus]: '#cd853f',\n\t[ResourceType.ResourceTypeRunicPower]: '#5b99ee',\n\t[ResourceType.ResourceTypeBloodRune]: '#ff0000',\n\t[ResourceType.ResourceTypeFrostRune]: '#0000ff',\n\t[ResourceType.ResourceTypeUnholyRune]: '#00ff00',\n\t[ResourceType.ResourceTypeDeathRune]: '#8b008b',\n};\n\nexport function stringToResourceType(str: string): ResourceType {\n\tfor (const [key, val] of Object.entries(resourceNames)) {\n\t\tif (val.toLowerCase() == str.toLowerCase()) {\n\t\t\treturn Number(key) as ResourceType;\n\t\t}\n\t}\n\treturn ResourceType.ResourceTypeNone;\n}\n\nexport const sourceNames: Record<SourceFilterOption, string> = {\n\t[SourceFilterOption.SourceUnknown]: 'Unknown',\n\t[SourceFilterOption.SourceCrafting]: 'Crafting',\n\t[SourceFilterOption.SourceQuest]: 'Quest',\n\t[SourceFilterOption.SourceDungeon]: 'Dungeon',\n\t[SourceFilterOption.SourceDungeonH]: 'Dungeon (H)',\n\t[SourceFilterOption.SourceRaid10]: 'Raid (10N)',\n\t[SourceFilterOption.SourceRaid10H]: 'Raid (10H)',\n\t[SourceFilterOption.SourceRaid25]: 'Raid (25N)',\n\t[SourceFilterOption.SourceRaid25H]: 'Raid (25H)',\n};\nexport const raidNames: Record<RaidFilterOption, string> = {\n\t[RaidFilterOption.RaidUnknown]: 'Unknown',\n\t[RaidFilterOption.RaidVanilla]: 'Vanilla',\n\t[RaidFilterOption.RaidTbc]: 'TBC',\n\t[RaidFilterOption.RaidNaxxramas]: 'Naxxramas',\n\t[RaidFilterOption.RaidEyeOfEternity]: 'Eye of Eternity',\n\t[RaidFilterOption.RaidObsidianSanctum]: 'Obsidian Sanctum',\n\t[RaidFilterOption.RaidVaultOfArchavon]: 'Vault of Archavon',\n\t[RaidFilterOption.RaidUlduar]: 'Ulduar',\n\t[RaidFilterOption.RaidTrialOfTheCrusader]: 'Trial of the Crusader',\n\t[RaidFilterOption.RaidOnyxiasLair]: 'Onyxia\\'s Lair',\n\t[RaidFilterOption.RaidIcecrownCitadel]: 'Icecrown Citadel',\n\t[RaidFilterOption.RaidRubySanctum]: 'Ruby Sanctum',\n};\n\nexport const difficultyNames: Record<DungeonDifficulty, string> = {\n\t[DungeonDifficulty.DifficultyUnknown]: 'Unknown',\n\t[DungeonDifficulty.DifficultyNormal]: 'N',\n\t[DungeonDifficulty.DifficultyHeroic]: 'H',\n\t[DungeonDifficulty.DifficultyRaid10]: '10N',\n\t[DungeonDifficulty.DifficultyRaid10H]: '10H',\n\t[DungeonDifficulty.DifficultyRaid25]: '25N',\n\t[DungeonDifficulty.DifficultyRaid25H]: '25H',\n};\n","import { Class, Stat, PseudoStat, UnitStats } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport { getClassStatName, pseudoStatNames } from './names.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\nconst PSEUDOSTATS_LEN = getEnumValues(PseudoStat).length;\n\nexport class UnitStat {\n\tprivate readonly stat: Stat|null;\n\tprivate readonly pseudoStat: PseudoStat|null;\n\n\tprivate constructor(stat: Stat|null, pseudoStat: PseudoStat|null) {\n\t\tthis.stat = stat;\n\t\tthis.pseudoStat = pseudoStat;\n\t}\n\n\tisStat(): boolean {\n\t\treturn this.stat != null;\n\t}\n\tisPseudoStat(): boolean {\n\t\treturn this.pseudoStat != null;\n\t}\n\n\tgetStat(): Stat {\n\t\tif (!this.isStat()) {\n\t\t\tthrow new Error('Not a stat!');\n\t\t}\n\t\treturn this.stat!;\n\t}\n\tgetPseudoStat(): PseudoStat {\n\t\tif (!this.isPseudoStat()) {\n\t\t\tthrow new Error('Not a pseudo stat!');\n\t\t}\n\t\treturn this.pseudoStat!;\n\t}\n\n\tequals(other: UnitStat): boolean {\n\t\treturn this.stat == other.stat && this.pseudoStat == other.pseudoStat;\n\t}\n\n\tgetName(clazz: Class): string {\n\t\tif (this.isStat()) {\n\t\t\treturn getClassStatName(this.stat!, clazz);\n\t\t} else {\n\t\t\treturn pseudoStatNames[this.pseudoStat!];\n\t\t}\n\t}\n\n\tgetProtoValue(proto: UnitStats): number {\n\t\tif (this.isStat()) {\n\t\t\treturn proto.stats[this.stat!];\n\t\t} else {\n\t\t\treturn proto.pseudoStats[this.pseudoStat!];\n\t\t}\n\t}\n\n\tstatic fromStat(stat: Stat): UnitStat {\n\t\treturn new UnitStat(stat, null);\n\t}\n\tstatic fromPseudoStat(pseudoStat: PseudoStat): UnitStat {\n\t\treturn new UnitStat(null, pseudoStat);\n\t}\n\n\tstatic getAll(): Array<UnitStat> {\n\t\tconst allStats = (getEnumValues(Stat) as Array<Stat>).filter(stat => ![Stat.StatEnergy, Stat.StatRage].includes(stat));\n\t\tconst allPseudoStats = getEnumValues(PseudoStat) as Array<PseudoStat>;\n\t\treturn [\n\t\t\tallStats.map(stat => UnitStat.fromStat(stat)),\n\t\t\tallPseudoStats.map(stat => UnitStat.fromPseudoStat(stat)),\n\t\t].flat();\n\t}\n}\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n\tprivate readonly stats: Array<number>;\n\tprivate readonly pseudoStats: Array<number>;\n\n\tconstructor(stats?: Array<number>, pseudoStats?: Array<number>) {\n\t\tthis.stats = Stats.initStatsArray(STATS_LEN, stats);\n\t\tthis.pseudoStats = Stats.initStatsArray(PSEUDOSTATS_LEN, pseudoStats);\n\t}\n\n\tprivate static initStatsArray(expectedLen: number, newStats?: Array<number>): Array<number> {\n\t\tlet stats = newStats?.slice(0, expectedLen) || [];\n\n\t\tif (stats.length < expectedLen) {\n\t\t\tstats = stats.concat(new Array(expectedLen - (newStats?.length || 0)).fill(0));\n\t\t}\n\n\t\tfor (let i = 0; i < expectedLen; i++) {\n\t\t\tif (stats[i] == null)\n\t\t\t\tstats[i] = 0;\n\t\t}\n\t\treturn stats;\n\t}\n\n\tequals(other: Stats): boolean {\n\t\treturn this.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx)) &&\n\t\t\t\tthis.pseudoStats.every((newStat, statIdx) => newStat == other.getPseudoStat(statIdx))\n\t}\n\n\tgetStat(stat: Stat): number {\n\t\treturn this.stats[stat];\n\t}\n\tgetPseudoStat(stat: PseudoStat): number {\n\t\treturn this.pseudoStats[stat];\n\t}\n\tgetUnitStat(stat: UnitStat): number {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.stats[stat.getStat()];\n\t\t} else {\n\t\t\treturn this.pseudoStats[stat.getPseudoStat()];\n\t\t}\n\t}\n\n\twithStat(stat: Stat, value: number): Stats {\n\t\tconst newStats = this.stats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(newStats, this.pseudoStats);\n\t}\n\twithPseudoStat(stat: PseudoStat, value: number): Stats {\n\t\tconst newStats = this.pseudoStats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(this.stats, newStats);\n\t}\n\twithUnitStat(stat: UnitStat, value: number): Stats {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.withStat(stat.getStat(), value);\n\t\t} else {\n\t\t\treturn this.withPseudoStat(stat.getPseudoStat(), value);\n\t\t}\n\t}\n\n\taddStat(stat: Stat, value: number): Stats {\n\t\treturn this.withStat(stat, this.getStat(stat) + value);\n\t}\n\n\tadd(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value + other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value + other.pseudoStats[stat]));\n\t}\n\n\tsubtract(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value - other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value - other.pseudoStats[stat]));\n\t}\n\n\tscale(scalar: number): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value * scalar),\n\t\t\tthis.pseudoStats.map((value, stat) => value * scalar));\n\t}\n\n\tcomputeEP(epWeights: Stats): number {\n\t\tlet total = 0;\n\t\tthis.stats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.stats[idx];\n\t\t});\n\t\tthis.pseudoStats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.pseudoStats[idx];\n\t\t});\n\t\treturn total;\n\t}\n\n\tasArray(): Array<number> {\n\t\treturn this.stats.slice();\n\t}\n\n\ttoJson(): Object {\n\t\treturn UnitStats.toJson(this.toProto()) as Object;\n\t}\n\n\ttoProto(): UnitStats {\n\t\treturn UnitStats.create({\n\t\t\tstats: this.stats.slice(),\n\t\t\tpseudoStats: this.pseudoStats.slice(),\n\t\t});\n\t}\n\n\tstatic fromJson(obj: any): Stats {\n\t\treturn Stats.fromProto(UnitStats.fromJson(obj));\n\t}\n\n\tstatic fromMap(statsMap: Partial<Record<Stat, number>>, pseudoStatsMap?: Partial<Record<PseudoStat, number>>): Stats {\n\t\tconst statsArr = new Array(STATS_LEN).fill(0);\n\t\tObject.entries(statsMap).forEach(entry => {\n\t\t\tconst [statStr, value] = entry;\n\t\t\tstatsArr[Number(statStr)] = value;\n\t\t});\n\n\t\tconst pseudoStatsArr = new Array(PSEUDOSTATS_LEN).fill(0);\n\t\tif (pseudoStatsMap) {\n\t\t\tObject.entries(pseudoStatsMap).forEach(entry => {\n\t\t\t\tconst [pseudoStatstr, value] = entry;\n\t\t\t\tpseudoStatsArr[Number(pseudoStatstr)] = value;\n\t\t\t});\n\t\t}\n\n\t\treturn new Stats(statsArr, pseudoStatsArr);\n\t}\n\n\tstatic fromProto(unitStats?: UnitStats): Stats {\n\t\tif (unitStats) {\n\t\t\treturn new Stats(unitStats.stats, unitStats.pseudoStats);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n}\n","import { GemColor } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport {\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\nimport { distinct } from '../utils.js';\n\nimport { ActionId } from './action_id.js';\nimport { enchantAppliesToItem } from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\n\nexport function getWeaponDPS(item: Item): number {\n\treturn ((item.weaponDamageMin + item.weaponDamageMax) / 2) / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n\treadonly _item: Item;\n\treadonly _enchant: Enchant | null;\n\treadonly _gems: Array<Gem | null>;\n\n\treadonly numPossibleSockets: number;\n\n\tconstructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>) {\n\t\tthis._item = item;\n\t\tthis._enchant = enchant || null;\n\t\tthis._gems = gems || [];\n\n\t\tthis.numPossibleSockets = this.numSockets(true);\n\n\t\t// Fill gems with null so we always have the same number of gems as gem slots.\n\t\tif (this._gems.length < this.numPossibleSockets) {\n\t\t\tthis._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n\t\t}\n\t}\n\n\tget item(): Item {\n\t\t// Make a defensive copy\n\t\treturn Item.clone(this._item);\n\t}\n\n\tget enchant(): Enchant | null {\n\t\t// Make a defensive copy\n\t\treturn this._enchant ? Enchant.clone(this._enchant) : null;\n\t}\n\n\tget gems(): Array<Gem | null> {\n\t\t// Make a defensive copy\n\t\treturn this._gems.map(gem => gem == null ? null : Gem.clone(gem));\n\t}\n\n\tequals(other: EquippedItem) {\n\t\tif (!Item.equals(this._item, other.item))\n\t\t\treturn false;\n\n\t\tif ((this._enchant == null) != (other.enchant == null))\n\t\t\treturn false;\n\n\t\tif (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant))\n\t\t\treturn false;\n\n\t\tif (this._gems.length != other.gems.length)\n\t\t\treturn false;\n\n\t\tfor (let i = 0; i < this._gems.length; i++) {\n\t\t\tif ((this._gems[i] == null) != (other.gems[i] == null))\n\t\t\t\treturn false;\n\n\t\t\tif (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!))\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Replaces the item and tries to keep the existing enchants/gems if possible.\n\t */\n\twithItem(item: Item): EquippedItem {\n\t\tlet newEnchant = null;\n\t\tif (this._enchant && enchantAppliesToItem(this._enchant, item))\n\t\t\tnewEnchant = this._enchant;\n\n\t\t// Reorganize gems to match as many colors in the new item as possible.\n\t\tconst newGems = new Array(item.gemSockets.length).fill(null);\n\t\tthis._gems.slice(0, this._item.gemSockets.length).filter(gem => gem != null).forEach(gem => {\n\t\t\tconst firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n\t\t\tconst firstEligibleIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor));\n\t\t\tif (firstMatchingIndex != -1) {\n\t\t\t\tnewGems[firstMatchingIndex] = gem;\n\t\t\t} else if (firstEligibleIndex != -1) {\n\t\t\t\tnewGems[firstEligibleIndex] = gem;\n\t\t\t}\n\t\t});\n\n\t\t// Copy the extra socket gem directly.\n\t\tif (this.couldHaveExtraSocket()) {\n\t\t\tnewGems.push(this._gems[this._gems.length - 1]);\n\t\t}\n\n\t\treturn new EquippedItem(item, newEnchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithEnchant(enchant: Enchant | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, enchant, this._gems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t */\n\tprivate withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tif (this._gems.length <= socketIdx) {\n\t\t\tthrow new Error('No gem socket with index ' + socketIdx);\n\t\t}\n\n\t\tconst newGems = this._gems.slice();\n\t\tnewGems[socketIdx] = gem;\n\n\t\treturn new EquippedItem(this._item, this._enchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t *\n\t * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n\t */\n\twithGem(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tif (gem && gem.unique) {\n\t\t\tcurItem = curItem.removeGemsWithId(gem.id);\n\t\t}\n\n\t\treturn curItem.withGemHelper(gem, socketIdx);\n\t}\n\n\tremoveGemsWithId(gemId: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\t\t// Remove any currently socketed identical gems.\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tif (curItem._gems[i]?.id == gemId) {\n\t\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t\t}\n\t\t}\n\t\treturn curItem;\n\t}\n\n\tasActionId(): ActionId {\n\t\treturn ActionId.fromItemId(this._item.id);\n\t}\n\n\tasSpec(): ItemSpec {\n\t\treturn ItemSpec.create({\n\t\t\tid: this._item.id,\n\t\t\tenchant: this._enchant?.effectId,\n\t\t\tgems: this._gems.map(gem => gem?.id || 0),\n\t\t});\n\t}\n\n\tmeetsSocketBonus(): boolean {\n\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t}\n\n\tsocketBonusStats(): Stats {\n\t\tif (this.meetsSocketBonus()) {\n\t\t\treturn new Stats(this._item.socketBonus);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n\n\t// Whether this item could have an extra socket, assuming Blacksmithing.\n\tcouldHaveExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n\t}\n\n\trequiresExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type)\n\t\t\t&& this.hasExtraGem()\n\t\t\t&& this._gems[this._gems.length - 1] != null;\n\t}\n\n\thasExtraSocket(isBlacksmithing: boolean): boolean {\n\t\treturn this.item.type == ItemType.ItemTypeWaist ||\n\t\t\t(isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n\t}\n\n\tnumSockets(isBlacksmithing: boolean): number {\n\t\treturn this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n\t}\n\n\thasExtraGem(): boolean {\n\t\treturn this._gems.length > this.item.gemSockets.length;\n\t}\n\n\tallSocketColors(): Array<GemColor> {\n\t\treturn this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\tcurSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n\t\treturn this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\n\tcurGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn (this._gems.filter(g => g != null) as Array<Gem>).slice(0, this.numSockets(isBlacksmithing));\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\tlet profs: Array<Profession> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._item.requiredProfession);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._enchant.requiredProfession);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\t\tprofs.push(gem.requiredProfession);\n\t\t\t}\n\t\t});\n\t\tif (this.requiresExtraSocket()) {\n\t\t\tprofs.push(Profession.Blacksmithing);\n\t\t}\n\t\treturn distinct(profs);\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\tlet failed: Array<Item | Gem | Enchant> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n\t\t\tfailed.push(this._item);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._enchant.requiredProfession)) {\n\t\t\tfailed.push(this._enchant);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n\t\t\t\tfailed.push(gem);\n\t\t\t}\n\t\t});\n\t\treturn failed;\n\t}\n};\n","import { EquipmentSpec, ItemSwap } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { SimDatabase } from '../proto/common.js';\nimport { SimItem } from '../proto/common.js';\nimport { SimEnchant } from '../proto/common.js';\nimport { SimGem } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { arrayEquals, equalsOrBothNull } from '../utils.js';\nimport { distinct, getEnumValues } from '../utils.js';\nimport { isBluntWeaponType, isSharpWeaponType } from '../proto_utils/utils.js';\nimport {\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { isMetaGemActive } from './gems.js';\nimport { gemMatchesSocket } from './gems.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { validWeaponCombo } from './utils.js';\nimport { Stats } from './stats.js';\n\ntype InternalGear = Record<ItemSlot, EquippedItem | null>;\n\nabstract class BaseGear {\n\tprotected readonly gear: InternalGear;\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tthis.getItemSlots().forEach(slot => {\n\t\t\tif (!gear[slot as ItemSlot])\n\t\t\t\tgear[slot as ItemSlot] = null;\n\t\t});\n\t\tthis.gear = gear as InternalGear;\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear[slot];\n\t}\n\n\tasArray(): Array<EquippedItem | null> {\n\t\treturn Object.values(this.gear);\n\t}\n\n\tremoveUniqueGems(gear: InternalGear, newItem: EquippedItem) {\n\t\t\t// If the new item has unique gems, remove matching.\n\t\t\tnewItem.gems\n\t\t\t\t.filter(gem => gem?.unique)\n\t\t\t\t.forEach(gem => {\n\t\t\t\t\tthis.getItemSlots().map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\t\t\tgear[slot] = gear[slot]?.removeGemsWithId(gem!.id) || null;\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\tremoveUniqueItems(gear: InternalGear, newItem: EquippedItem){\n\t\tif (newItem.item.unique) {\n\t\t\tthis.getItemSlots().map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\tif (gear[slot]?.item.id == newItem.item.id) {\n\t\t\t\t\tgear[slot] = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tvalidateWeaponCombo(gear: InternalGear, newSlot: ItemSlot, canDualWield2H: boolean) {\n\t\t// Check for valid weapon combos.\n\t\tif (!validWeaponCombo(gear[ItemSlot.ItemSlotMainHand]?.item, gear[ItemSlot.ItemSlotOffHand]?.item, canDualWield2H)) {\n\t\t\tif (newSlot == ItemSlot.ItemSlotOffHand) {\n\t\t\t\tgear[ItemSlot.ItemSlotMainHand] = null;\n\t\t\t} else {\n\t\t\t\tgear[ItemSlot.ItemSlotOffHand] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tabstract toDatabase(): SimDatabase\n\tabstract getItemSlots(): ItemSlot[]\n\n\tprotected static itemToDB(item: Item): SimItem {\n\t\treturn SimItem.fromJson(Item.toJson(item), { ignoreUnknownFields: true });\n\t}\n\n\tprotected static enchantToDB(enchant: Enchant): SimEnchant {\n\t\treturn SimEnchant.fromJson(Enchant.toJson(enchant), { ignoreUnknownFields: true });\n\t}\n\n\tprotected static gemToDB(gem: Gem): SimGem {\n\t\treturn SimGem.fromJson(Gem.toJson(gem), { ignoreUnknownFields: true });\n\t}\n}\n\n/**\n * Represents a full gear set, including items/enchants/gems for every slot.\n *\n * This is an immutable type.\n */\nexport class Gear extends BaseGear {\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tsuper(gear);\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn getEnumValues(ItemSlot);\n\t}\n\n\tequals(other: Gear): boolean {\n\t\treturn this.asArray().every((thisItem, slot) => equalsOrBothNull(thisItem, other.getEquippedItem(slot), (a, b) => a.equals(b)));\n\t}\n\n\t/**\n\t * Returns a new Gear set with the item equipped.\n\t *\n\t * Checks for validity and removes/exchanges items/gems as needed.\n\t */\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Gear {\n\t\t// Create a new identical set of gear\n\t\tconst newInternalGear = this.asMap();\n\n\t\tif (newItem) {\n\t\t\tthis.removeUniqueGems(newInternalGear, newItem);\n\t\t\tthis.removeUniqueItems(newInternalGear, newItem);\n\t\t}\n\n\t\t// Actually assign the new item.\n\t\tnewInternalGear[newSlot] = newItem;\n\n\t\tthis.validateWeaponCombo(newInternalGear, newSlot, canDualWield2H);\n\n\t\treturn new Gear(newInternalGear);\n\t}\n\n\tgetTrinkets(): Array<EquippedItem | null> {\n\t\treturn [\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket1),\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket2),\n\t\t];\n\t}\n\n\thasTrinket(itemId: number): boolean {\n\t\treturn this.getTrinkets().map(t => t?.item.id).includes(itemId);\n\t}\n\n\tasMap(): InternalGear {\n\t\tconst newInternalGear: Partial<InternalGear> = {};\n\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\tnewInternalGear[slot] = this.getEquippedItem(slot);\n\t\t});\n\t\treturn newInternalGear as InternalGear;\n\t}\n\n\tasSpec(): EquipmentSpec {\n\t\treturn EquipmentSpec.create({\n\t\t\titems: this.asArray().map(ei => ei ? ei.asSpec() : ItemSpec.create()),\n\t\t});\n\t}\n\n\tgetAllGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.asArray()\n\t\t\t.map(ei => ei == null ? [] : ei.curGems(isBlacksmithing))\n\t\t\t.flat();\n\t}\n\n\tgetNonMetaGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color != GemColor.GemColorMeta);\n\t}\n\n\tstatsFromGems(isBlacksmithing: boolean): Stats {\n\t\tlet stats = new Stats();\n\n\t\t// Stats from just the gems.\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\tfor (let i = 0; i < gems.length; i++) {\n\t\t\tstats = stats.add(new Stats(gems[i].stats));\n\t\t}\n\n\t\t// Stats from socket bonuses.\n\t\tconst items = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tstats = stats.add(items[i].socketBonusStats());\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tgetGemsOfColor(color: GemColor, isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color == color);\n\t}\n\n\tgetJCGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.requiredProfession == Profession.Jewelcrafting);\n\t}\n\n\tgetMetaGem(): Gem | null {\n\t\treturn this.getGemsOfColor(GemColor.GemColorMeta, true)[0] || null;\n\t}\n\n\tgemColorCounts(isBlacksmithing: boolean): ({ red: number, yellow: number, blue: number }) {\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn {\n\t\t\tred: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorRed)).length,\n\t\t\tyellow: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorYellow)).length,\n\t\t\tblue: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorBlue)).length,\n\t\t};\n\t}\n\n\t// Returns true if this gear set has a meta gem AND the other gems meet the meta's conditions.\n\thasActiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (!metaGem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst gemColorCounts = this.gemColorCounts(isBlacksmithing);\n\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn isMetaGemActive(\n\t\t\tmetaGem,\n\t\t\tgemColorCounts.red, gemColorCounts.yellow, gemColorCounts.blue);\n\t}\n\n\thasInactiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\treturn this.getMetaGem() != null && !this.hasActiveMetaGem(isBlacksmithing);\n\t}\n\n\twithoutMetaGem(): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (headItem && metaGem) {\n\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.removeGemsWithId(metaGem.id), true);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t// Removes bonus gems from blacksmith profession bonus.\n\twithoutBlacksmithSockets(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tconst wristItem = this.getEquippedItem(ItemSlot.ItemSlotWrist);\n\t\tif (wristItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotWrist, wristItem.withGem(null, wristItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\tconst handsItem = this.getEquippedItem(ItemSlot.ItemSlotHands);\n\t\tif (handsItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotHands, handsItem.withGem(null, handsItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\thasBluntMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\thasBluntOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\treturn distinct((this.asArray().filter(ei => ei != null) as Array<EquippedItem>)\n\t\t\t.map(ei => ei.getProfessionRequirements())\n\t\t\t.flat());\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\treturn (this.asArray().filter(ei => ei != null) as Array<EquippedItem>)\n\t\t\t.map(ei => ei.getFailedProfessionRequirements(professions))\n\t\t\t.flat();\n\t}\n\n\ttoDatabase(): SimDatabase {\n\t\tconst equippedItems = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(equippedItems.map(ei => Gear.itemToDB(ei.item))),\n\t\t\tenchants: distinct(equippedItems.filter(ei => ei.enchant).map(ei => Gear.enchantToDB(ei.enchant!))),\n\t\t\tgems: distinct(equippedItems.map(ei => ei.curGems(true).map(gem => Gear.gemToDB(gem))).flat()),\n\t\t});\n\t}\n}\n\n/**\n * Represents a item swap gear set, including items/enchants/gems.\n *\n * This is an immutable type.\n */\nexport class ItemSwapGear extends BaseGear {\n\n\tconstructor() {\n\t\tsuper({});\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand, ItemSlot.ItemSlotRanged];\n\t}\n\n\tequipItem(slot: ItemSlot, equippedItem: EquippedItem | null, canDualWield2H: boolean) {\n\t\tif (equippedItem) {\n\t\t\tthis.removeUniqueGems(this.gear, equippedItem);\n\t\t\tthis.removeUniqueItems(this.gear, equippedItem);\n\t\t}\n\t\t\n\t\tthis.gear[slot] = equippedItem;\n\t\tthis.validateWeaponCombo(this.gear, slot, canDualWield2H);\n\t}\n\n\ttoProto(): ItemSwap {\n\t\treturn ItemSwap.create({\n\t\t\tmhItem: this.gear[ItemSlot.ItemSlotMainHand]?.asSpec(),\n\t\t\tohItem: this.gear[ItemSlot.ItemSlotOffHand]?.asSpec(),\n\t\t\trangedItem: this.gear[ItemSlot.ItemSlotRanged]?.asSpec(),\n\t\t})\n\t}\n\n\ttoDatabase(): SimDatabase {\n\t\tconst equippedItems = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(equippedItems.map(ei => ItemSwapGear.itemToDB(ei.item))),\n\t\t\tenchants: distinct(equippedItems.filter(ei => ei.enchant).map(ei => ItemSwapGear.enchantToDB(ei.enchant!))),\n\t\t\tgems: distinct(equippedItems.map(ei => ei.curGems(true).map(gem => ItemSwapGear.gemToDB(gem))).flat()),\n\t\t});\n\t}\n}\n","import {\n\tEquipmentSpec,\n\tGemColor,\n\tItemSlot,\n\tItemSpec,\n\tPresetEncounter,\n\tPresetTarget,\n} from '../proto/common.js';\nimport {\n\tGlyphID,\n\tIconData,\n\tUIDatabase,\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n\tUINPC as Npc,\n\tUIZone as Zone,\n} from '../proto/ui.js';\n\nimport {\n\tgetEligibleEnchantSlots,\n\tgetEligibleItemSlots,\n} from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { Gear } from './gear.js';\n\nconst dbUrlJson = '/wotlk/assets/database/db.json';\nconst dbUrlBin = '/wotlk/assets/database/db.bin';\nconst leftoversUrlJson = '/wotlk/assets/database/leftover_db.json';\nconst leftoversUrlBin = '/wotlk/assets/database/leftover_db.bin';\n// When changing this value, don't forget to change the html <link> for preloading!\nconst READ_JSON = true;\n\nexport class Database {\n\tprivate static loadPromise: Promise<Database>|null = null;\n\tstatic get(): Promise<Database> {\n\t\tif (Database.loadPromise == null) {\n\t\t\tif (READ_JSON) {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlJson)\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(json => new Database(UIDatabase.fromJson(json)));\n\t\t\t} else {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlBin)\n\t\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t\t.then(buffer => new Database(UIDatabase.fromBinary(new Uint8Array(buffer))));\n\t\t\t}\n\t\t}\n\t\treturn Database.loadPromise;\n\t}\n\n\tstatic getLeftovers(): Promise<UIDatabase> {\n\t\tif (READ_JSON) {\n\t\t\treturn fetch(leftoversUrlJson)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => UIDatabase.fromJson(json));\n\t\t} else {\n\t\t\treturn fetch(leftoversUrlBin)\n\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t.then(buffer => UIDatabase.fromBinary(new Uint8Array(buffer)));\n\t\t}\n\t}\n\n\t// Checks if any items in the equipment are missing from the current DB. If so, loads the leftover DB.\n\tstatic async loadLeftoversIfNecessary(equipment: EquipmentSpec): Promise<Database> {\n\t\tconst db = await Database.get();\n\t\tif (db.loadedLeftovers) {\n\t\t\treturn db;\n\t\t}\n\n\t\tconst shouldLoadLeftovers = equipment.items.some(item => item.id != 0 && !db.items[item.id]);\n\t\tif (shouldLoadLeftovers) {\n\t\t\tconst leftoverDb = await Database.getLeftovers();\n\t\t\tdb.loadProto(leftoverDb);\n\t\t\tdb.loadedLeftovers = true;\n\t\t}\n\t\treturn db;\n\t}\n\n\tprivate readonly items: Record<number, Item> = {};\n\tprivate readonly enchantsBySlot: Partial<Record<ItemSlot, Enchant[]>> = {};\n\tprivate readonly gems: Record<number, Gem> = {};\n\tprivate readonly npcs: Record<number, Npc> = {};\n\tprivate readonly zones: Record<number, Zone> = {};\n\tprivate readonly presetEncounters: Record<string, PresetEncounter> = {};\n\tprivate readonly presetTargets: Record<string, PresetTarget> = {};\n\tprivate readonly itemIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly spellIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly glyphIds: Array<GlyphID> = [];\n\tprivate loadedLeftovers: boolean = false;\n\n\tprivate constructor(db: UIDatabase) {\n\t\tthis.loadProto(db);\n\t}\n\n\t// Add all data from the db proto into this database.\n\tprivate loadProto(db: UIDatabase) {\n\t\tdb.items.forEach(item => this.items[item.id] = item);\n\t\tdb.enchants.forEach(enchant => {\n\t\t\tconst slots = getEligibleEnchantSlots(enchant);\n\t\t\tslots.forEach(slot => {\n\t\t\t\tif (!this.enchantsBySlot[slot]) {\n\t\t\t\t\tthis.enchantsBySlot[slot] = [];\n\t\t\t\t}\n\t\t\t\tthis.enchantsBySlot[slot]!.push(enchant);\n\t\t\t});\n\t\t});\n\t\tdb.gems.forEach(gem => this.gems[gem.id] = gem);\n\n\t\tdb.npcs.forEach(npc => this.npcs[npc.id] = npc);\n\t\tdb.zones.forEach(zone => this.zones[zone.id] = zone);\n\t\tdb.encounters.forEach(encounter => this.presetEncounters[encounter.path] = encounter);\n\t\tdb.encounters.map(e => e.targets).flat().forEach(target => this.presetTargets[target.path] = target);\n\n\t\tdb.items.forEach(item => this.itemIcons[item.id] = Promise.resolve(IconData.create({\n\t\t\tid: item.id,\n\t\t\tname: item.name,\n\t\t\ticon: item.icon,\n\t\t})));\n\t\tdb.gems.forEach(gem => this.itemIcons[gem.id] = Promise.resolve(IconData.create({\n\t\t\tid: gem.id,\n\t\t\tname: gem.name,\n\t\t\ticon: gem.icon,\n\t\t})));\n\t\tdb.itemIcons.forEach(data => this.itemIcons[data.id] = Promise.resolve(data));\n\t\tdb.spellIcons.forEach(data => this.spellIcons[data.id] = Promise.resolve(data));\n\t\tdb.glyphIds.forEach(id => this.glyphIds.push(id));\n\t}\n\n\tgetItems(slot: ItemSlot): Array<Item> {\n\t\tlet items = Object.values(this.items);\n\t\titems = items.filter(item => getEligibleItemSlots(item).includes(slot));\n\t\treturn items;\n\t}\n\n\tgetEnchants(slot: ItemSlot): Array<Enchant> {\n\t\treturn this.enchantsBySlot[slot] || [];\n\t}\n\n\tgetGems(socketColor?: GemColor): Array<Gem> {\n\t\tlet gems = Object.values(this.gems);\n\t\tif (socketColor) {\n\t\t\tgems = gems.filter(gem => gemEligibleForSocket(gem, socketColor));\n\t\t}\n\t\treturn gems;\n\t}\n\n\tgetNpc(npcId: number): Npc|null {\n\t\treturn this.npcs[npcId] || null;\n\t}\n\tgetZone(zoneId: number): Zone|null {\n\t\treturn this.zones[zoneId] || null;\n\t}\n\n\tgetMatchingGems(socketColor: GemColor): Array<Gem> {\n\t\treturn Object.values(this.gems).filter(gem => gemMatchesSocket(gem, socketColor));\n\t}\n\n\tlookupItemSpec(itemSpec: ItemSpec): EquippedItem | null {\n\t\tconst item = this.items[itemSpec.id];\n\t\tif (!item)\n\t\t\treturn null;\n\n\t\tlet enchant: Enchant | null = null;\n\t\tif (itemSpec.enchant) {\n\t\t\tconst slots = getEligibleItemSlots(item);\n\t\t\tfor (let i = 0; i < slots.length; i++) {\n\t\t\t\tenchant = (this.enchantsBySlot[slots[i]] || [])\n\t\t\t\t\t\t.find(enchant => [enchant.effectId, enchant.itemId, enchant.spellId].includes(itemSpec.enchant)) || null;\n\t\t\t\tif (enchant) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst gems = itemSpec.gems.map(gemId => this.gems[gemId] || null);\n\n\t\treturn new EquippedItem(item, enchant, gems);\n\t}\n\n\tlookupEquipmentSpec(equipSpec: EquipmentSpec): Gear {\n\t\t// EquipmentSpec is supposed to be indexed by slot, but here we assume\n\t\t// it isn't just in case.\n\t\tconst gearMap: Partial<Record<ItemSlot, EquippedItem | null>> = {};\n\n\t\tequipSpec.items.forEach(itemSpec => {\n\t\t\tconst item = this.lookupItemSpec(itemSpec);\n\t\t\tif (!item)\n\t\t\t\treturn;\n\n\t\t\tconst itemSlots = getEligibleItemSlots(item.item);\n\n\t\t\tconst assignedSlot = itemSlots.find(slot => !gearMap[slot]);\n\t\t\tif (assignedSlot == null)\n\t\t\t\tthrow new Error('No slots left to equip ' + Item.toJsonString(item.item));\n\n\t\t\tgearMap[assignedSlot] = item;\n\t\t});\n\n\t\treturn new Gear(gearMap);\n\t}\n\n\tenchantSpellIdToEffectId(enchantSpellId: number): number {\n\t\tconst enchant = Object.values(this.enchantsBySlot).flat().find(enchant => enchant.spellId == enchantSpellId);\n\t\treturn enchant ? enchant.effectId : 0;\n\t}\n\n\tglyphItemToSpellId(itemId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.itemId == itemId)?.spellId || 0;\n\t}\n\tglyphSpellToItemId(spellId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.spellId == spellId)?.itemId || 0;\n\t}\n\n\tgetPresetEncounter(path: string): PresetEncounter | null {\n\t\treturn this.presetEncounters[path] || null;\n\t}\n\tgetPresetTarget(path: string): PresetTarget | null {\n\t\treturn this.presetTargets[path] || null;\n\t}\n\tgetAllPresetEncounters(): Array<PresetEncounter> {\n\t\treturn Object.values(this.presetEncounters);\n\t}\n\tgetAllPresetTargets(): Array<PresetTarget> {\n\t\treturn Object.values(this.presetTargets);\n\t}\n\n\tstatic async getItemIconData(itemId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.itemIcons[itemId]) {\n\t\t\tdb.itemIcons[itemId] = Database.getWowheadItemTooltipData(itemId);\n\t\t}\n\t\treturn await db.itemIcons[itemId];\n\t}\n\n\tstatic async getSpellIconData(spellId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.spellIcons[spellId]) {\n\t\t\tdb.spellIcons[spellId] = Database.getWowheadSpellTooltipData(spellId);\n\t\t}\n\t\treturn await db.spellIcons[spellId];\n\t}\n\n\tprivate static async getWowheadItemTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'item');\n\t}\n\tprivate static async getWowheadSpellTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'spell');\n\t}\n\tprivate static async getWowheadTooltipData(id: number, tooltipPostfix: string): Promise<IconData> {\n\t\tconst url = `https://nether.wowhead.com/wotlk/tooltip/${tooltipPostfix}/${id}`;\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst json = await response.json();\n\t\t\treturn IconData.create({\n\t\t\t\tid: id,\n\t\t\t\tname: json['name'],\n\t\t\t\ticon: json['icon'],\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\treturn IconData.create();\n\t\t}\n\t}\n}\n","import { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { resourceNames, stringToResourceType } from '../proto_utils/names.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\n\nexport class Entity {\n\treadonly name: string;\n\treadonly ownerName: string; // Blank if not a pet.\n\n\t// Either target index, player index, or owner index depending on what kind\n\t// of entity this is.\n\treadonly index: number;\n\n\treadonly isTarget: boolean;\n\treadonly isPet: boolean;\n\n\tconstructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n\t\tthis.name = name;\n\t\tthis.ownerName = ownerName;\n\t\tthis.index = index;\n\t\tthis.isTarget = isTarget;\n\t\tthis.isPet = isPet;\n\t}\n\n\tequals(other: Entity) {\n\t\treturn this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn 'Target ' + (this.index + 1);\n\t\t} else if (this.isPet) {\n\t\t\treturn `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n\t\t} else {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t}\n\t}\n\n\t// Parses one or more Entities from a string.\n\t// Each entity label should be one of:\n\t//   'Target 1' if a target,\n\t//   'PlayerName (#1)' if a player, or\n\t//   'PlayerName (#1) - PetName' if a pet.\n\tstatic parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9\\s]+) \\(#(\\d+)\\))\\]/g;\n\tstatic parseAll(str: string): Array<Entity> {\n\t\treturn Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n\t\t\tif (match[1]) {\n\t\t\t\treturn new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n\t\t\t} else if (match[3]) {\n\t\t\t\treturn new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n\t\t\t} else if (match[7]) {\n\t\t\t\treturn new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Entity match');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SimLogParams {\n\traw: string,\n\tlogIndex: number,\n\ttimestamp: number,\n\tsource: Entity | null,\n\ttarget: Entity | null,\n\tactionId: ActionId | null,\n\tthreat: number,\n}\n\nexport class SimLog {\n\treadonly raw: string;\n\n\t// Index of this log within the full log output.\n\t// When comparing timestamps this should be used instead of timestamp, because\n\t// timestamp is scraped from log text and doesn't have enough precision.\n\treadonly logIndex: number;\n\n\t// Time in seconds from the encounter start.\n\treadonly timestamp: number;\n\n\treadonly source: Entity | null;\n\treadonly target: Entity | null;\n\treadonly actionId: ActionId | null;\n\n\t// Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n\treadonly threat: number;\n\n\t// Logs for auras that were active at this timestamp.\n\t// This is only filled if populateActiveAuras() is called.\n\tactiveAuras: Array<AuraUptimeLog>;\n\n\tconstructor(params: SimLogParams) {\n\t\tthis.raw = params.raw;\n\t\tthis.logIndex = params.logIndex;\n\t\tthis.timestamp = params.timestamp;\n\t\tthis.source = params.source;\n\t\tthis.target = params.target;\n\t\tthis.actionId = params.actionId;\n\t\tthis.threat = params.threat;\n\t\tthis.activeAuras = [];\n\t}\n\n\ttoString(): string {\n\t\treturn this.raw;\n\t}\n\n\ttoStringPrefix(): string {\n\t\tconst timestampStr = `[${this.timestamp.toFixed(2)}]`;\n\t\tif (this.source) {\n\t\t\treturn `${timestampStr} [${this.source}]`;\n\t\t} else {\n\t\t\treturn timestampStr;\n\t\t}\n\t}\n\n\tstatic async parseAll(result: RaidSimResult): Promise<Array<SimLog>> {\n\t\tconst lines = result.logs.split('\\n');\n\n\t\treturn Promise.all(lines.map((line, lineIndex) => {\n\t\t\tconst params: SimLogParams = {\n\t\t\t\traw: line,\n\t\t\t\tlogIndex: lineIndex,\n\t\t\t\ttimestamp: 0,\n\t\t\t\tsource: null,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t};\n\n\t\t\tconst threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n\t\t\tif (threatMatch) {\n\t\t\t\tparams.threat = parseFloat(threatMatch[1]);\n\t\t\t\tline = line.substring(0, threatMatch.index);\n\t\t\t}\n\n\t\t\tlet match = line.match(/\\[(-?[0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n\t\t\tif (!match || !match[1]) {\n\t\t\t\treturn new SimLog(params);\n\t\t\t}\n\n\t\t\tparams.timestamp = parseFloat(match[1]);\n\t\t\tlet remainder = match[2];\n\n\t\t\tconst entities = Entity.parseAll(remainder);\n\t\t\tparams.source = entities[0] || null;\n\t\t\tparams.target = entities[1] || null;\n\n\t\t\t// Order from most to least common to reduce number of checks.\n\t\t\treturn DamageDealtLog.parse(params)\n\t\t\t\t|| ResourceChangedLog.parse(params)\n\t\t\t\t|| AuraEventLog.parse(params)\n\t\t\t\t|| AuraStacksChangeLog.parse(params)\n\t\t\t\t|| MajorCooldownUsedLog.parse(params)\n\t\t\t\t|| CastBeganLog.parse(params)\n\t\t\t\t|| CastCompletedLog.parse(params)\n\t\t\t\t|| StatChangeLog.parse(params)\n\t\t\t\t|| Promise.resolve(new SimLog(params));\n\t\t}));\n\t}\n\n\tisDamageDealt(): this is DamageDealtLog {\n\t\treturn this instanceof DamageDealtLog;\n\t}\n\n\tisResourceChanged(): this is ResourceChangedLog {\n\t\treturn this instanceof ResourceChangedLog;\n\t}\n\n\tisAuraEvent(): this is AuraEventLog {\n\t\treturn this instanceof AuraEventLog;\n\t}\n\n\tisAuraStacksChange(): this is AuraStacksChangeLog {\n\t\treturn this instanceof AuraStacksChangeLog;\n\t}\n\n\tisMajorCooldownUsed(): this is MajorCooldownUsedLog {\n\t\treturn this instanceof MajorCooldownUsedLog;\n\t}\n\n\tisCastBegan(): this is CastBeganLog {\n\t\treturn this instanceof CastBeganLog;\n\t}\n\n\tisCastCompleted(): this is CastCompletedLog {\n\t\treturn this instanceof CastCompletedLog;\n\t}\n\n\tisStatChange(): this is StatChangeLog {\n\t\treturn this instanceof StatChangeLog;\n\t}\n\n\t// Group events that happen at the same time.\n\tstatic groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n\t\tconst grouped: Array<Array<LogType>> = [];\n\t\tlet curGroup: Array<LogType> = [];\n\n\t\tlogs.forEach(log => {\n\t\t\tif (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n\t\t\t\tcurGroup.push(log);\n\t\t\t} else {\n\t\t\t\tgrouped.push(curGroup);\n\t\t\t\tcurGroup = [log];\n\t\t\t}\n\t\t});\n\t\tif (curGroup.length > 0) {\n\t\t\tgrouped.push(curGroup);\n\t\t}\n\n\t\treturn grouped;\n\t}\n}\n\nexport class DamageDealtLog extends SimLog {\n\treadonly amount: number;\n\treadonly type: string;\n\treadonly miss: boolean;\n\treadonly hit: boolean;\n\treadonly crit: boolean;\n\treadonly crush: boolean;\n\treadonly glance: boolean;\n\treadonly dodge: boolean;\n\treadonly parry: boolean;\n\treadonly block: boolean;\n\treadonly tick: boolean;\n\treadonly partialResist1_4: boolean;\n\treadonly partialResist2_4: boolean;\n\treadonly partialResist3_4: boolean;\n\n\tconstructor(params: SimLogParams, amount: number, type: string, miss: boolean, crit: boolean, crush: boolean, glance: boolean, dodge: boolean, parry: boolean, block: boolean, tick: boolean, partialResist1_4: boolean, partialResist2_4: boolean, partialResist3_4: boolean) {\n\t\tsuper(params);\n\t\tthis.amount = amount;\n\t\tthis.type = type;\n\t\tthis.miss = miss;\n\t\tthis.glance = glance;\n\t\tthis.dodge = dodge;\n\t\tthis.parry = parry;\n\t\tthis.block = block;\n\t\tthis.hit = !miss && !crit;\n\t\tthis.crit = crit;\n\t\tthis.crush = crush;\n\t\tthis.tick = tick;\n\t\tthis.partialResist1_4 = partialResist1_4;\n\t\tthis.partialResist2_4 = partialResist2_4;\n\t\tthis.partialResist3_4 = partialResist3_4;\n\t}\n\n\tisDamage(): boolean {\n\t\treturn this.type == 'damage';\n\t}\n\n\tisHealing(): boolean {\n\t\treturn this.type == 'healing';\n\t}\n\n\tisShielding(): boolean {\n\t\treturn this.type == 'shielding';\n\t}\n\n\tresultString(): string {\n\t\tlet result = '';\n\n\t\tif (this.isHealing()) {\n\t\t\tresult += 'Heal ';\n\t\t} else if (this.isShielding()) {\n\t\t\tresult += 'Shield ';\n\t\t}\n\n\t\tresult += this.miss ? 'Miss'\n\t\t\t: this.dodge ? 'Dodge'\n\t\t\t\t: this.parry ? 'Parry'\n\t\t\t\t\t: this.glance ? 'Glance'\n\t\t\t\t\t\t: this.block ? (this.crit ? 'Critical Block' : 'Block')\n\t\t\t\t\t\t\t: this.crit ? 'Crit'\n\t\t\t\t\t\t\t\t: this.crush ? 'Crush'\n\t\t\t\t\t\t\t\t\t: this.tick ? 'Tick'\n\t\t\t\t\t\t\t\t\t\t: 'Hit';\n\n\t\tresult += ' ' + this.target;\n\t\tif (!this.miss && !this.dodge && !this.parry) {\n\t\t\tresult += ` for ${this.amount.toFixed(2)}`;\n\t\t\tif (this.partialResist1_4) {\n\t\t\t\tresult += ' (25% Resist)';\n\t\t\t} else if (this.partialResist2_4) {\n\t\t\t\tresult += ' (50% Resist)';\n\t\t\t} else if (this.partialResist3_4) {\n\t\t\t\tresult += ' (75% Resist)';\n\t\t\t}\n\t\t\tresult += '.'\n\t\t}\n\t\treturn result;\n\t}\n\n\ttoString(): string {\n\t\tconst threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} ${this.resultString()}${threatPostfix}`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n\t\tconst match = params.raw.match(/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) ((damage)|(healing)|(shielding)))?/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\n\t\t\t\tconst amount = match[16] ? parseFloat(match[16]) : 0;\n\t\t\t\tconst type = match[17] || '';\n\n\t\t\t\treturn new DamageDealtLog(\n\t\t\t\t\tparams,\n\t\t\t\t\tamount,\n\t\t\t\t\ttype,\n\t\t\t\t\tmatch[3] == 'Miss',\n\t\t\t\t\tmatch[3] == 'Crit' || match[3] == 'CriticalBlock',\n\t\t\t\t\tmatch[3] == 'Crush',\n\t\t\t\t\tmatch[3] == 'Glance',\n\t\t\t\t\tmatch[3] == 'Dodge',\n\t\t\t\t\tmatch[3] == 'Parry',\n\t\t\t\t\tmatch[3] == 'Block' || match[3] == 'CriticalBlock',\n\t\t\t\t\tBoolean(match[2]) && match[2].includes('tick'),\n\t\t\t\t\tmatch[14] == '25',\n\t\t\t\t\tmatch[14] == '50',\n\t\t\t\t\tmatch[14] == '75');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class DpsLog extends SimLog {\n\treadonly dps: number;\n\n\t// Damage events that occurred at the same time as this log.\n\treadonly damageLogs: Array<DamageDealtLog>;\n\n\tconstructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n\t\tsuper(params);\n\t\tthis.dps = dps;\n\t\tthis.damageLogs = damageLogs;\n\t}\n\n\tstatic DPS_WINDOW = 15; // Window over which to calculate DPS.\n\tstatic fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n\t\tconst groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n\t\tlet curDamageLogs: Array<DamageDealtLog> = [];\n\t\tlet curDamageTotal = 0;\n\n\t\treturn groupedDamageLogs.map(ddLogGroup => {\n\t\t\tddLogGroup.forEach(ddLog => {\n\t\t\t\tcurDamageLogs.push(ddLog);\n\t\t\t\tcurDamageTotal += ddLog.amount;\n\t\t\t});\n\n\t\t\tconst newStartIdx = curDamageLogs.findIndex(curLog => {\n\t\t\t\tconst inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n\t\t\t\tif (!inWindow) {\n\t\t\t\t\tcurDamageTotal -= curLog.amount;\n\t\t\t\t}\n\t\t\t\treturn inWindow;\n\t\t\t});\n\t\t\tif (newStartIdx == -1) {\n\t\t\t\tcurDamageLogs = [];\n\t\t\t} else {\n\t\t\t\tcurDamageLogs = curDamageLogs.slice(newStartIdx);\n\t\t\t}\n\n\t\t\tconst dps = curDamageTotal / DpsLog.DPS_WINDOW;\n\t\t\tif (isNaN(dps)) {\n\t\t\t\tconsole.warn('NaN dps!');\n\t\t\t}\n\n\t\t\treturn new DpsLog({\n\t\t\t\traw: '',\n\t\t\t\tlogIndex: ddLogGroup[0].logIndex,\n\t\t\t\ttimestamp: ddLogGroup[0].timestamp,\n\t\t\t\tsource: ddLogGroup[0].source,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t}, dps, ddLogGroup);\n\t\t});\n\t}\n}\n\nexport class ThreatLogGroup extends SimLog {\n\treadonly threatBefore: number;\n\treadonly threatAfter: number;\n\treadonly logs: Array<SimLog>;\n\n\tconstructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n\t\tsuper(params);\n\t\tthis.threatBefore = threatBefore;\n\t\tthis.threatAfter = threatAfter;\n\t\tthis.logs = logs;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n\t\tlet curThreat = 0;\n\t\treturn groupedLogs.map(logGroup => {\n\t\t\tconst newThreat = sum(logGroup.map(log => log.threat));\n\t\t\tconst threatLog = new ThreatLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: newThreat,\n\t\t\t\t},\n\t\t\t\tcurThreat,\n\t\t\t\tcurThreat + newThreat,\n\t\t\t\tlogGroup);\n\n\t\t\tcurThreat += newThreat;\n\t\t\treturn threatLog;\n\t\t});\n\t}\n}\n\nexport class AuraEventLog extends SimLog {\n\treadonly isGained: boolean;\n\treadonly isFaded: boolean;\n\treadonly isRefreshed: boolean;\n\n\tconstructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n\t\tsuper(params);\n\t\tthis.isGained = isGained;\n\t\tthis.isFaded = isFaded;\n\t\tthis.isRefreshed = isRefreshed;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Aura ${this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraEventLog> | null {\n\t\tconst match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n\t\tif (match && match[5]) {\n\t\t\treturn ActionId.fromLogString(match[5]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\tconst event = match[1];\n\t\t\t\treturn new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n\treadonly oldStacks: number;\n\treadonly newStacks: number;\n\n\tconstructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n\t\tsuper(params);\n\t\tthis.oldStacks = oldStacks;\n\t\tthis.newStacks = newStacks;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} stacks: ${this.oldStacks} --> ${this.newStacks}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n\t\tconst match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n\t\tif (match && match[1]) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\treturn new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraUptimeLog extends SimLog {\n\treadonly gainedAt: number;\n\treadonly fadedAt: number;\n\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n\tconstructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n\t\tsuper(params);\n\t\tthis.gainedAt = params.timestamp;\n\t\tthis.fadedAt = fadedAt;\n\t\tthis.stacksChange = stacksChange;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n\t\tlet unmatchedGainedLogs: Array<{ gained: AuraEventLog, stacks: Array<AuraStacksChangeLog> }> = [];\n\t\tconst uptimeLogs: Array<AuraUptimeLog> = [];\n\n\t\tlogs.forEach((log: SimLog) => {\n\t\t\tif (!log.source || !log.source.equals(entity)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isGained) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\tconsole.warn('Unmatched aura faded log: ' + log.actionId!.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: log.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: log.source,\n\t\t\t\ttarget: log.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, log.timestamp, stacksChangeLogs));\n\n\t\t\tif (log.isRefreshed) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t}\n\t\t});\n\n\t\t// Auras active at the end won't have a faded log, so need to add them separately.\n\t\tunmatchedGainedLogs.forEach(unmatchedLog => {\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: gainedLog.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: gainedLog.source,\n\t\t\t\ttarget: gainedLog.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, encounterDuration, stacksChangeLogs));\n\t\t});\n\n\t\tuptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n\t\treturn uptimeLogs;\n\t}\n\n\t// Populates the activeAuras field for all logs using the provided auras.\n\tstatic populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n\t\tlet curAuras: Array<AuraUptimeLog> = [];\n\t\tlet auraLogsIndex = 0;\n\n\t\tlogs.forEach(log => {\n\t\t\twhile (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n\t\t\t\tcurAuras.push(auraLogs[auraLogsIndex]);\n\t\t\t\tauraLogsIndex++;\n\t\t\t}\n\t\t\tcurAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n\t\t\tconst activeAuras = curAuras.slice();\n\t\t\tactiveAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\t\tlog.activeAuras = activeAuras;\n\t\t});\n\t}\n}\n\nexport class ResourceChangedLog extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly isSpend: boolean;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.isSpend = isSpend;\n\t}\n\n\ttoString(): string {\n\t\tconst signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\n\t\tconst isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n\t\tconst verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : (this.isSpend ? 'Spent' : 'Gained');\n\n\t\treturn `${this.toStringPrefix()} ${verb} ${signedDiff.toFixed(1)} ${resourceNames[this.resourceType]} from ${this.actionId!.name}. (${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)})`;\n\t}\n\n\tresultString(): string {\n\t\tconst delta = this.valueAfter - this.valueBefore;\n\t\tif (delta < 0) {\n\t\t\treturn delta.toFixed(1);\n\t\t} else {\n\t\t\treturn '+' + delta.toFixed(1);\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)/);\n\t\tif (match) {\n\t\t\tconst resourceType = stringToResourceType(match[4]);\n\t\t\treturn ActionId.fromLogString(match[16]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\t\t\t\treturn new ResourceChangedLog(params, resourceType, parseFloat(match[17]), parseFloat(match[18]), match[1] == 'Spent');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly logs: Array<ResourceChangedLog>;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, logs: Array<ResourceChangedLog>) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.logs = logs;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${resourceNames[this.resourceType]}: ${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)}`;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n\t\tconst allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n\t\tconst results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n\t\tconst resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n\t\tresourceTypes.forEach(resourceType => {\n\t\t\tconst resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n\t\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n\t\t\tresults[resourceType] = groupedLogs.map(logGroup => new ResourceChangedLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t},\n\t\t\t\tresourceType,\n\t\t\t\tlogGroup[0].valueBefore,\n\t\t\t\tlogGroup[logGroup.length - 1].valueAfter,\n\t\t\t\tlogGroup));\n\t\t});\n\n\t\treturn results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\t}\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Major cooldown used: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n\t\tconst match = params.raw.match(/Major cooldown used: (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cooldownId => {\n\t\t\t\tparams.actionId = cooldownId;\n\t\t\t\treturn new MajorCooldownUsedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastBeganLog extends SimLog {\n\treadonly manaCost: number;\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\n\tconstructor(params: SimLogParams, manaCost: number, castTime: number, effectiveTime: number) {\n\t\tsuper(params);\n\t\tthis.manaCost = manaCost;\n\t\tthis.castTime = castTime;\n\t\tthis.effectiveTime = effectiveTime;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s, Cost = ${this.manaCost.toFixed(1)}).`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastBeganLog> | null {\n\t\tconst match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s), Effective Time = (\\d+\\.?\\d*)(m?s)\\)/);\n\t\tif (match) {\n\t\t\tlet castTime = parseFloat(match[3]);\n\t\t\tif (match[4] == 'ms') {\n\t\t\t\tcastTime /= 1000;\n\t\t\t}\n\t\t\tlet effectiveTime = parseFloat(match[5]);\n\t\t\tif (match[6] == 'ms') {\n\t\t\t\teffectiveTime /= 1000;\n\t\t\t}\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastBeganLog(params, parseFloat(match[2]), castTime, effectiveTime);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastCompletedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Completed cast ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n\t\tconst match = params.raw.match(/Completed cast (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastCompletedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastLog extends SimLog {\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\treadonly travelTime: number;\n\n\treadonly castBeganLog: CastBeganLog;\n\treadonly castCompletedLog: CastCompletedLog | null;\n\n\t// All instances of damage dealt from the completion of this cast until the completion of the next cast.\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\n\tconstructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n\t\tsuper({\n\t\t\traw: castBeganLog.raw,\n\t\t\tlogIndex: castBeganLog.logIndex,\n\t\t\ttimestamp: castBeganLog.timestamp,\n\t\t\tsource: castBeganLog.source,\n\t\t\ttarget: castBeganLog.target,\n\t\t\tactionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n\t\t\tthreat: castCompletedLog?.threat || castBeganLog.threat,\n\t\t});\n\t\tthis.castTime = castBeganLog.castTime;\n\t\tthis.effectiveTime = castBeganLog.effectiveTime;\n\t\tthis.castBeganLog = castBeganLog;\n\t\tthis.castCompletedLog = castCompletedLog;\n\t\tthis.damageDealtLogs = damageDealtLogs;\n\n\t\tif (this.castCompletedLog && this.damageDealtLogs.length == 1 &&\n\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t!this.damageDealtLogs[0].tick) {\n\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t} else {\n\t\t\tthis.travelTime = 0;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s).`;\n\t}\n\n\ttotalDamage(): number {\n\t\treturn sum(this.damageDealtLogs.map(ddl => ddl.amount));\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<CastLog> {\n\t\tconst castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n\t\tconst castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n\t\tconst damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n\t\tconst toBucketKey = (actionId: ActionId) => {\n\t\t\tif (actionId.spellId == 30451) {\n\t\t\t\t// Arcane Blast is unique because it can finish its cast as a different\n\t\t\t\t// spell than it started (if stacks drop).\n\t\t\t\treturn actionId.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn actionId.toString();\n\t\t\t}\n\t\t};\n\t\tconst castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n\t\tconst castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n\t\tconst damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n\t\tconst castLogs: Array<CastLog> = [];\n\t\tObject.keys(castBeganLogsByAbility).forEach(bucketKey => {\n\t\t\tconst abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n\t\t\tconst abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n\t\t\tconst abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n\t\t\tconst actionId = abilityCastsBegan[0].actionId!;\n\n\t\t\tlet ddIdx = 0;\n\t\t\tfor (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n\t\t\t\tconst cbLog = abilityCastsBegan[cbIdx];\n\n\t\t\t\t// Assume cast completed log is the same index because they always come in pairs.\n\t\t\t\t// Only exception is final pair, where there might be a cast began without a cast completed.\n\t\t\t\tconst ccLog = abilityCastsCompleted[cbIdx] || null;\n\t\t\t\tconst nextCcLog = abilityCastsCompleted[cbIdx + 1] || null;\n\n\t\t\t\t// Find all damage dealt logs between the cur and next cast completed logs.\n\t\t\t\tlet ddLogs = [];\n\t\t\t\twhile (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n\t\t\t\t\tddLogs.push(abilityDamageDealt[ddIdx]);\n\t\t\t\t\tddIdx++\n\t\t\t\t}\n\t\t\t\tcastLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n\t\t\t}\n\t\t});\n\n\t\tcastLogs.sort((a, b) => a.timestamp - b.timestamp);\n\t\treturn castLogs;\n\t}\n}\n\nexport class StatChangeLog extends SimLog {\n\treadonly isGain: boolean;\n\treadonly stats: string;\n\n\tconstructor(params: SimLogParams, isGain: boolean, stats: string) {\n\t\tsuper(params);\n\t\tthis.isGain = isGain;\n\t\tthis.stats = stats;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isGain) {\n\t\t\treturn `${this.toStringPrefix()} Gained ${this.stats} from ${this.actionId!.name}.`;\n\t\t} else {\n\t\t\treturn `${this.toStringPrefix()} Lost ${this.stats} from fading ${this.actionId!.name}.`;\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<StatChangeLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[6]).fill(params.source?.index).then(effectId => {\n\t\t\t\tparams.actionId = effectId;\n\t\t\t\tconst sign = match[1] == 'Lost' ? -1 : 1;\n\t\t\t\treturn new StatChangeLog(params, sign == 1, match[4]);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { ActionMetrics as ActionMetricsProto } from '../proto/api.js';\nimport { AuraMetrics as AuraMetricsProto } from '../proto/api.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Encounter as EncounterProto } from '../proto/common.js';\nimport { EncounterMetrics as EncounterMetricsProto } from '../proto/api.js';\nimport { Party as PartyProto } from '../proto/api.js';\nimport { PartyMetrics as PartyMetricsProto } from '../proto/api.js';\nimport { Player as PlayerProto } from '../proto/api.js';\nimport { UnitMetrics as UnitMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidMetrics as RaidMetricsProto } from '../proto/api.js';\nimport { ResourceMetrics as ResourceMetricsProto, ResourceType } from '../proto/api.js';\nimport { Target as TargetProto } from '../proto/common.js';\nimport { TargetedActionMetrics as TargetedActionMetricsProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { Class } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { classColors } from '../proto_utils/utils.js';\nimport { getTalentTreeIcon } from '../proto_utils/utils.js';\nimport { playerToSpec } from '../proto_utils/utils.js';\nimport { specToClass } from '../proto_utils/utils.js';\nimport { bucket } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tDpsLog,\n\tEntity,\n\tMajorCooldownUsedLog,\n\tResourceChangedLogGroup,\n\tSimLog,\n\tThreatLogGroup,\n} from './logs_parser.js';\nimport { MAX_PARTY_SIZE } from '../party.js';\n\nexport interface SimResultFilter {\n\t// Raid index of the player to display, or null for all players.\n\tplayer?: number | null;\n\n\t// Target index of the target to display, or null for all targets.\n\ttarget?: number | null;\n}\n\nclass SimResultData {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\tconstructor(request: RaidSimRequest, result: RaidSimResult) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\treadonly raidMetrics: RaidMetrics;\n\treadonly encounterMetrics: EncounterMetrics;\n\treadonly logs: Array<SimLog>;\n\n\tprivate players: Array<UnitMetrics>;\n\tprivate units: Array<UnitMetrics>;\n\n\tprivate constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t\tthis.raidMetrics = raidMetrics;\n\t\tthis.encounterMetrics = encounterMetrics;\n\t\tthis.logs = logs;\n\n\t\tthis.players = raidMetrics.parties.map(party => party.players).flat();\n\t\tthis.units = this.players.concat(encounterMetrics.targets);\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n\n\tgetPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getUnitWithIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\t// Returns the first player, regardless of which party / raid slot its in.\n\tgetFirstPlayer(): UnitMetrics | null {\n\t\treturn this.getPlayers()[0] || null;\n\t}\n\n\tgetPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.unitIndex == unitIndex) || null;\n\t}\n\tgetPlayerWithRaidIndex(raidIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.index == raidIndex) || null;\n\t}\n\n\tgetTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.target || filter?.target === 0) {\n\t\t\tconst target = this.getUnitWithIndex(filter.target);\n\t\t\treturn target ? [target] : [];\n\t\t} else {\n\t\t\treturn this.encounterMetrics.targets.slice();\n\t\t}\n\t}\n\n\tgetTargetWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n\t}\n\tgetUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.units.find(unit => unit.unitIndex == unitIndex) || null;\n\t}\n\n\tgetDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n\t\tif (filter.player || filter.player === 0) {\n\t\t\treturn this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n\t\t}\n\n\t\treturn this.raidMetrics.dps;\n\t}\n\n\tgetActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(this.getPlayers(filter).map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter))).flat());\n\t}\n\n\tgetSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n\t}\n\n\tgetMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.joinById(this.getPlayers(filter).map(player => player.resources.filter(resource => resource.type == resourceType)).flat());\n\t}\n\n\tgetBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getPlayers(filter).map(player => player.auras).flat());\n\t}\n\n\tgetDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getTargets(filter).map(target => target.auras).flat()).filter(aura => aura.uptimePercent != 0);\n\t}\n\n\ttoProto(): SimRun {\n\t\treturn SimRun.create({\n\t\t\trequest: this.request,\n\t\t\tresult: this.result,\n\t\t});\n\t}\n\n\tstatic async fromProto(proto: SimRun): Promise<SimResult> {\n\t\treturn SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n\t}\n\n\tstatic async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n\t\tconst resultData = new SimResultData(request, result);\n\t\tconst logs = await SimLog.parseAll(result);\n\n\t\tconst raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n\t\tconst encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n\t\tconst raidMetrics = await raidPromise;\n\t\tconst encounterMetrics = await encounterPromise;\n\n\t\treturn new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n\t}\n}\n\nexport class RaidMetrics {\n\tprivate readonly raid: RaidProto;\n\tprivate readonly metrics: RaidMetricsProto;\n\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly parties: Array<PartyMetrics>;\n\n\tprivate constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n\t\tthis.raid = raid;\n\t\tthis.metrics = metrics;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.parties = parties;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n\t\tconst numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n\t\tconst parties = await Promise.all(\n\t\t\t[...new Array(numParties).keys()]\n\t\t\t\t.map(i => PartyMetrics.makeNew(\n\t\t\t\t\tresultData,\n\t\t\t\t\traid.parties[i],\n\t\t\t\t\tmetrics.parties[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new RaidMetrics(raid, metrics, parties);\n\t}\n}\n\nexport class PartyMetrics {\n\tprivate readonly party: PartyProto;\n\tprivate readonly metrics: PartyMetricsProto;\n\n\treadonly partyIndex: number;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly players: Array<UnitMetrics>;\n\n\tprivate constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n\t\tthis.party = party;\n\t\tthis.metrics = metrics;\n\t\tthis.partyIndex = partyIndex;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.players = players;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, logs: Array<SimLog>): Promise<PartyMetrics> {\n\t\tconst numPlayers = Math.min(party.players.length, metrics.players.length);\n\t\tconst players = await Promise.all(\n\t\t\t[...new Array(numPlayers).keys()]\n\t\t\t\t.filter(i => party.players[i].class != Class.ClassUnknown)\n\t\t\t\t.map(i => UnitMetrics.makeNewPlayer(\n\t\t\t\t\tresultData,\n\t\t\t\t\tparty.players[i],\n\t\t\t\t\tmetrics.players[i],\n\t\t\t\t\tpartyIndex * 5 + i,\n\t\t\t\t\tfalse,\n\t\t\t\t\tlogs)));\n\n\t\treturn new PartyMetrics(party, metrics, partyIndex, players);\n\t}\n}\n\nexport class UnitMetrics {\n\t// If this Unit is a pet, player is the owner. If it's a target, player is null.\n\tprivate readonly player: PlayerProto | null;\n\tprivate readonly target: TargetProto | null;\n\tprivate readonly metrics: UnitMetricsProto;\n\n\treadonly index: number;\n\treadonly unitIndex: number;\n\treadonly name: string;\n\treadonly spec: Spec;\n\treadonly petActionId: ActionId | null;\n\treadonly iconUrl: string;\n\treadonly classColor: string;\n\treadonly dps: DistributionMetricsProto;\n\treadonly dpasp: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly tps: DistributionMetricsProto;\n\treadonly dtps: DistributionMetricsProto;\n\treadonly tmi: DistributionMetricsProto;\n\treadonly tto: DistributionMetricsProto;\n\treadonly actions: Array<ActionMetrics>;\n\treadonly auras: Array<AuraMetrics>;\n\treadonly resources: Array<ResourceMetrics>;\n\treadonly pets: Array<UnitMetrics>;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\n\treadonly logs: Array<SimLog>;\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\treadonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\treadonly dpsLogs: Array<DpsLog>;\n\treadonly auraUptimeLogs: Array<AuraUptimeLog>;\n\treadonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n\treadonly castLogs: Array<CastLog>;\n\treadonly threatLogs: Array<ThreatLogGroup>;\n\n\t// Aura uptime logs, filtered to include only auras that correspond to a\n\t// major cooldown.\n\treadonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n\tprivate constructor(\n\t\tplayer: PlayerProto | null,\n\t\ttarget: TargetProto | null,\n\t\tpetActionId: ActionId | null,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tactions: Array<ActionMetrics>,\n\t\tauras: Array<AuraMetrics>,\n\t\tresources: Array<ResourceMetrics>,\n\t\tpets: Array<UnitMetrics>,\n\t\tlogs: Array<SimLog>,\n\t\tresultData: SimResultData) {\n\t\tthis.player = player;\n\t\tthis.target = target;\n\t\tthis.metrics = metrics;\n\n\t\tthis.index = index;\n\t\tthis.unitIndex = metrics.unitIndex;\n\t\tthis.name = metrics.name;\n\t\tthis.spec = player ? playerToSpec(player) : 0;\n\t\tthis.petActionId = petActionId;\n\t\tthis.iconUrl = this.isPlayer ? getTalentTreeIcon(this.spec, player!.talentsString) :\n\t\t\t(this.isTarget ? defaultTargetIcon : '');\n\t\tthis.classColor = this.isTarget ? 'black' : classColors[specToClass[this.spec]];\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.dpasp = this.metrics.dpasp!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.tps = this.metrics.threat!;\n\t\tthis.dtps = this.metrics.dtps!;\n\t\tthis.tmi = this.metrics.tmi!;\n\t\tthis.tto = this.metrics.tto!;\n\t\tthis.actions = actions;\n\t\tthis.auras = auras;\n\t\tthis.resources = resources;\n\t\tthis.pets = pets;\n\t\tthis.logs = logs;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\n\t\tthis.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\t\tthis.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n\t\tthis.castLogs = CastLog.fromLogs(this.logs);\n\t\tthis.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n\t\tthis.auraUptimeLogs = AuraUptimeLog.fromLogs(this.logs, new Entity(this.name, '', this.index, this.target != null, this.isPet), resultData.firstIterationDuration);\n\t\tthis.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n\t\tthis.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n\t\tAuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n\t\tAuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n\t\tthis.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog => this.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)));\n\t}\n\n\tget label() {\n\t\tif (this.target == null) {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tget isPlayer() {\n\t\treturn this.player != null;\n\t}\n\n\tget isTarget() {\n\t\treturn this.target != null;\n\t}\n\n\tget isPet() {\n\t\treturn this.petActionId != null;\n\t}\n\n\t// Returns the unit index of the target of this unit, as selected by the filter.\n\tgetTargetIndex(filter?: SimResultFilter): number | null {\n\t\tif (!filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst index = this.isPlayer ? filter.target : filter.player;\n\t\tif (index == null || index == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tget inFrontOfTarget(): boolean {\n\t\tif (this.isTarget) {\n\t\t\treturn true;\n\t\t} else if (this.isPlayer) {\n\t\t\treturn this.player!.inFrontOfTarget;\n\t\t} else {\n\t\t\treturn false; // TODO pets\n\t\t}\n\t}\n\n\tget chanceOfDeath(): number {\n\t\treturn this.metrics.chanceOfDeath * 100;\n\t}\n\n\tget maxThreat() {\n\t\treturn this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n\t}\n\n\tget secondsOomAvg() {\n\t\treturn this.metrics.secondsOomAvg\n\t}\n\n\tget totalDamage() {\n\t\treturn this.dps.avg * this.duration;\n\t}\n\n\tgetPlayerAndPetActions(): Array<ActionMetrics> {\n\t\treturn this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n\t}\n\n\tprivate getActionsForDisplay(): Array<ActionMetrics> {\n\t\treturn this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n\t}\n\n\tgetMeleeActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => e.isMeleeAction);\n\t}\n\n\tgetSpellActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n\t}\n\n\tgetHealingActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay();\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n\t\treturn this.resources.filter(resource => resource.type == resourceType);\n\t}\n\n\tstatic async makeNewPlayer(resultData: SimResultData, player: PlayerProto, metrics: UnitMetricsProto, raidIndex: number, isPet: boolean, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst playerLogs = logs.filter(log => log.source && (!log.source.isTarget && (isPet == log.source.isPet) && log.source.index == raidIndex));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n\t\tconst resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n\t\tconst petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, playerLogs)));\n\n\t\tlet petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n\t\tif (isPet) {\n\t\t\tpetIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n\t\t}\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\t\tconst resources = await resourcesPromise;\n\t\tconst pets = await petsPromise;\n\t\tconst petActionId = await petIdPromise;\n\n\t\tconst playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n\t\tactions.forEach(action => {\n\t\t\taction.unit = playerMetrics;\n\t\t\taction.resources = resources.filter(resourceMetrics => resourceMetrics.actionId.equals(action.actionId));\n\t\t});\n\t\tauras.forEach(aura => aura.unit = playerMetrics);\n\t\tresources.forEach(resource => resource.unit = playerMetrics);\n\t\treturn playerMetrics;\n\t}\n\n\tstatic async makeNewTarget(resultData: SimResultData, target: TargetProto, metrics: UnitMetricsProto, index: number, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst targetLogs = logs.filter(log => log.source && (log.source.isTarget && log.source.index == index));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\n\t\tconst targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n\t\tactions.forEach(action => action.unit = targetMetrics);\n\t\tauras.forEach(aura => aura.unit = targetMetrics);\n\t\treturn targetMetrics;\n\t}\n}\n\nexport class EncounterMetrics {\n\tprivate readonly encounter: EncounterProto;\n\tprivate readonly metrics: EncounterMetricsProto;\n\n\treadonly targets: Array<UnitMetrics>;\n\n\tprivate constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n\t\tthis.encounter = encounter;\n\t\tthis.metrics = metrics;\n\t\tthis.targets = targets;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n\t\tconst numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n\t\tconst targets = await Promise.all(\n\t\t\t[...new Array(numTargets).keys()]\n\t\t\t\t.map(i => UnitMetrics.makeNewTarget(\n\t\t\t\t\tresultData,\n\t\t\t\t\tencounter.targets[i],\n\t\t\t\t\tmetrics.targets[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new EncounterMetrics(encounter, metrics, targets);\n\t}\n\n\tget durationSeconds() {\n\t\treturn this.encounter.duration;\n\t}\n}\n\nexport class AuraMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: AuraMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.data = data;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t}\n\n\tget uptimePercent() {\n\t\treturn this.data.uptimeSecondsAvg / this.duration * 100;\n\t}\n\n\tget averageProcs() {\n\t\treturn this.data.procsAvg\n\t}\n\n\tget ppm() {\n\t\treturn this.data.procsAvg / (this.duration / 60);\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n\t\tconst actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n\t\treturn new AuraMetrics(unit, actionId, auraMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n\t\tconst firstAura = auras[0];\n\t\tconst unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n\t\tlet actionId = actionIdOverride || firstAura.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new AuraMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tAuraMetricsProto.create({\n\t\t\t\tuptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n\t\t\t}),\n\t\t\tfirstAura.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges aura metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n\t\treturn AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n\t}\n};\n\nexport class ResourceMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly type: ResourceType;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ResourceMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.type = data.type;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t}\n\n\tget events() {\n\t\treturn this.data.events / this.iterations;\n\t}\n\n\tget gain() {\n\t\treturn this.data.gain / this.iterations;\n\t}\n\n\tget gainPerSecond() {\n\t\treturn this.data.gain / this.iterations / this.duration;\n\t}\n\n\tget avgGain() {\n\t\treturn this.data.gain / this.data.events;\n\t}\n\n\tget wastedGain() {\n\t\treturn (this.data.gain - this.data.actualGain) / this.iterations;\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, resourceMetrics: ResourceMetricsProto, playerIndex?: number): Promise<ResourceMetrics> {\n\t\tconst actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n\t\treturn new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n\t\tconst firstResource = resources[0];\n\t\tconst unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n\t\tlet actionId = actionIdOverride || firstResource.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new ResourceMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tResourceMetricsProto.create({\n\t\t\t\tevents: sum(resources.map(a => a.data.events)),\n\t\t\t\tgain: sum(resources.map(a => a.data.gain)),\n\t\t\t\tactualGain: sum(resources.map(a => a.data.actualGain)),\n\t\t\t}),\n\t\t\tfirstResource.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges resource metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n\t}\n};\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly targets: Array<TargetedActionMetrics>;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ActionMetricsProto;\n\tprivate readonly combinedMetrics: TargetedActionMetrics;\n\tresources: Array<ResourceMetrics>;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t\tthis.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n\t\tthis.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n\t\tthis.resources = [];\n\t}\n\n\tget isMeleeAction() {\n\t\treturn this.data.isMelee;\n\t}\n\n\tget damage() {\n\t\treturn this.combinedMetrics.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.combinedMetrics.dps;\n\t}\n\n\tget hps() {\n\t\treturn this.combinedMetrics.hps;\n\t}\n\n\tget tps() {\n\t\treturn this.combinedMetrics.tps;\n\t}\n\n\tget casts() {\n\t\treturn this.combinedMetrics.casts;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.combinedMetrics.castsPerMinute;\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.combinedMetrics.avgCastTimeMs;\n\t}\n\n\tget hpm() {\n\t\tconst totalHealing = this.combinedMetrics.hps * this.duration;\n\t\tconst manaMetrics = this.resources.find(r => r.type == ResourceType.ResourceTypeMana);\n\t\tif (manaMetrics) {\n\t\t\treturn totalHealing / -manaMetrics.gain;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tget healingThroughput() {\n\t\treturn this.combinedMetrics.healingThroughput;\n\t}\n\n\tget avgCast() {\n\t\treturn this.combinedMetrics.avgCast;\n\t}\n\n\tget avgCastHealing() {\n\t\treturn this.combinedMetrics.avgCastHealing;\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.combinedMetrics.avgCastThreat;\n\t}\n\n\tget landedHits() {\n\t\treturn this.combinedMetrics.landedHits;\n\t}\n\n\tget hitAttempts() {\n\t\treturn this.combinedMetrics.hitAttempts;\n\t}\n\n\tget avgHit() {\n\t\treturn this.combinedMetrics.avgHit;\n\t}\n\n\tget avgHitThreat() {\n\t\treturn this.combinedMetrics.avgHitThreat;\n\t}\n\n\tget critPercent() {\n\t\treturn this.combinedMetrics.critPercent;\n\t}\n\n\tget misses() {\n\t\treturn this.combinedMetrics.misses;\n\t}\n\n\tget missPercent() {\n\t\treturn this.combinedMetrics.missPercent;\n\t}\n\n\tget dodges() {\n\t\treturn this.combinedMetrics.dodges;\n\t}\n\n\tget dodgePercent() {\n\t\treturn this.combinedMetrics.dodgePercent;\n\t}\n\n\tget parries() {\n\t\treturn this.combinedMetrics.parries;\n\t}\n\n\tget parryPercent() {\n\t\treturn this.combinedMetrics.parryPercent;\n\t}\n\n\tget blocks() {\n\t\treturn this.combinedMetrics.blocks;\n\t}\n\n\tget blockPercent() {\n\t\treturn this.combinedMetrics.blockPercent;\n\t}\n\n\tget glances() {\n\t\treturn this.combinedMetrics.glances;\n\t}\n\n\tget glancePercent() {\n\t\treturn this.combinedMetrics.glancePercent;\n\t}\n\n\tforTarget(filter?: SimResultFilter): ActionMetrics {\n\t\tconst unitIndex = this.unit!.getTargetIndex(filter);\n\t\tif (unitIndex == null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconst target = this.targets.find(target => target.data.unitIndex == unitIndex);\n\t\t\tif (target) {\n\t\t\t\tconst targetData = ActionMetricsProto.clone(this.data);\n\t\t\t\ttargetData.targets = [target.data];\n\t\t\t\treturn new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Could not find target with unitIndex ' + unitIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n\t\tconst actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n\t\treturn new ActionMetrics(unit, actionId, actionMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n\t\tconst firstAction = actions[0];\n\t\tconst unit = firstAction.unit\n\t\tlet actionId = actionIdOverride || firstAction.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\n\t\tconst maxTargets = Math.max(...actions.map(action => action.targets.length));\n\t\tconst mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n\t\treturn new ActionMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tActionMetricsProto.create({\n\t\t\t\tisMelee: firstAction.isMeleeAction,\n\t\t\t\ttargets: mergedTargets.map(t => t.data),\n\t\t\t}),\n\t\t\tfirstAction.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges action metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n\t\treturn ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n\t}\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\treadonly data: TargetedActionMetricsProto;\n\n\treadonly landedHitsRaw: number;\n\treadonly hitAttempts: number;\n\n\tconstructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n\t\tthis.iterations = iterations;\n\t\tthis.duration = duration;\n\t\tthis.data = data;\n\n\t\tthis.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n\t\tthis.hitAttempts = this.data.misses\n\t\t\t+ this.data.dodges\n\t\t\t+ this.data.parries\n\t\t\t+ this.data.blocks\n\t\t\t+ this.data.glances\n\t\t\t+ this.data.crits\n\t\t\t+ this.data.hits;\n\t}\n\n\tget damage() {\n\t\treturn this.data.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.data.damage / this.iterations / this.duration;\n\t}\n\n\tget hps() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / this.duration;\n\t}\n\n\tget tps() {\n\t\treturn this.data.threat / this.iterations / this.duration;\n\t}\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.casts / (this.duration / 60);\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.data.castTimeMs / this.iterations / this.casts;\n\t}\n\n\tget healingThroughput() {\n\t\tif (this.avgCastTimeMs) {\n\t\t\treturn this.hps / (this.avgCastTimeMs / 1000);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget timeSpentCastingMs() {\n\t\treturn this.data.castTimeMs / this.iterations;\n\t}\n\n\tget avgCast() {\n\t\treturn (this.data.damage / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastHealing() {\n\t\treturn ((this.data.healing + this.data.shielding) / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastThreat() {\n\t\treturn (this.data.threat / this.iterations) / (this.casts || 1);\n\t}\n\n\tget landedHits() {\n\t\treturn this.landedHitsRaw / this.iterations;\n\t}\n\n\tget avgHit() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.damage / lhr;\n\t}\n\n\tget avgHitThreat() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.threat / lhr;\n\t}\n\n\tget critPercent() {\n\t\treturn (this.data.crits / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget misses() {\n\t\treturn this.data.misses / this.iterations;\n\t}\n\n\tget missPercent() {\n\t\treturn (this.data.misses / (this.data.casts || 1)) * 100;\n\t}\n\n\tget dodges() {\n\t\treturn this.data.dodges / this.iterations;\n\t}\n\n\tget dodgePercent() {\n\t\treturn (this.data.dodges / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget parries() {\n\t\treturn this.data.parries / this.iterations;\n\t}\n\n\tget parryPercent() {\n\t\treturn (this.data.parries / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget blocks() {\n\t\treturn this.data.blocks / this.iterations;\n\t}\n\n\tget blockPercent() {\n\t\treturn (this.data.blocks / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget glances() {\n\t\treturn this.data.glances / this.iterations;\n\t}\n\n\tget glancePercent() {\n\t\treturn (this.data.glances / (this.hitAttempts || 1)) * 100;\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n\t\treturn new TargetedActionMetrics(\n\t\t\tactions[0]?.iterations || 1,\n\t\t\tactions[0]?.duration || 1,\n\t\t\tTargetedActionMetricsProto.create({\n\t\t\t\tcasts: sum(actions.map(a => a.data.casts)),\n\t\t\t\thits: sum(actions.map(a => a.data.hits)),\n\t\t\t\tcrits: sum(actions.map(a => a.data.crits)),\n\t\t\t\tmisses: sum(actions.map(a => a.data.misses)),\n\t\t\t\tdodges: sum(actions.map(a => a.data.dodges)),\n\t\t\t\tparries: sum(actions.map(a => a.data.parries)),\n\t\t\t\tblocks: sum(actions.map(a => a.data.blocks)),\n\t\t\t\tglances: sum(actions.map(a => a.data.glances)),\n\t\t\t\tdamage: sum(actions.map(a => a.data.damage)),\n\t\t\t\tthreat: sum(actions.map(a => a.data.threat)),\n\t\t\t\thealing: sum(actions.map(a => a.data.healing)),\n\t\t\t\tshielding: sum(actions.map(a => a.data.shielding)),\n\t\t\t\tcastTimeMs: sum(actions.map(a => a.data.castTimeMs)),\n\t\t\t}));\n\t}\n}\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","export abstract class Component {\n\tprotected customRootElement?(): HTMLElement;\n\n\tprivate disposeCallbacks: Array<() => void> = [];\n\tprivate disposed: boolean = false;\n\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || this.customRootElement?.() || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n\n\taddOnDisposeCallback(callback: () => void) {\n\t\tthis.disposeCallbacks.push(callback);\n\t}\n\n\tdispose() {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.disposed = true;\n\n\t\tthis.disposeCallbacks.forEach(callback => callback());\n\t\tthis.disposeCallbacks = [];\n\t}\n}\n","import { Tooltip } from 'bootstrap';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { Component } from './component.js';\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T> {\n\tlabel?: string,\n\tlabelTooltip?: string,\n\tinline?: boolean,\n\textraCssClasses?: Array<string>,\n\n\tdefaultValue?: T,\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>,\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T,\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void,\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean,\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean,\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement,\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T>;\n\treadonly modObject: ModObject;\n\n\tprotected enabled: boolean = true;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\n\t\tif (config.inline) this.rootElem.classList.add('input-inline');\n\t\tif (config.extraCssClasses) this.rootElem.classList.add(...config.extraCssClasses);\n\t\tif (config.label) this.rootElem.appendChild(this.buildLabel(config));\n\n\t\tconfig.changedEvent(this.modObject).on(eventID => {\n\t\t\tthis.setInputValue(config.getValue(this.modObject));\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate buildLabel(config: InputConfig<ModObject, T>): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<label\n\t\t\t\tclass=\"form-label\"\n\t\t\t\t${config.labelTooltip ? 'data-bs-toggle=\"tooltip\"' : ''}\n\t\t\t\t${config.labelTooltip ? `data-bs-title=\"${config.labelTooltip}\"` : ''}\n\t\t\t\t${config.labelTooltip ? 'data-bs-html=\"true\"' : ''}\n\t\t\t>\n\t\t\t${config.label}\n\t\t\t</label>\n\t\t`\n\n\t\tlet label = fragment.children[0] as HTMLElement;\n\n\t\tif (config.labelTooltip)\n\t\t\tnew Tooltip(label);\n\t\t\n\t\treturn label;\n\t}\n\n\tupdate() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.enabled = true;\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem().removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.enabled = false;\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem().setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tif (this.inputConfig.defaultValue) {\n\t\t\tthis.setInputValue(this.inputConfig.defaultValue);\n\t\t} else {\n\t\t\tthis.setInputValue(this.inputConfig.getValue(this.modObject));\n\t\t}\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tstatic newGroupContainer(): HTMLElement {\n\t\tlet group = document.createElement('div');\n\t\tgroup.classList.add('picker-group');\n\t\treturn group;\n\t}\n}\n","import { RaidSimRequest, RaidSimResult } from '../../proto/api.js';\nimport { SimResult, SimResultFilter } from '../..//proto_utils/sim_result.js';\nimport { Component } from '../../components/component.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\n\nexport interface SimResultData {\n\teventID: EventID,\n\tresult: SimResult,\n\tfilter: SimResultFilter,\n};\n\nexport interface ResultComponentConfig {\n\tparent: HTMLElement,\n\trootCssClass?: string,\n\tcssScheme?: String | null,\n\tresultsEmitter: TypedEvent<SimResultData | null>,\n};\n\nexport abstract class ResultComponent extends Component {\n\tprivate lastSimResult: SimResultData | null;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tsuper(config.parent, config.rootCssClass || '');\n\t\tthis.lastSimResult = null;\n\n\t\tconfig.resultsEmitter.on((eventID, resultData) => {\n\t\t\tif (!resultData)\n\t\t\t\treturn;\n\n\t\t\tthis.lastSimResult = resultData;\n\t\t\tthis.onSimResult(resultData);\n\t\t});\n\t}\n\n\tgetLastSimResult(): SimResultData {\n\t\tif (this.lastSimResult) {\n\t\t\treturn this.lastSimResult;\n\t\t} else {\n\t\t\tthrow new Error('No last sim result!');\n\t\t}\n\t}\n\n\tabstract onSimResult(resultData: SimResultData): void;\n}\n","import { SimResult, SimResultFilter, UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\nimport { Input } from '../../components/input.js';\n\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nconst ALL_UNITS = -1;\n\ninterface FilterData {\n\tplayer: number,\n\ttarget: number,\n};\n\nexport class ResultsFilter extends ResultComponent {\n\tprivate readonly currentFilter: FilterData;\n\n\treadonly changeEmitter: TypedEvent<void>;\n\n\tprivate readonly playerFilter: PlayerFilter;\n\tprivate readonly targetFilter: TargetFilter;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'results-filter-root';\n\t\tsuper(config);\n\t\tthis.currentFilter = {\n\t\t\tplayer: ALL_UNITS,\n\t\t\ttarget: ALL_UNITS,\n\t\t};\n\t\tthis.changeEmitter = new TypedEvent<void>();\n\n\t\tthis.playerFilter = new PlayerFilter(this.rootElem, this.currentFilter);\n\t\tthis.playerFilter.changeEmitter.on(eventID => this.changeEmitter.emit(eventID));\n\n\t\tthis.targetFilter = new TargetFilter(this.rootElem, this.currentFilter);\n\t\tthis.targetFilter.changeEmitter.on(eventID => this.changeEmitter.emit(eventID));\n\t}\n\n\tgetFilter(): SimResultFilter {\n\t\treturn {\n\t\t\tplayer: this.currentFilter.player == ALL_UNITS ? null : this.currentFilter.player,\n\t\t\ttarget: this.currentFilter.target == ALL_UNITS ? null : this.currentFilter.target,\n\t\t};\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.playerFilter.setOptions(resultData.eventID, resultData.result);\n\t\tthis.targetFilter.setOptions(resultData.eventID, resultData.result);\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: number | null) {\n\t\tthis.currentFilter.player = (newPlayer === null) ? ALL_UNITS : newPlayer;\n\t\tthis.playerFilter.changeEmitter.emit(eventID);\n\t}\n\n\tsetTarget(eventID: EventID, newTarget: number | null) {\n\t\tthis.currentFilter.target = (newTarget === null) ? ALL_UNITS : newTarget;\n\t\tthis.targetFilter.changeEmitter.emit(eventID);\n\t}\n}\n\ninterface UnitFilterOption {\n\ticonUrl: string,\n\ttext: string,\n\tcolor: string,\n\tvalue: number,\n};\n\n// Dropdown menu for filtering by player.\nabstract class UnitGroupFilter extends Input<FilterData, number> {\n\tprivate readonly filterData: FilterData;\n\treadonly changeEmitter: TypedEvent<void>;\n\n\tprivate allUnitsOption: UnitFilterOption;\n\tprivate currentOptions: Array<UnitFilterOption>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, filterData: FilterData, allUnitsLabel: string) {\n\t\tconst changeEmitter = new TypedEvent<void>();\n\t\tsuper(parent, 'unit-filter-root', filterData, {\n\t\t\textraCssClasses: [\n\t\t\t\t'dropdown-root',\n\t\t\t],\n\t\t\tchangedEvent: (filterData: FilterData) => changeEmitter,\n\t\t\tgetValue: (filterData: FilterData) => this.getFilterDataValue(filterData),\n\t\t\tsetValue: (eventID: EventID, filterData: FilterData, newValue: number) => this.setFilterDataValue(filterData, newValue),\n\t\t});\n\t\tthis.filterData = filterData;\n\t\tthis.changeEmitter = changeEmitter;\n\n\t\tthis.allUnitsOption = {\n\t\t\ticonUrl: '',\n\t\t\ttext: allUnitsLabel,\n\t\t\tcolor: 'black',\n\t\t\tvalue: ALL_UNITS,\n\t\t};\n\t\tthis.currentOptions = [this.allUnitsOption];\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"dropdown-button unit-filter-button\"></div>\n\t\t\t<div class=\"dropdown-panel unit-filter-dropdown\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.getElementsByClassName('unit-filter-button')[0] as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.getElementsByClassName('unit-filter-dropdown')[0] as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t});\n\n\t\tthis.init();\n\t}\n\n\tabstract getFilterDataValue(filterData: FilterData): number;\n\tabstract setFilterDataValue(filterData: FilterData, newValue: number): void;\n\tabstract getAllUnits(simResult: SimResult): Array<UnitMetrics>;\n\n\tsetOptions(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentOptions = [this.allUnitsOption].concat(this.getAllUnits(simResult).map(unit => {\n\t\t\treturn {\n\t\t\t\ticonUrl: unit.iconUrl || '',\n\t\t\t\ttext: unit.label,\n\t\t\t\tcolor: unit.classColor || 'black',\n\t\t\t\tvalue: unit.unitIndex,\n\t\t\t};\n\t\t}));\n\n\t\tconst hasSameOption = this.currentOptions.find(option => option.value == this.getInputValue()) != null;\n\t\tif (!hasSameOption) {\n\t\t\tthis.setFilterDataValue(this.filterData, this.allUnitsOption.value);\n\t\t\tthis.changeEmitter.emit(eventID);\n\t\t}\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\t}\n\n\tprivate makeOption(data: UnitFilterOption): HTMLElement {\n\t\tconst option = this.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.setFilterDataValue(this.filterData, data.value);\n\t\t\tthis.changeEmitter.emit(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tprivate makeOptionElem(data: UnitFilterOption): HTMLElement {\n\t\tconst optionContainer = document.createElement('div');\n\t\toptionContainer.classList.add('dropdown-option-container');\n\n\t\tconst option = document.createElement('div');\n\t\toption.classList.add('dropdown-option', 'unit-filter-option');\n\t\toptionContainer.appendChild(option);\n\n\t\tif (data.color) {\n\t\t\toption.style.backgroundColor = data.color;\n\t\t}\n\n\t\tif (data.iconUrl) {\n\t\t\tconst icon = document.createElement('img');\n\t\t\ticon.src = data.iconUrl;\n\t\t\ticon.classList.add('unit-filter-icon');\n\t\t\toption.appendChild(icon);\n\t\t}\n\n\t\tif (data.text) {\n\t\t\tconst label = document.createElement('span');\n\t\t\tlabel.textContent = data.text;\n\t\t\tlabel.classList.add('unit-filter-label');\n\t\t\toption.appendChild(label);\n\t\t}\n\n\t\treturn optionContainer;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): number {\n\t\treturn this.getFilterDataValue(this.filterData);\n\t}\n\n\tsetInputValue(newValue: number) {\n\t\tthis.setFilterDataValue(this.filterData, newValue);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.value == newValue);\n\t\tif (!optionData) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.buttonElem.innerHTML = '';\n\t\tthis.buttonElem.appendChild(this.makeOptionElem(optionData));\n\t}\n}\n\nclass PlayerFilter extends UnitGroupFilter {\n\tconstructor(parent: HTMLElement, filterData: FilterData) {\n\t\tsuper(parent, filterData, 'All Players');\n\t\tthis.rootElem.classList.add('player-filter-root');\n\t}\n\n\tgetFilterDataValue(filterData: FilterData): number {\n\t\treturn filterData.player;\n\t}\n\tsetFilterDataValue(filterData: FilterData, newValue: number): void {\n\t\tfilterData.player = newValue;\n\t}\n\tgetAllUnits(simResult: SimResult): Array<UnitMetrics> {\n\t\treturn simResult.getPlayers();\n\t}\n}\n\nclass TargetFilter extends UnitGroupFilter {\n\tconstructor(parent: HTMLElement, filterData: FilterData) {\n\t\tsuper(parent, filterData, 'All Targets');\n\t\tthis.rootElem.classList.add('target-filter-root');\n\t}\n\n\tgetFilterDataValue(filterData: FilterData): number {\n\t\treturn filterData.target;\n\t}\n\tsetFilterDataValue(filterData: FilterData, newValue: number): void {\n\t\tfilterData.target = newValue;\n\t}\n\tgetAllUnits(simResult: SimResult): Array<UnitMetrics> {\n\t\treturn simResult.getTargets();\n\t}\n}\n","import { ActionMetrics, UnitMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ActionId } from '../../proto_utils/action_id.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\n\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport enum ColumnSortType {\n\tNone,\n\tAscending,\n\tDescending,\n}\n\nexport interface MetricsColumnConfig<T> {\n\tname: string,\n\ttooltip?: string,\n\theaderCellClass?: string,\n\tcolumnClass?: string,\n\tsort?: ColumnSortType,\n\n\tgetValue?: (metric: T) => number,\n\n\t// Either getDisplayString or fillCell must be specified.\n\tgetDisplayString?: (metric: T) => string,\n\tfillCell?: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => void,\n};\n\nexport abstract class MetricsTable<T> extends ResultComponent {\n\tprivate readonly columnConfigs: Array<MetricsColumnConfig<T>>;\n\n\tprotected readonly tableElem: HTMLElement;\n\tprotected readonly bodyElem: HTMLElement;\n\n\treadonly onUpdate = new TypedEvent<void>('MetricsTableUpdate');\n\n\tconstructor(config: ResultComponentConfig, columnConfigs: Array<MetricsColumnConfig<T>>) {\n\t\tsuper(config);\n\t\tthis.columnConfigs = columnConfigs;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t<table class=\"metrics-table tablesorter\">\n\t\t\t<thead class=\"metrics-table-header\">\n\t\t\t\t<tr class=\"metrics-table-header-row\"></tr>\n\t\t\t</thead>\n\t\t\t<tbody class=\"metrics-table-body\">\n\t\t\t</tbody>\n\t\t</table>\n\t\t`;\n\n\t\tthis.tableElem = this.rootElem.getElementsByClassName('metrics-table')[0] as HTMLTableSectionElement;\n\t\tthis.bodyElem = this.rootElem.getElementsByClassName('metrics-table-body')[0] as HTMLElement;\n\n\t\tconst headerRowElem = this.rootElem.getElementsByClassName('metrics-table-header-row')[0] as HTMLElement;\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst headerCell = document.createElement('th');\n\t\t\theaderCell.classList.add('metrics-table-header-cell');\n\t\t\tif (columnConfig.headerCellClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.headerCellClass);\n\t\t\t}\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\theaderCell.innerHTML = `<span>${columnConfig.name}</span>`;\n\t\t\tif (columnConfig.tooltip) {\n\t\t\t\ttippy(headerCell, {\n\t\t\t\t\t'content': columnConfig.tooltip,\n\t\t\t\t\t'allowHTML': true,\n\t\t\t\t});\n\t\t\t}\n\t\t\theaderRowElem.appendChild(headerCell);\n\t\t});\n\n\t\tconst sortList = this.columnConfigs\n\t\t\t.map((config, i) => [i, config.sort == ColumnSortType.Ascending ? 0 : 1])\n\t\t\t.filter(sortData => this.columnConfigs[sortData[0]].sort);\n\t\t$(this.tableElem).tablesorter({\n\t\t\tsortList: sortList,\n\t\t\tcssChildRow: 'child-metric',\n\t\t});\n\t}\n\n\tprotected sortMetrics(metrics: Array<T>) {\n\t\tthis.columnConfigs.filter(config => config.sort).forEach(config => {\n\t\t\tif (!config.getValue) {\n\t\t\t\tthrow new Error('Can\\' apply group sorting without getValue');\n\t\t\t}\n\t\t\tif (config.sort == ColumnSortType.Ascending) {\n\t\t\t\tmetrics.sort((a, b) => config.getValue!(a) - config.getValue!(b));\n\t\t\t} else {\n\t\t\t\tmetrics.sort((a, b) => config.getValue!(b) - config.getValue!(a));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addRow(metric: T): HTMLElement {\n\t\tconst rowElem = document.createElement('tr');\n\t\tthis.bodyElem.appendChild(rowElem);\n\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst cellElem = document.createElement('td');\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\tcellElem.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\tif (columnConfig.fillCell) {\n\t\t\t\tcolumnConfig.fillCell(metric, cellElem, rowElem);\n\t\t\t} else if (columnConfig.getDisplayString) {\n\t\t\t\tcellElem.textContent = columnConfig.getDisplayString(metric);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Metrics column config does not provide content function: ' + columnConfig.name);\n\t\t\t}\n\t\t\trowElem.appendChild(cellElem);\n\t\t});\n\n\t\tthis.customizeRowElem(metric, rowElem);\n\t\treturn rowElem;\n\t}\n\n\tprivate addGroup(metrics: Array<T>) {\n\t\tif (metrics.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (metrics.length == 1 && this.shouldCollapse(metrics[0])) {\n\t\t\tthis.addRow(metrics[0]);\n\t\t\treturn;\n\t\t}\n\n\t\t// Manually sort because tablesorter doesn't let us apply sorting to child rows.\n\t\tthis.sortMetrics(metrics);\n\n\t\tconst mergedMetrics = this.mergeMetrics(metrics);\n\t\tconst parentRow = this.addRow(mergedMetrics);\n\t\tconst childRows = metrics.map(metric => this.addRow(metric));\n\t\tchildRows.forEach(childRow => childRow.classList.add('child-metric'));\n\n\t\tlet expand = true;\n\t\tparentRow.classList.add('parent-metric', 'expand');\n\t\tparentRow.addEventListener('click', event => {\n\t\t\texpand = !expand;\n\t\t\tif (expand) {\n\t\t\t\tchildRows.forEach(row => row.classList.remove('hide'));\n\t\t\t\tparentRow.classList.add('expand');\n\t\t\t} else {\n\t\t\t\tchildRows.forEach(row => row.classList.add('hide'));\n\t\t\t\tparentRow.classList.remove('expand');\n\t\t\t}\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.bodyElem.textContent = '';\n\t\tconst groupedMetrics = this.getGroupedMetrics(resultData).filter(group => group.length > 0);\n\t\tif (groupedMetrics.length == 0) {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t\tthis.onUpdate.emit(resultData.eventID);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t}\n\n\t\tgroupedMetrics.forEach(group => this.addGroup(group));\n\t\t$(this.tableElem).trigger('update');\n\t\tthis.onUpdate.emit(resultData.eventID);\n\t}\n\n\t// Whether a single-element group should have its parent row removed.\n\t// Override this to add custom behavior.\n\tprotected shouldCollapse(metric: T): boolean {\n\t\treturn true;\n\t}\n\n\t// Override this to customize rowElem after it has been populated.\n\tprotected customizeRowElem(metric: T, rowElem: HTMLElement) { }\n\n\t// Override this to provide custom merge behavior.\n\tprotected mergeMetrics(metrics: Array<T>): T {\n\t\treturn metrics[0];\n\t}\n\n\t// Returns grouped metrics to display.\n\tabstract getGroupedMetrics(resultData: SimResultData): Array<Array<T>>;\n\n\tstatic nameCellConfig<T>(getData: (metric: T) => { name: string, actionId: ActionId }): MetricsColumnConfig<T> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tfillCell: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tconst data = getData(metric);\n\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t<a class=\"metrics-action-icon\"></a>\n\t\t\t\t<span class=\"metrics-action-name\">${data.name}</span>\n\t\t\t\t<span class=\"expand-toggle fa fa-caret-down\"></span>\n\t\t\t\t<span class=\"expand-toggle fa fa-caret-right\"></span>\n\t\t\t\t`;\n\n\t\t\t\tconst iconElem = cellElem.getElementsByClassName('metrics-action-icon')[0] as HTMLAnchorElement;\n\t\t\t\tdata.actionId.setBackgroundAndHref(iconElem);\n\t\t\t},\n\t\t};\n\t}\n\n\tstatic playerNameCellConfig(): MetricsColumnConfig<UnitMetrics> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t<img class=\"metrics-action-icon\" src=\"${player.iconUrl}\"></img>\n\t\t\t\t<span class=\"metrics-action-name\" style=\"color:${player.classColor}\">${player.label}</span>\n\t\t\t\t`;\n\t\t\t},\n\t\t};\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class CastMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'cast-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\t//const actionMetrics = resultData.result.getActionMetrics(resultData.filter);\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\t\tconst petGroups = player.pets.map(pet => pet.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter)));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class DtpsMeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getMeleeActions().map(action => action.forTarget(resultData.filter))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class DtpsSpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getSpellActions().map(action => action.forTarget(resultData.filter))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class HealingMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'healing-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Cast Time',\n\t\t\t\ttooltip: 'Average cast time in seconds',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastTimeMs,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => (metric.avgCastTimeMs / 1000).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPM',\n\t\t\t\ttooltip: 'Healing / Mana',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hpm,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hpm.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPET',\n\t\t\t\ttooltip: 'Healing / Avg Cast Time',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.healingThroughput,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.healingThroughput.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPS',\n\t\t\t\ttooltip: 'Healing / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Healing / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastHealing,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastHealing.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.hps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\t//const actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actions = player.getHealingActions();\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class MeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Glance %',\n\t\t\t\ttooltip: 'Glances / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.glancePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.glancePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tif (player.inFrontOfTarget) {\n\t\t\tthis.rootElem.classList.remove('hide-in-front-of-target');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide-in-front-of-target');\n\t\t}\n\n\t\tconst actions = player.getMeleeActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets => ActionMetrics.joinById(pets.map(pet => pet.getMeleeActions().map(action => action.forTarget(resultData.filter))).flat(), true));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class SpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / Hits',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.dps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets => ActionMetrics.joinById(pets.map(pet => pet.getSpellActions().map(action => action.forTarget(resultData.filter))).flat(), true));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ResourceMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ResourceType } from '../../proto/api.js';\nimport { resourceNames } from '../../proto_utils/names.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class ResourceMetricsTable extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'resource-metrics-root';\n\t\tsuper(config);\n\n\t\torderedResourceTypes.forEach(resourceType => {\n\t\t\tconst containerElem = document.createElement('div');\n\t\t\tcontainerElem.classList.add('resource-metrics-table-container', 'hide');\n\t\t\tcontainerElem.innerHTML = `<span class=\"resource-metrics-table-title\">${resourceNames[resourceType]}</span>`;\n\t\t\tthis.rootElem.appendChild(containerElem);\n\n\t\t\tconst childConfig = config;\n\t\t\tchildConfig.parent = containerElem;\n\t\t\tconst table = new TypedResourceMetricsTable(childConfig, resourceType);\n\t\t\ttable.onUpdate.on(() => {\n\t\t\t\tif (table.rootElem.classList.contains('hide')) {\n\t\t\t\t\tcontainerElem.classList.add('hide');\n\t\t\t\t} else {\n\t\t\t\t\tcontainerElem.classList.remove('hide');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t}\n}\n\nexport class TypedResourceMetricsTable extends MetricsTable<ResourceMetrics> {\n\treadonly resourceType: ResourceType;\n\n\tconstructor(config: ResultComponentConfig, resourceType: ResourceType) {\n\t\tconfig.rootCssClass = 'resource-metrics-table-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ResourceMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.events,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.events.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain',\n\t\t\t\ttooltip: 'Gain',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain / s',\n\t\t\t\ttooltip: 'Gain / Second',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gainPerSecond,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gainPerSecond.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Gain',\n\t\t\t\ttooltip: 'Gain / Event',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.avgGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.avgGain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Wasted Gain',\n\t\t\t\ttooltip: 'Gain that was wasted because of resource cap.',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.wastedGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.wastedGain.toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resourceType = resourceType;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ResourceMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst resources = player.getResourceMetrics(this.resourceType);\n\t\tconst resourceGroups = ResourceMetrics.groupById(resources);\n\t\treturn resourceGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ResourceMetrics>): ResourceMetrics {\n\t\treturn ResourceMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","export const actionColors: Array<string> = [\n\t'#dd9933',\n\t'#67074e',\n\t'#5a175d',\n\t'#074e67',\n\t'#05878a',\n\t'#c9c1e7',\n\t'#bdd5ef',\n\t'#c7e3d0',\n\t'#e7e6ce',\n\t'#f2d8cc',\n\t'#e9ccce',\n];\n","import { Component } from '../../components/component.js';\nimport { SimResult, SimResultFilter, ActionMetrics } from '../../proto_utils/sim_result.js';\nimport { sum } from '../../utils.js';\n\nimport { actionColors } from './color_settings.js';\n\ndeclare var Chart: any;\n\nexport class SourceChart extends Component {\n\tconstructor(parentElem: HTMLElement, allActionMetrics: Array<ActionMetrics>) {\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tsuper(parentElem, 'source-chart-root', chartCanvas);\n\n\t\tchartCanvas.style.height = '400px';\n\t\tchartCanvas.style.width = '600px';\n\t\tchartCanvas.height = 400;\n\t\tchartCanvas.width = 600;\n\n\t\tconst actionMetrics = allActionMetrics\n\t\t\t.filter(actionMetric => actionMetric.damage > 0)\n\t\t\t.sort((a, b) => b.damage - a.damage);\n\t\tconst names = actionMetrics.map(am => am.name);\n\t\tconst totalDmg = sum(actionMetrics.map(actionMetric => actionMetric.damage));\n\t\tconst vals = actionMetrics.map(actionMetric => actionMetric.damage / totalDmg);\n\t\tconst bgColors = actionColors.slice(0, actionMetrics.length);\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'pie',\n\t\t\tdata: {\n\t\t\t\tlabels: names,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: bgColors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\tposition: 'right',\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import { UnitMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { maxIndex } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nimport { ResultsFilter } from './results_filter.js';\nimport { SourceChart } from './source_chart.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class PlayerDamageMetricsTable extends MetricsTable<UnitMetrics> {\n\tprivate readonly resultsFilter: ResultsFilter;\n\n\t// Cached values from most recent result.\n\tprivate raidDps: number;\n\tprivate maxDps: number;\n\n\tconstructor(config: ResultComponentConfig, resultsFilter: ResultsFilter) {\n\t\tconfig.rootCssClass = 'player-damage-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.playerNameCellConfig(),\n\t\t\t{\n\t\t\t\tname: 'Amount',\n\t\t\t\ttooltip: 'Player Damage / Raid Damage',\n\t\t\t\theaderCellClass: 'amount-header-cell',\n\t\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\t\tcellElem.classList.add('amount-cell');\n\n\t\t\t\t\tlet chart: HTMLElement | null = null;\n\t\t\t\t\tconst makeChart = () => {\n\t\t\t\t\t\tconst chartContainer = document.createElement('div');\n\t\t\t\t\t\trowElem.appendChild(chartContainer);\n\t\t\t\t\t\tconst sourceChart = new SourceChart(chartContainer, player.actions);\n\t\t\t\t\t\treturn chartContainer;\n\t\t\t\t\t};\n\n\t\t\t\t\ttippy(rowElem, {\n\t\t\t\t\t\tcontent: 'Loading...',\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\tonShow(instance: any) {\n\t\t\t\t\t\t\tif (!chart) {\n\t\t\t\t\t\t\t\tchart = makeChart();\n\t\t\t\t\t\t\t\tinstance.setContent(chart);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t\t\t<div class=\"player-damage-percent\">\n\t\t\t\t\t\t\t<span>${(player.dps.avg / this.raidDps * 100).toFixed(2)}%</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-bar-container\">\n\t\t\t\t\t\t\t<div class=\"player-damage-bar\" style=\"background-color:${player.classColor}; width:${player.dps.avg / this.maxDps * 100}%\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-total\">\n\t\t\t\t\t\t\t<span>${(player.totalDamage / 1000).toFixed(1)}k</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: UnitMetrics) => metric.dps.avg,\n\t\t\t\tgetDisplayString: (metric: UnitMetrics) => metric.dps.avg.toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resultsFilter = resultsFilter;\n\t\tthis.raidDps = 0;\n\t\tthis.maxDps = 0;\n\t}\n\n\tcustomizeRowElem(player: UnitMetrics, rowElem: HTMLElement) {\n\t\trowElem.classList.add('player-damage-row');\n\t\trowElem.addEventListener('click', event => {\n\t\t\tthis.resultsFilter.setPlayer(this.getLastSimResult().eventID, player.unitIndex);\n\t\t});\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<UnitMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\n\t\tthis.raidDps = resultData.result.raidMetrics.dps.avg;\n\t\tconst maxDpsIndex = maxIndex(players.map(player => player.dps.avg))!;\n\t\tthis.maxDps = players[maxDpsIndex].dps.avg;\n\n\t\treturn players.map(player => [player]);\n\t}\n}\n","import { ActionId } from '../../proto_utils/action_id';\nimport { AuraMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class AuraMetricsTable extends MetricsTable<AuraMetrics> {\n\tprivate readonly useDebuffs: boolean;\n\n\tconstructor(config: ResultComponentConfig, useDebuffs: boolean) {\n\t\tif (useDebuffs) {\n\t\t\tconfig.rootCssClass = 'debuff-metrics-root';\n\t\t} else {\n\t\t\tconfig.rootCssClass = 'buff-metrics-root';\n\t\t}\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: AuraMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Procs',\n\t\t\t\ttooltip: 'Procs',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.averageProcs,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.averageProcs.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'PPM',\n\t\t\t\ttooltip: 'Procs Per Minute',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.ppm,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.ppm.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Uptime',\n\t\t\t\ttooltip: 'Uptime / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.uptimePercent,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.uptimePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t\tthis.useDebuffs = useDebuffs;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<AuraMetrics>> {\n\t\tif (this.useDebuffs) {\n\t\t\treturn AuraMetrics.groupById(resultData.result.getDebuffMetrics(resultData.filter));\n\t\t} else {\n\t\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\t\tif (players.length != 1) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst player = players[0];\n\n\t\t\tconst auras = player.auras;\n\t\t\tconst actionGroups = AuraMetrics.groupById(auras);\n\t\t\tconst petGroups = player.pets.map(pet => pet.auras);\n\n\t\t\treturn actionGroups.concat(petGroups);\n\t\t}\n\t}\n\n\tmergeMetrics(metrics: Array<AuraMetrics>): AuraMetrics {\n\t\treturn AuraMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: AuraMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var Chart: any;\n\nexport class DpsHistogram extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dps-histogram-root';\n\t\tsuper(config);\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tconst chartBounds = this.rootElem.getBoundingClientRect();\n\n\t\tthis.rootElem.textContent = '';\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tchartCanvas.height = chartBounds.height;\n\t\tchartCanvas.width = chartBounds.width;\n\n\t\tconst damageMetrics = resultData.result.getDamageMetrics(resultData.filter);\n\n\t\tconst min = damageMetrics.avg - damageMetrics.stdev;\n\t\tconst max = damageMetrics.avg + damageMetrics.stdev;\n\t\tconst vals: Array<number> = [];\n\t\tconst colors: Array<string> = [];\n\n\t\tconst labels = Object.keys(damageMetrics.hist);\n\t\tlabels.forEach((k, i) => {\n\t\t\tvals.push(damageMetrics.hist[Number(k)]);\n\t\t\tconst val = parseInt(k);\n\t\t\tif (val > min && val < max) {\n\t\t\t\tcolors.push('#1E87F0');\n\t\t\t} else {\n\t\t\t\tcolors.push('#FF6961');\n\t\t\t}\n\t\t});\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tthis.rootElem.appendChild(chartCanvas);\n\t\t\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'bar',\n\t\t\tdata: {\n\t\t\t\tlabels: labels,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: colors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\ttext: 'DPS Histogram',\n\t\t\t\t\t},\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\tlabels: {},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\ty: {\n\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ResourceType } from '../../proto/api.js';\nimport { OtherAction } from '../../proto/common.js';\nimport { UnitMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ActionId, resourceTypeToIcon } from '../../proto_utils/action_id.js';\nimport { resourceColors, resourceNames } from '../../proto_utils/names.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\nimport { bucket, distinct, getEnumValues, maxIndex, stringComparator, sum } from '../../utils.js';\n\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tResourceChangedLogGroup,\n\tDpsLog,\n\tSimLog,\n\tThreatLogGroup,\n} from '../../proto_utils/logs_parser.js';\n\nimport { actionColors } from './color_settings.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var $: any;\ndeclare var tippy: any;\ndeclare var ApexCharts: any;\n\ntype TooltipHandler = (dataPointIndex: number) => string;\n\nconst dpsColor = '#ed5653';\nconst manaColor = '#2E93fA';\nconst threatColor = '#b56d07';\n\nexport class Timeline extends ResultComponent {\n\tprivate readonly dpsResourcesPlotElem: HTMLElement;\n\tprivate dpsResourcesPlot: any;\n\n\tprivate readonly rotationPlotElem: HTMLElement;\n\tprivate readonly rotationLabels: HTMLElement;\n\tprivate readonly rotationTimeline: HTMLElement;\n\tprivate readonly rotationHiddenIdsContainer: HTMLElement;\n\tprivate readonly chartPicker: HTMLSelectElement;\n\n\tprivate resultData: SimResultData | null;\n\tprivate rendered: boolean;\n\n\tprivate hiddenIds: Array<ActionId>;\n\tprivate hiddenIdsChangeEmitter;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'timeline-root';\n\t\tsuper(config);\n\t\tthis.resultData = null;\n\t\tthis.rendered = false;\n\t\tthis.hiddenIds = [];\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t<div class=\"timeline-disclaimer\">\n\t\t\t<span class=\"timeline-warning fa fa-exclamation-triangle\"></span>\n\t\t\t<span class=\"timeline-warning-description\">Timeline data visualizes only 1 sim iteration.</span>\n\t\t\t<div class=\"timeline-run-again-button btn btn-primary\">Sim 1 Iteration</div>\n\t\t\t<select class=\"timeline-chart-picker\">\n\t\t\t\t<option class=\"rotation-option\" value=\"rotation\">Rotation</option>\n\t\t\t\t<option class=\"dps-option\" value=\"dps\">DPS</option>\n\t\t\t\t<option class=\"threat-option\" value=\"threat\">Threat</option>\n\t\t\t</select>\n\t\t</div>\n\t\t<div class=\"timeline-plots-container\">\n\t\t\t<div class=\"timeline-plot dps-resources-plot hide\"></div>\n\t\t\t<div class=\"timeline-plot rotation-plot\">\n\t\t\t\t<div class=\"rotation-container\">\n\t\t\t\t\t<div class=\"rotation-labels\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"rotation-timeline\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"rotation-hidden-ids\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t`;\n\n\t\tconst runAgainButton = this.rootElem.getElementsByClassName('timeline-run-again-button')[0] as HTMLElement;\n\t\trunAgainButton.addEventListener('click', event => {\n\t\t\t(window.opener || window.parent)!.postMessage('runOnce', '*');\n\t\t});\n\n\t\tthis.chartPicker = this.rootElem.getElementsByClassName('timeline-chart-picker')[0] as HTMLSelectElement;\n\t\tthis.chartPicker.addEventListener('change', event => {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.add('hide');\n\t\t\t\tthis.rotationPlotElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.remove('hide');\n\t\t\t\tthis.rotationPlotElem.classList.add('hide');\n\t\t\t}\n\t\t\tthis.updatePlot();\n\t\t});\n\n\t\tthis.dpsResourcesPlotElem = this.rootElem.getElementsByClassName('dps-resources-plot')[0] as HTMLElement;\n\t\tthis.dpsResourcesPlot = new ApexCharts(this.dpsResourcesPlotElem, {\n\t\t\tchart: {\n\t\t\t\ttype: 'line',\n\t\t\t\tforeColor: 'white',\n\t\t\t\tid: 'dpsResources',\n\t\t\t\tanimations: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t},\n\t\t\t\theight: '100%',\n\t\t\t},\n\t\t\tseries: [], // Set dynamically\n\t\t\txaxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t\ttype: 'datetime',\n\t\t\t},\n\t\t\tnoData: {\n\t\t\t\ttext: 'Waiting for data...',\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\twidth: 2,\n\t\t\t\tcurve: 'straight',\n\t\t\t},\n\t\t});\n\n\t\tthis.rotationPlotElem = this.rootElem.getElementsByClassName('rotation-plot')[0] as HTMLElement;\n\t\tthis.rotationLabels = this.rootElem.getElementsByClassName('rotation-labels')[0] as HTMLElement;\n\t\tthis.rotationTimeline = this.rootElem.getElementsByClassName('rotation-timeline')[0] as HTMLElement;\n\t\tthis.rotationHiddenIdsContainer = this.rootElem.getElementsByClassName('rotation-hidden-ids')[0] as HTMLElement;\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.resultData = resultData;\n\n\t\tif (this.rendered) {\n\t\t\tthis.updatePlot();\n\t\t}\n\t}\n\n\tprivate updatePlot() {\n\t\tif (this.resultData == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst duration = this.resultData!.result.result.firstIterationDuration || 1;\n\t\tlet options: any = {\n\t\t\tseries: [],\n\t\t\tcolors: [],\n\t\t\txaxis: {\n\t\t\t\tmin: this.toDatetime(0).getTime(),\n\t\t\t\tmax: this.toDatetime(duration).getTime(),\n\t\t\t\ttype: 'datetime',\n\t\t\t\ttickAmount: 10,\n\t\t\t\tdecimalsInFloat: 1,\n\t\t\t\tlabels: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\tformatter: (defaultValue: string, timestamp: number) => {\n\t\t\t\t\t\treturn (timestamp / 1000).toFixed(1);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tyaxis: [],\n\t\t\tchart: {\n\t\t\t\tevents: {\n\t\t\t\t\tbeforeResetZoom: () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\tmin: this.toDatetime(0),\n\t\t\t\t\t\t\t\tmax: this.toDatetime(duration),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tlet tooltipHandlers: Array<TooltipHandler | null> = [];\n\t\toptions.tooltip = {\n\t\t\tenabled: true,\n\t\t\tcustom: (data: { series: any, seriesIndex: number, dataPointIndex: number, w: any }) => {\n\t\t\t\tif (tooltipHandlers[data.seriesIndex]) {\n\t\t\t\t\treturn tooltipHandlers[data.seriesIndex]!(data.dataPointIndex);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('No tooltip handler for series ' + data.seriesIndex);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tconst players = this.resultData!.result.getPlayers(this.resultData!.filter);\n\t\tif (players.length == 1) {\n\t\t\tconst player = players[0];\n\n\t\t\tconst rotationOption = this.rootElem.getElementsByClassName('rotation-option')[0] as HTMLElement;\n\t\t\trotationOption.classList.remove('hide');\n\t\t\tconst threatOption = this.rootElem.getElementsByClassName('threat-option')[0] as HTMLElement;\n\t\t\tthreatOption.classList.add('hide');\n\n\t\t\ttry {\n\t\t\t\tthis.updateRotationChart(player, duration);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Failed to update rotation chart: \", e);\n\t\t\t}\n\n\n\t\t\tconst dpsData = this.addDpsSeries(player, options, '');\n\t\t\tthis.addDpsYAxis(dpsData.maxDps, options);\n\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\ttooltipHandlers.push(this.addManaSeries(player, options));\n\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, ''));\n\t\t\ttooltipHandlers = tooltipHandlers.filter(handler => handler != null);\n\n\t\t\tthis.addMajorCooldownAnnotations(player, options);\n\t\t} else {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.chartPicker.value = 'dps';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rotationOption = this.rootElem.getElementsByClassName('rotation-option')[0] as HTMLElement;\n\t\t\trotationOption.classList.add('hide');\n\t\t\tconst threatOption = this.rootElem.getElementsByClassName('threat-option')[0] as HTMLElement;\n\t\t\tthreatOption.classList.remove('hide');\n\n\t\t\tthis.clearRotationChart();\n\n\t\t\tif (this.chartPicker.value == 'dps') {\n\t\t\t\tlet maxDps = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\tconst dpsData = this.addDpsSeries(player, options, player.classColor);\n\t\t\t\t\tmaxDps = Math.max(maxDps, dpsData.maxDps);\n\t\t\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\t\t});\n\t\t\t\tthis.addDpsYAxis(maxDps, options);\n\t\t\t} else { // threat\n\t\t\t\tlet maxThreat = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, player.classColor));\n\t\t\t\t\tmaxThreat = Math.max(maxThreat, player.maxThreat);\n\t\t\t\t});\n\t\t\t\tthis.addThreatYAxis(maxThreat, options);\n\t\t\t}\n\t\t}\n\n\t\tthis.dpsResourcesPlot.updateOptions(options);\n\t}\n\n\tprivate addDpsYAxis(maxDps: number, options: any) {\n\t\tconst dpsAxisMax = Math.ceil(maxDps / 100) * 100;\n\t\toptions.yaxis.push({\n\t\t\tcolor: dpsColor,\n\t\t\tseriesName: 'DPS',\n\t\t\tmin: 0,\n\t\t\tmax: dpsAxisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'DPS',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: dpsColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [dpsColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate addThreatYAxis(maxThreat: number, options: any) {\n\t\tconst axisMax = Math.ceil(maxThreat / 10000) * 10000;\n\t\toptions.yaxis.push({\n\t\t\tcolor: threatColor,\n\t\t\tseriesName: 'Threat',\n\t\t\tmin: 0,\n\t\t\tmax: axisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Threat',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: threatColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [threatColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addDpsSeries(unit: UnitMetrics, options: any, colorOverride: string): { maxDps: number, tooltipHandler: TooltipHandler } {\n\t\tconst dpsLogs = unit.dpsLogs;\n\n\t\toptions.colors.push(colorOverride || dpsColor);\n\t\toptions.series.push({\n\t\t\tname: 'DPS',\n\t\t\ttype: 'line',\n\t\t\tdata: dpsLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: this.toDatetime(log.timestamp),\n\t\t\t\t\ty: log.dps,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\n\t\treturn {\n\t\t\tmaxDps: dpsLogs[maxIndex(dpsLogs.map(l => l.dps))!].dps,\n\t\t\ttooltipHandler: (dataPointIndex: number) => {\n\t\t\t\tconst log = dpsLogs[dataPointIndex];\n\t\t\t\treturn this.dpsTooltip(log, true, unit, colorOverride);\n\t\t\t},\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addManaSeries(unit: UnitMetrics, options: any): TooltipHandler | null {\n\t\tconst manaLogs = unit.groupedResourceLogs[ResourceType.ResourceTypeMana];\n\t\tif (manaLogs.length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst maxMana = manaLogs[0].valueBefore;\n\n\t\toptions.colors.push(manaColor);\n\t\toptions.series.push({\n\t\t\tname: 'Mana',\n\t\t\ttype: 'line',\n\t\t\tdata: manaLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: this.toDatetime(log.timestamp),\n\t\t\t\t\ty: log.valueAfter,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\t\toptions.yaxis.push({\n\t\t\tseriesName: 'Mana',\n\t\t\topposite: true, // Appear on right side\n\t\t\tmin: 0,\n\t\t\tmax: maxMana,\n\t\t\ttickAmount: 10,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Mana',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: manaColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [manaColor],\n\t\t\t\t},\n\t\t\t\tformatter: (val: string) => {\n\t\t\t\t\tconst v = parseFloat(val);\n\t\t\t\t\treturn `${v.toFixed(0)} (${(v / maxMana * 100).toFixed(0)}%)`;\n\t\t\t\t},\n\t\t\t},\n\t\t} as any);\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = manaLogs[dataPointIndex];\n\t\t\treturn this.resourceTooltip(log, maxMana, true);\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addThreatSeries(unit: UnitMetrics, options: any, colorOverride: string): TooltipHandler | null {\n\t\toptions.colors.push(colorOverride || threatColor);\n\t\toptions.series.push({\n\t\t\tname: 'Threat',\n\t\t\ttype: 'line',\n\t\t\tdata: unit.threatLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: this.toDatetime(log.timestamp),\n\t\t\t\t\ty: log.threatAfter,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = unit.threatLogs[dataPointIndex];\n\t\t\treturn this.threatTooltip(log, true, unit, colorOverride);\n\t\t};\n\t}\n\n\tprivate addMajorCooldownAnnotations(unit: UnitMetrics, options: any) {\n\t\tconst mcdLogs = unit.majorCooldownLogs;\n\t\tconst mcdAuraLogs = unit.majorCooldownAuraUptimeLogs;\n\n\t\t// Figure out how much to vertically offset cooldown icons, for cooldowns\n\t\t// used very close to each other. This is so the icons don't overlap.\n\t\tconst MAX_ALLOWED_DIST = 10;\n\t\tconst cooldownIconOffsets = mcdLogs.map((mcdLog, mcdIdx) => mcdLogs.filter((cdLog, cdIdx) => (cdIdx < mcdIdx) && (cdLog.timestamp > mcdLog.timestamp - MAX_ALLOWED_DIST)).length);\n\n\t\tconst distinctMcdAuras = distinct(mcdAuraLogs, (a, b) => a.actionId!.equalsIgnoringTag(b.actionId!));\n\t\t// Sort by name so auras keep their same colors even if timings change.\n\t\tdistinctMcdAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\tconst mcdAuraColors = mcdAuraLogs.map(mcdAuraLog => actionColors[distinctMcdAuras.findIndex(dAura => dAura.actionId!.equalsIgnoringTag(mcdAuraLog.actionId!))]);\n\n\t\toptions.annotations = {\n\t\t\tposition: 'back',\n\t\t\txaxis: mcdAuraLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: this.toDatetime(log.gainedAt).getTime(),\n\t\t\t\t\tx2: this.toDatetime(log.fadedAt).getTime(),\n\t\t\t\t\tfillColor: mcdAuraColors[i],\n\t\t\t\t};\n\t\t\t}),\n\t\t\tpoints: mcdLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: this.toDatetime(log.timestamp).getTime(),\n\t\t\t\t\ty: 0,\n\t\t\t\t\timage: {\n\t\t\t\t\t\tpath: log.actionId!.iconUrl,\n\t\t\t\t\t\twidth: 20,\n\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\toffsetY: cooldownIconOffsets[i] * -25,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate clearRotationChart() {\n\t\tthis.rotationLabels.innerHTML = `\n\t\t\t<div class=\"rotation-label-header\"></div>\n\t\t`;\n\t\tthis.rotationTimeline.innerHTML = `\n\t\t\t<div class=\"rotation-timeline-header\">\n\t\t\t\t<canvas class=\"rotation-timeline-canvas\"></canvas>\n\t\t\t</div>\n\t\t`;\n\t\tthis.rotationHiddenIdsContainer.innerHTML = '';\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\t}\n\n\tprivate updateRotationChart(player: UnitMetrics, duration: number) {\n\t\tconst targets = this.resultData!.result.getTargets(this.resultData!.filter);\n\t\tif (targets.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst target = targets[0];\n\n\t\tthis.clearRotationChart();\n\n\t\ttry {\n\t\t\tthis.drawRotationTimeRuler(this.rotationTimeline.getElementsByClassName('rotation-timeline-canvas')[0] as HTMLCanvasElement, duration);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Failed to draw rotation: \", e);\n\t\t}\n\n\t\torderedResourceTypes.forEach(resourceType => this.addResourceRow(resourceType, player.groupedResourceLogs[resourceType], duration));\n\n\t\tconst buffsById = Object.values(bucket(player.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tbuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst debuffsById = Object.values(bucket(target.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tdebuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst buffsAndDebuffsById = buffsById.concat(debuffsById);\n\n\t\tconst playerCastsByAbility = this.getSortedCastsByAbility(player);\n\t\tplayerCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\n\t\t// Don't add a row for buffs that were already visualized in a cast row.\n\t\tconst buffsToShow = buffsById.filter(auraUptimeLogs => playerCastsByAbility.findIndex(casts => casts[0].actionId!.equalsIgnoringTag(auraUptimeLogs[0].actionId!)));\n\t\tif (buffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tbuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\n\t\tconst targetCastsByAbility = this.getSortedCastsByAbility(target);\n\t\tif (targetCastsByAbility.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\ttargetCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\t\t}\n\n\t\t// Add a row for all debuffs, even those which have already been visualized in a cast row.\n\t\tconst debuffsToShow = debuffsById;\n\t\tif (debuffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tdebuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\t}\n\n\tprivate getSortedCastsByAbility(player: UnitMetrics): Array<Array<CastLog>> {\n\t\tconst meleeActionIds = player.getMeleeActions().map(action => action.actionId);\n\t\tconst spellActionIds = player.getSpellActions().map(action => action.actionId);\n\t\tconst getActionCategory = (actionId: ActionId): number => {\n\t\t\tconst fixedCategory = idToCategoryMap[actionId.anyId()];\n\t\t\tif (fixedCategory != null) {\n\t\t\t\treturn fixedCategory;\n\t\t\t} else if (meleeActionIds.find(meleeActionId => meleeActionId.equals(actionId))) {\n\t\t\t\treturn MELEE_ACTION_CATEGORY;\n\t\t\t} else if (spellActionIds.find(spellActionId => spellActionId.equals(actionId))) {\n\t\t\t\treturn SPELL_ACTION_CATEGORY;\n\t\t\t} else {\n\t\t\t\treturn DEFAULT_ACTION_CATEGORY;\n\t\t\t}\n\t\t};\n\n\t\tconst castsByAbility = Object.values(bucket(player.castLogs, log => {\n\t\t\tif (idsToGroupForRotation.includes(log.actionId!.spellId)) {\n\t\t\t\treturn log.actionId!.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn log.actionId!.toString();\n\t\t\t}\n\t\t}));\n\n\t\tcastsByAbility.sort((a, b) => {\n\t\t\tconst categoryA = getActionCategory(a[0].actionId!);\n\t\t\tconst categoryB = getActionCategory(b[0].actionId!);\n\t\t\tif (categoryA != categoryB) {\n\t\t\t\treturn categoryA - categoryB;\n\t\t\t} else if (a[0].actionId!.anyId() == b[0].actionId!.anyId()) {\n\t\t\t\treturn a[0].actionId!.tag - b[0].actionId!.tag;\n\t\t\t} else {\n\t\t\t\treturn stringComparator(a[0].actionId!.name, b[0].actionId!.name);\n\t\t\t}\n\t\t});\n\n\t\treturn castsByAbility;\n\t}\n\n\tprivate makeLabelElem(actionId: ActionId, isHiddenLabel: boolean): HTMLElement {\n\t\tconst labelElem = document.createElement('div');\n\t\tlabelElem.classList.add('rotation-label', 'rotation-row');\n\t\tif (isHiddenLabel) {\n\t\t\tlabelElem.classList.add('rotation-label-hidden');\n\t\t}\n\t\tconst labelText = idsToGroupForRotation.includes(actionId.spellId) ? actionId.baseName : actionId.name;\n\t\tlabelElem.innerHTML = `\n\t\t\t<span class=\"fas fa-eye${isHiddenLabel ? '' : '-slash'}\"></span>\n\t\t\t<a class=\"rotation-label-icon\"></a>\n\t\t\t<span class=\"rotation-label-text\">${labelText}</span>\n\t\t`;\n\t\tconst hideElem = labelElem.getElementsByClassName('fas')[0] as HTMLElement;\n\t\thideElem.addEventListener('click', event => {\n\t\t\tif (isHiddenLabel) {\n\t\t\t\tconst index = this.hiddenIds.findIndex(hiddenId => hiddenId.equals(actionId));\n\t\t\t\tif (index != -1) {\n\t\t\t\t\tthis.hiddenIds.splice(index, 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.hiddenIds.push(actionId);\n\t\t\t}\n\t\t\tthis.hiddenIdsChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t});\n\t\ttippy(hideElem, {\n\t\t\tcontent: isHiddenLabel ? 'Show Row' : 'Hide Row',\n\t\t\tallowHTML: true,\n\t\t});\n\t\tconst updateHidden = () => {\n\t\t\tif (isHiddenLabel == Boolean(this.hiddenIds.find(hiddenId => hiddenId.equals(actionId)))) {\n\t\t\t\tlabelElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tlabelElem.classList.add('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\tconst labelIcon = labelElem.getElementsByClassName('rotation-label-icon')[0] as HTMLAnchorElement;\n\t\tactionId.setBackgroundAndHref(labelIcon);\n\t\treturn labelElem;\n\t}\n\n\tprivate makeRowElem(actionId: ActionId, duration: number): HTMLElement {\n\t\tconst rowElem = document.createElement('div');\n\t\trowElem.classList.add('rotation-timeline-row', 'rotation-row');\n\t\trowElem.style.width = this.timeToPx(duration);\n\n\t\tconst updateHidden = () => {\n\t\t\tif (this.hiddenIds.find(hiddenId => hiddenId.equals(actionId))) {\n\t\t\t\trowElem.classList.add('hide');\n\t\t\t} else {\n\t\t\t\trowElem.classList.remove('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\treturn rowElem;\n\t}\n\n\tprivate addSeparatorRow(duration: number) {\n\t\tlet separatorElem = document.createElement('div');\n\t\tseparatorElem.classList.add('rotation-timeline-separator');\n\t\tthis.rotationLabels.appendChild(separatorElem);\n\t\tseparatorElem = document.createElement('div');\n\t\tseparatorElem.classList.add('rotation-timeline-separator');\n\t\tseparatorElem.style.width = this.timeToPx(duration);\n\t\tthis.rotationTimeline.appendChild(separatorElem);\n\t}\n\n\tprivate addResourceRow(resourceType: ResourceType, resourceLogs: Array<ResourceChangedLogGroup>, duration: number) {\n\t\tif (resourceLogs.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst startValue = resourceLogs[0].valueBefore;\n\n\t\tconst labelElem = document.createElement('div');\n\t\tlabelElem.classList.add('rotation-label', 'rotation-row');\n\t\tlabelElem.innerHTML = `\n\t\t\t<a class=\"rotation-label-icon\" style=\"background-image:url('${resourceTypeToIcon[resourceType]}')\"></a>\n\t\t\t<span class=\"rotation-label-text\">${resourceNames[resourceType]}</span>\n\t\t`;\n\t\tthis.rotationLabels.appendChild(labelElem);\n\n\t\tconst rowElem = document.createElement('div');\n\t\trowElem.classList.add('rotation-timeline-row', 'rotation-row');\n\t\trowElem.style.width = this.timeToPx(duration);\n\n\t\tresourceLogs.forEach((resourceLogGroup, i) => {\n\t\t\tconst resourceElem = document.createElement('div');\n\t\t\tresourceElem.classList.add('rotation-timeline-resource', 'series-color', resourceNames[resourceType].toLowerCase().replaceAll(' ', '-'));\n\t\t\tresourceElem.style.left = this.timeToPx(resourceLogGroup.timestamp);\n\t\t\tresourceElem.style.width = this.timeToPx((resourceLogs[i + 1]?.timestamp || duration) - resourceLogGroup.timestamp);\n\t\t\tif (percentageResources.includes(resourceType)) {\n\t\t\t\tresourceElem.textContent = (resourceLogGroup.valueAfter / startValue * 100).toFixed(0) + '%';\n\t\t\t} else {\n\t\t\t\tif (resourceType == ResourceType.ResourceTypeEnergy) {\n\t\t\t\t\tconst bgElem = document.createElement('div');\n\t\t\t\t\tbgElem.classList.add('rotation-timeline-resource-fill')\n\t\t\t\t\tbgElem.style.height = (resourceLogGroup.valueAfter / startValue * 100).toFixed(0) + '%';\n\t\t\t\t\tresourceElem.appendChild(bgElem)\n\t\t\t\t} else {\n\t\t\t\t\tresourceElem.textContent = Math.floor(resourceLogGroup.valueAfter).toFixed(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\trowElem.appendChild(resourceElem);\n\n\t\t\ttippy(resourceElem, {\n\t\t\t\tcontent: this.resourceTooltip(resourceLogGroup, startValue, false),\n\t\t\t\tallowHTML: true,\n\t\t\t\tplacement: 'bottom',\n\t\t\t});\n\t\t});\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addCastRow(castLogs: Array<CastLog>, aurasById: Array<Array<AuraUptimeLog>>, duration: number) {\n\t\tconst actionId = castLogs[0].actionId!;\n\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true));\n\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\t\tcastLogs.forEach(castLog => {\n\t\t\tconst castElem = document.createElement('div');\n\t\t\tcastElem.classList.add('rotation-timeline-cast');\n\t\t\tcastElem.style.left = this.timeToPx(castLog.timestamp);\n\t\t\tcastElem.style.minWidth = this.timeToPx(castLog.castTime + castLog.travelTime);\n\t\t\trowElem.appendChild(castElem);\n\n\t\t\tif (castLog.travelTime != 0) {\n\t\t\t\tconst travelTimeElem = document.createElement('div');\n\t\t\t\ttravelTimeElem.classList.add('rotation-timeline-travel-time');\n\t\t\t\ttravelTimeElem.style.left = this.timeToPx(castLog.castTime);\n\t\t\t\ttravelTimeElem.style.minWidth = this.timeToPx(castLog.travelTime);\n\t\t\t\tcastElem.appendChild(travelTimeElem);\n\t\t\t}\n\n\t\t\tif (castLog.damageDealtLogs.length > 0) {\n\t\t\t\tconst ddl = castLog.damageDealtLogs[0];\n\t\t\t\tif (ddl.miss || ddl.dodge || ddl.parry) {\n\t\t\t\t\tcastElem.classList.add('outcome-miss');\n\t\t\t\t} else if (ddl.glance || ddl.block || ddl.partialResist1_4 || ddl.partialResist2_4 || ddl.partialResist3_4) {\n\t\t\t\t\tcastElem.classList.add('outcome-partial');\n\t\t\t\t} else if (ddl.crit) {\n\t\t\t\t\tcastElem.classList.add('outcome-crit');\n\t\t\t\t} else {\n\t\t\t\t\tcastElem.classList.add('outcome-hit');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst iconElem = document.createElement('a');\n\t\t\ticonElem.classList.add('rotation-timeline-cast-icon');\n\t\t\tactionId.setBackground(iconElem);\n\t\t\tcastElem.appendChild(iconElem);\n\t\t\tconst travelTimeStr = castLog.travelTime == 0 ? '' : ` + ${castLog.travelTime.toFixed(2)}s travel time`;\n\t\t\tconst totalDamage = castLog.totalDamage();\n\t\t\ttippy(castElem, {\n\t\t\t\tcontent: `\n\t\t\t\t\t<span>${castLog.actionId!.name} from ${castLog.timestamp.toFixed(2)}s to ${(castLog.timestamp + castLog.castTime).toFixed(2)}s (${castLog.castTime.toFixed(2)}s, ${castLog.effectiveTime.toFixed(2)}s GCD Time)${travelTimeStr}</span>\n\t\t\t\t\t<ul class=\"rotation-timeline-cast-damage-list\">\n\t\t\t\t\t\t${castLog.damageDealtLogs.map(ddl => `\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span>${ddl.timestamp.toFixed(2)}s - ${ddl.resultString()}</span>\n\t\t\t\t\t\t\t\t\t${ddl.source?.isTarget ? '' : `<span class=\"threat-metrics\"> (${ddl.threat.toFixed(1)} Threat)</span>`}\n\t\t\t\t\t\t\t\t</li>`)\n\t\t\t\t\t\t.join('')}\n\t\t\t\t\t</ul>\n\t\t\t\t\t${totalDamage == 0 ? '' : `<span>Total: ${totalDamage.toFixed(2)} (${(totalDamage / (castLog.effectiveTime || 1)).toFixed(2)} DPET)</span>`}\n\t\t\t\t`,\n\t\t\t\tallowHTML: true,\n\t\t\t\tplacement: 'bottom',\n\t\t\t});\n\n\t\t\tcastLog.damageDealtLogs.filter(ddl => ddl.tick).forEach(ddl => {\n\t\t\t\tconst tickElem = document.createElement('div');\n\t\t\t\ttickElem.classList.add('rotation-timeline-tick');\n\t\t\t\ttickElem.style.left = this.timeToPx(ddl.timestamp);\n\t\t\t\trowElem.appendChild(tickElem);\n\n\t\t\t\ttippy(tickElem, {\n\t\t\t\t\tcontent: `\n\t\t\t\t\t\t<span>${ddl.timestamp.toFixed(2)}s - ${ddl.actionId!.name} ${ddl.resultString()}</span>\n\t\t\t\t\t\t${ddl.source?.isTarget ? '' : `<span class=\"threat-metrics\"> (${ddl.threat.toFixed(1)} Threat)</span>`}\n\t\t\t\t\t`,\n\t\t\t\t\tallowHTML: true,\n\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// If there are any auras that correspond to this cast, visualize them in the same row.\n\t\taurasById\n\t\t\t.filter(auraUptimeLogs => auraUptimeLogs[0].actionId!.equalsIgnoringTag(actionId))\n\t\t\t.forEach(auraUptimeLogs => this.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem));\n\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addAuraRow(auraUptimeLogs: Array<AuraUptimeLog>, duration: number) {\n\t\tconst actionId = auraUptimeLogs[0].actionId!;\n\n\t\tlet rowElem = this.makeRowElem(actionId, duration);\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true));\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\n\t\tthis.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem);\n\t}\n\n\tprivate applyAuraUptimeLogsToRow(auraUptimeLogs: Array<AuraUptimeLog>, rowElem: HTMLElement) {\n\t\tauraUptimeLogs.forEach(aul => {\n\t\t\tconst auraElem = document.createElement('div');\n\t\t\tauraElem.classList.add('rotation-timeline-aura');\n\t\t\tauraElem.style.left = this.timeToPx(aul.gainedAt);\n\t\t\tauraElem.style.minWidth = this.timeToPx(aul.fadedAt === aul.gainedAt ? 0.001 : aul.fadedAt - aul.gainedAt);\n\t\t\trowElem.appendChild(auraElem);\n\n\t\t\ttippy(auraElem, {\n\t\t\t\tcontent: `\n\t\t\t\t\t<span>${aul.actionId!.name}: ${aul.gainedAt.toFixed(2)}s - ${(aul.fadedAt).toFixed(2)}s</span>\n\t\t\t\t`,\n\t\t\t\tallowHTML: true,\n\t\t\t});\n\n\t\t\taul.stacksChange.forEach((scl, i) => {\n\t\t\t\tif (scl.timestamp == aul.fadedAt) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stacksChangeElem = document.createElement('div');\n\t\t\t\tstacksChangeElem.classList.add('rotation-timeline-stacks-change');\n\t\t\t\tstacksChangeElem.style.left = this.timeToPx(scl.timestamp - aul.timestamp);\n\t\t\t\tstacksChangeElem.style.width = this.timeToPx(aul.stacksChange[i + 1] ? aul.stacksChange[i + 1].timestamp - scl.timestamp : aul.fadedAt - scl.timestamp);\n\t\t\t\tstacksChangeElem.textContent = String(scl.newStacks);\n\t\t\t\tauraElem.appendChild(stacksChangeElem);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate timeToPxValue(time: number): number {\n\t\treturn time * 100;\n\t}\n\tprivate timeToPx(time: number): string {\n\t\treturn this.timeToPxValue(time) + 'px';\n\t}\n\n\tprivate drawRotationTimeRuler(canvas: HTMLCanvasElement, duration: number) {\n\t\tconst height = 30;\n\t\tcanvas.width = this.timeToPxValue(duration);\n\t\tcanvas.height = height;\n\n\t\tconst ctx = canvas.getContext('2d')!;\n\t\tctx.strokeStyle = 'white'\n\n\t\tctx.font = 'bold 14px SimDefaultFont';\n\t\tctx.fillStyle = 'white';\n\t\tctx.lineWidth = 2;\n\t\tctx.beginPath();\n\n\t\t// Bottom border line\n\t\tctx.moveTo(0, height);\n\t\tctx.lineTo(canvas.width, height);\n\n\t\t// Tick lines\n\t\tconst numTicks = 1 + Math.floor(duration * 10);\n\t\tfor (let i = 0; i <= numTicks; i++) {\n\t\t\tconst time = i * 0.1;\n\t\t\tlet x = this.timeToPxValue(time);\n\t\t\tif (i == 0) {\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tx++;\n\t\t\t} else if (i % 10 == 0 && time + 1 > duration) {\n\t\t\t\tctx.textAlign = 'right';\n\t\t\t\tx--;\n\t\t\t} else {\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t}\n\n\t\t\tlet lineHeight = 0;\n\t\t\tif (i % 10 == 0) {\n\t\t\t\tlineHeight = height * 0.5;\n\t\t\t\tctx.fillText(time + 's', x, height - height * 0.6);\n\t\t\t} else if (i % 5 == 0) {\n\t\t\t\tlineHeight = height * 0.25;\n\t\t\t} else {\n\t\t\t\tlineHeight = height * 0.125;\n\t\t\t}\n\t\t\tctx.moveTo(x, height);\n\t\t\tctx.lineTo(x, height - lineHeight);\n\t\t}\n\t\tctx.stroke();\n\t}\n\n\tprivate dpsTooltip(log: DpsLog, includeAuras: boolean, player: UnitMetrics, colorOverride: string): string {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn `<div class=\"timeline-tooltip dps\">\n\t\t\t<div class=\"timeline-tooltip-header\">\n\t\t\t\t${showPlayerLabel ? `\n\t\t\t\t<img class=\"timeline-tooltip-icon\" src=\"${player.iconUrl}\">\n\t\t\t\t<span class=\"\" style=\"color: ${colorOverride}\">${player.label}</span><span> - </span>\n\t\t\t\t` : ''}\n\t\t\t\t<span class=\"bold\">${log.timestamp.toFixed(2)}s</span>\n\t\t\t</div>\n\t\t\t<div class=\"timeline-tooltip-body\">\n\t\t\t\t<ul class=\"timeline-dps-events\">\n\t\t\t\t\t${log.damageLogs.map(damageLog => this.tooltipLogItem(damageLog, damageLog.resultString())).join('')}\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">DPS: ${log.dps.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t${this.tooltipAurasSection(log)}\n\t\t</div>`;\n\t}\n\n\tprivate threatTooltip(log: ThreatLogGroup, includeAuras: boolean, player: UnitMetrics, colorOverride: string): string {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn `<div class=\"timeline-tooltip threat\">\n\t\t\t<div class=\"timeline-tooltip-header\">\n\t\t\t\t${showPlayerLabel ? `\n\t\t\t\t<img class=\"timeline-tooltip-icon\" src=\"${player.iconUrl}\">\n\t\t\t\t<span class=\"\" style=\"color: ${colorOverride}\">${player.label}</span></span> - </span>\n\t\t\t\t` : ''}\n\t\t\t\t<span class=\"bold\">${log.timestamp.toFixed(2)}s</span>\n\t\t\t</div>\n\t\t\t<div class=\"timeline-tooltip-body\">\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">Before: ${log.threatBefore.toFixed(1)}</span>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"timeline-threat-events\">\n\t\t\t\t\t${log.logs.map(log => this.tooltipLogItem(log, `${log.threat.toFixed(1)} Threat`)).join('')}\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">After: ${log.threatAfter.toFixed(1)}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t${includeAuras ? this.tooltipAurasSection(log) : ''}\n\t\t</div>`;\n\t}\n\n\tprivate resourceTooltip(log: ResourceChangedLogGroup, maxValue: number, includeAuras: boolean): string {\n\t\tconst valToDisplayString = percentageResources.includes(log.resourceType)\n\t\t\t? (val: number) => `${val.toFixed(1)} (${(val / maxValue * 100).toFixed(0)}%)`\n\t\t\t: (val: number) => `${val.toFixed(1)}`;\n\n\t\treturn `<div class=\"timeline-tooltip ${resourceNames[log.resourceType].toLowerCase().replaceAll(' ', '-')}\">\n\t\t\t<div class=\"timeline-tooltip-header\">\n\t\t\t\t<span class=\"bold\">${log.timestamp.toFixed(2)}s</span>\n\t\t\t</div>\n\t\t\t<div class=\"timeline-tooltip-body\">\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">Before: ${valToDisplayString(log.valueBefore)}</span>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"timeline-mana-events\">\n\t\t\t\t\t${log.logs.map(manaChangedLog => this.tooltipLogItem(manaChangedLog, manaChangedLog.resultString())).join('')}\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">After: ${valToDisplayString(log.valueAfter)}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t${includeAuras ? this.tooltipAurasSection(log) : ''}\n\t\t</div>`;\n\t}\n\n\tprivate tooltipLogItem(log: SimLog, value: string): string {\n\t\tconst valueElem = `<span class=\"series-color\">${value}</span>`;\n\t\tlet actionElem = '';\n\t\tif (log.actionId) {\n\t\t\tlet iconElem = '';\n\t\t\tif (log.actionId.iconUrl) {\n\t\t\t\ticonElem = `<img class=\"timeline-tooltip-icon\" src=\"${log.actionId.iconUrl}\">`;\n\t\t\t}\n\t\t\tactionElem = `\n\t\t\t${iconElem}\n\t\t\t<span>${log.actionId.name}:</span>\n\t\t\t`;\n\t\t}\n\t\treturn `\n\t\t<li>\n\t\t\t${actionElem}\n\t\t\t${valueElem}\n\t\t</li>`;\n\t}\n\n\tprivate tooltipAurasSection(log: SimLog): string {\n\t\tif (log.activeAuras.length == 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `\n\t\t<div class=\"timeline-tooltip-auras\">\n\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t<span class=\"bold\">Active Auras</span>\n\t\t\t</div>\n\t\t\t<ul class=\"timeline-active-auras\">\n\t\t\t\t${log.activeAuras.map(auraLog => {\n\t\t\tlet iconElem = '';\n\t\t\tif (auraLog.actionId!.iconUrl) {\n\t\t\t\ticonElem = `<img class=\"timeline-tooltip-icon\" src=\"${auraLog.actionId!.iconUrl}\">`;\n\t\t\t}\n\t\t\treturn `\n\t\t\t\t\t<li>\n\t\t\t\t\t\t${iconElem}\n\t\t\t\t\t\t<span>${auraLog.actionId!.name}</span>\n\t\t\t\t\t</li>`;\n\t\t}).join('')}\n\t\t\t</ul>\n\t\t</div>\n\t\t`;\n\t}\n\n\trender() {\n\t\tsetTimeout(() => {\n\t\t\tthis.dpsResourcesPlot.render();\n\t\t\tthis.rendered = true;\n\t\t\tthis.updatePlot();\n\t\t}, 300);\n\t}\n\n\tprivate toDatetime(timestamp: number): Date {\n\t\treturn new Date(timestamp * 1000);\n\t}\n}\n\nconst MELEE_ACTION_CATEGORY = 1;\nconst SPELL_ACTION_CATEGORY = 2;\nconst DEFAULT_ACTION_CATEGORY = 3;\n\n// Hard-coded spell categories for controlling rotation ordering.\nconst idToCategoryMap: Record<number, number> = {\n\t[OtherAction.OtherActionAttack]: 0,\n\t[OtherAction.OtherActionShoot]: 0.5,\n\n\t// Druid\n\t[48480]: 0.1, // Maul\n\t[48564]: MELEE_ACTION_CATEGORY + 0.10, // Mangle (Bear)\n\t[48568]: MELEE_ACTION_CATEGORY + 0.20, // Lacerate\n\t[48562]: MELEE_ACTION_CATEGORY + 0.30, // Swipe (Bear)\n\n\t[48566]: MELEE_ACTION_CATEGORY + 0.10, // Mangle (Cat)\n\t[48572]: MELEE_ACTION_CATEGORY + 0.20, // Shred\n\t[49800]: MELEE_ACTION_CATEGORY + 0.51, // Rip\n\t[52610]: MELEE_ACTION_CATEGORY + 0.52, // Savage Roar\n\t[48577]: MELEE_ACTION_CATEGORY + 0.53, // Ferocious Bite\n\n\t[48465]: SPELL_ACTION_CATEGORY + 0.10, // Starfire\n\t[48461]: SPELL_ACTION_CATEGORY + 0.20, // Wrath\n\t[53201]: SPELL_ACTION_CATEGORY + 0.30, // Starfall\n\t[48468]: SPELL_ACTION_CATEGORY + 0.40, // Insect Swarm\n\t[48463]: SPELL_ACTION_CATEGORY + 0.50, // Moonfire\n\n\t// Hunter\n\t[48996]: 0.1, // Raptor Strike\n\t[53217]: 0.6, // Wild Quiver\n\t[53209]: MELEE_ACTION_CATEGORY + 0.10, // Chimera Shot\n\t[53353]: MELEE_ACTION_CATEGORY + 0.11, // Chimera Shot Serpent\n\t[60053]: MELEE_ACTION_CATEGORY + 0.10, // Explosive Shot\n\t[49050]: MELEE_ACTION_CATEGORY + 0.20, // Aimed Shot\n\t[49048]: MELEE_ACTION_CATEGORY + 0.21, // Multi Shot\n\t[49045]: MELEE_ACTION_CATEGORY + 0.22, // Arcane Shot\n\t[49052]: MELEE_ACTION_CATEGORY + 0.27, // Steady Shot\n\t[61006]: MELEE_ACTION_CATEGORY + 0.28, // Kill Shot\n\t[34490]: MELEE_ACTION_CATEGORY + 0.29, // Silencing Shot\n\t[49001]: MELEE_ACTION_CATEGORY + 0.30, // Serpent Sting\n\t[3043]: MELEE_ACTION_CATEGORY + 0.30, // Scorpid Sting\n\t[53238]: MELEE_ACTION_CATEGORY + 0.31, // Piercing Shots\n\t[63672]: MELEE_ACTION_CATEGORY + 0.32, // Black Arrow\n\t[49067]: MELEE_ACTION_CATEGORY + 0.33, // Explosive Trap\n\t[58434]: MELEE_ACTION_CATEGORY + 0.34, // Volley\n\n\t// Paladin\n\t[35395]: MELEE_ACTION_CATEGORY + 0.10, // Crusader Strike\n\t[53385]: MELEE_ACTION_CATEGORY + 0.20, // Divine Storm\n\t[42463]: MELEE_ACTION_CATEGORY + 0.30, // Seal of Vengeance\n\t[61840]: MELEE_ACTION_CATEGORY + 0.40, // Righteous Vengeance\n\t[61411]: MELEE_ACTION_CATEGORY + 0.50, // Shield of Righteousness\n\t[53595]: MELEE_ACTION_CATEGORY + 0.51, // Hammer of Righteousness\n\t[20182]: MELEE_ACTION_CATEGORY + 0.60, // Reckoning\n\t[48952]: SPELL_ACTION_CATEGORY + 0.10, // Holy Shield\n\t[31803]: SPELL_ACTION_CATEGORY + 0.20, // Holy Vengeance\n\t[48801]: SPELL_ACTION_CATEGORY + 0.30, // Exorcism\n\t[48819]: SPELL_ACTION_CATEGORY + 0.40, // Consecration\n\t[53408]: SPELL_ACTION_CATEGORY + 0.51, // Judgement of Wisdom\n\t[20271]: SPELL_ACTION_CATEGORY + 0.52, // Judgement of Light\n\t[31804]: SPELL_ACTION_CATEGORY + 0.53, // Judgement of Vengeance\n\t[20467]: SPELL_ACTION_CATEGORY + 0.54, // Judgement of Command\n\t[20187]: SPELL_ACTION_CATEGORY + 0.55, // Judgement of Righteousness\n\t[31878]: SPELL_ACTION_CATEGORY + 0.56, // Judgements of the Wise\n\t[48817]: SPELL_ACTION_CATEGORY + 0.50, // Holy Wrath\n\t[48806]: SPELL_ACTION_CATEGORY + 0.60, // Hammer of Wrath\n\t[54428]: SPELL_ACTION_CATEGORY + 0.70, // Divine Plea\n\t[66233]: SPELL_ACTION_CATEGORY + 0.80, // Ardent Defender\n\n\t// Priest\n\t[48300]: SPELL_ACTION_CATEGORY + 0.11, // Devouring Plague\n\t[48125]: SPELL_ACTION_CATEGORY + 0.12, // Shadow Word: Pain\n\t[48160]: SPELL_ACTION_CATEGORY + 0.13, // Vampiric Touch\n\t[48135]: SPELL_ACTION_CATEGORY + 0.14, // Holy Fire\n\t[48123]: SPELL_ACTION_CATEGORY + 0.19, // Smite\n\t[48127]: SPELL_ACTION_CATEGORY + 0.20, // Mind Blast\n\t[48158]: SPELL_ACTION_CATEGORY + 0.30, // Shadow Word: Death\n\t[48156]: SPELL_ACTION_CATEGORY + 0.40, // Mind Flay\n\n\t// Rogue\n\t[6774]: MELEE_ACTION_CATEGORY + 0.1, // Slice and Dice\n\t[8647]: MELEE_ACTION_CATEGORY + 0.2, // Expose Armor\n\t[48672]: MELEE_ACTION_CATEGORY + 0.3, // Rupture\n\t[57993]: MELEE_ACTION_CATEGORY + 0.3, // Envenom\n\t[48668]: MELEE_ACTION_CATEGORY + 0.4, // Eviscerate\n\t[48666]: MELEE_ACTION_CATEGORY + 0.5, // Mutilate\n\t[48665]: MELEE_ACTION_CATEGORY + 0.6, // Mutilate (MH)\n\t[48664]: MELEE_ACTION_CATEGORY + 0.7, // Mutilate (OH)\n\t[48638]: MELEE_ACTION_CATEGORY + 0.5, // Sinister Strike\n\t[51723]: MELEE_ACTION_CATEGORY + 0.8, // Fan of Knives\n\t[57973]: SPELL_ACTION_CATEGORY + 0.1, // Deadly Poison\n\t[57968]: SPELL_ACTION_CATEGORY + 0.2, // Instant Poison\n\n\t// Shaman\n\t[58804]: 0.11, // Windfury Weapon\n\t[58790]: 0.12, // Flametongue Weapon\n\t[58796]: 0.12, // Frostbrand Weapon\n\t[17364]: MELEE_ACTION_CATEGORY + 0.10, // Stormstrike\n\t[60103]: MELEE_ACTION_CATEGORY + 0.20, // Lava Lash\n\t[49233]: SPELL_ACTION_CATEGORY + 0.21, // Flame Shock\n\t[49231]: SPELL_ACTION_CATEGORY + 0.22, // Earth Shock\n\t[49236]: SPELL_ACTION_CATEGORY + 0.23, // Frost Shock\n\t[60043]: SPELL_ACTION_CATEGORY + 0.31, // Lava Burst\n\t[49238]: SPELL_ACTION_CATEGORY + 0.32, // Lightning Bolt\n\t[49271]: SPELL_ACTION_CATEGORY + 0.33, // Chain Lightning\n\t[61657]: SPELL_ACTION_CATEGORY + 0.41, // Fire Nova\n\t[58734]: SPELL_ACTION_CATEGORY + 0.42, // Magma Totem\n\t[58704]: SPELL_ACTION_CATEGORY + 0.43, // Searing Totem\n\t[49281]: SPELL_ACTION_CATEGORY + 0.51, // Lightning Shield\n\t[49279]: SPELL_ACTION_CATEGORY + 0.52, // Lightning Shield (Proc)\n\t[2825]: DEFAULT_ACTION_CATEGORY + 0.1, // Bloodlust\n\n\t// Warlock\n\t[47867]: SPELL_ACTION_CATEGORY + 0.01, // Curse of Doom\n\t[47864]: SPELL_ACTION_CATEGORY + 0.02, // Curse of Agony\n\t[47813]: SPELL_ACTION_CATEGORY + 0.1, // Corruption\n\t[59164]: SPELL_ACTION_CATEGORY + 0.2, // Haunt\n\t[47843]: SPELL_ACTION_CATEGORY + 0.3, // Unstable Affliction\n\t[47811]: SPELL_ACTION_CATEGORY + 0.31, // Immolate\n\t[17962]: SPELL_ACTION_CATEGORY + 0.32, // Conflagrate\n\t[59172]: SPELL_ACTION_CATEGORY + 0.49, // Chaos Bolt\n\t[47809]: SPELL_ACTION_CATEGORY + 0.5, // Shadow Bolt\n\t[47838]: SPELL_ACTION_CATEGORY + 0.51, // Incinerate\n\t[47825]: SPELL_ACTION_CATEGORY + 0.52, // Soul Fire\n\t[47855]: SPELL_ACTION_CATEGORY + 0.6, // Drain Soul\n\t[57946]: SPELL_ACTION_CATEGORY + 0.7, // Life Tap\n\t[47241]: SPELL_ACTION_CATEGORY + 0.8, // Metamorphosis\n\t[50589]: SPELL_ACTION_CATEGORY + 0.81, // Immolation Aura\n\t[47193]: SPELL_ACTION_CATEGORY + 0.82, // Demonic Empowerment\n\n\t// Mage\n\t[42842]: SPELL_ACTION_CATEGORY + 0.01, // Frostbolt\n\t[47610]: SPELL_ACTION_CATEGORY + 0.02, // Frostfire Bolt\n\t[42897]: SPELL_ACTION_CATEGORY + 0.02, // Arcane Blast\n\t[42833]: SPELL_ACTION_CATEGORY + 0.02, // Fireball\n\t[42859]: SPELL_ACTION_CATEGORY + 0.03, // Scorch\n\t[42891]: SPELL_ACTION_CATEGORY + 0.1, // Pyroblast\n\t[42846]: SPELL_ACTION_CATEGORY + 0.1, // Arcane Missiles\n\t[44572]: SPELL_ACTION_CATEGORY + 0.1, // Deep Freeze\n\t[44781]: SPELL_ACTION_CATEGORY + 0.2, // Arcane Barrage\n\t[42914]: SPELL_ACTION_CATEGORY + 0.2, // Ice Lance\n\t[55360]: SPELL_ACTION_CATEGORY + 0.2, // Living Bomb\n\t[55362]: SPELL_ACTION_CATEGORY + 0.21, // Living Bomb (Explosion)\n\t[12654]: SPELL_ACTION_CATEGORY + 0.3, // Ignite\n\t[12472]: SPELL_ACTION_CATEGORY + 0.4, // Icy Veins\n\t[11129]: SPELL_ACTION_CATEGORY + 0.4, // Combustion\n\t[12042]: SPELL_ACTION_CATEGORY + 0.4, // Arcane Power\n\t[11958]: SPELL_ACTION_CATEGORY + 0.41, // Cold Snap\n\t[12043]: SPELL_ACTION_CATEGORY + 0.41, // Presence of Mind\n\t[31687]: SPELL_ACTION_CATEGORY + 0.41, // Water Elemental\n\t[55342]: SPELL_ACTION_CATEGORY + 0.5, // Mirror Image\n\t[33312]: SPELL_ACTION_CATEGORY + 0.51, // Mana Gems\n\t[12051]: SPELL_ACTION_CATEGORY + 0.52, // Evocate\n\t[44401]: SPELL_ACTION_CATEGORY + 0.6, // Missile Barrage\n\t[44448]: SPELL_ACTION_CATEGORY + 0.6, // Hot Streak\n\t[44545]: SPELL_ACTION_CATEGORY + 0.6, // Fingers of Frost\n\t[44549]: SPELL_ACTION_CATEGORY + 0.61, // Brain Freeze\n\t[12536]: SPELL_ACTION_CATEGORY + 0.61, // Clearcasting\n\n\t// Warrior\n\t[47520]: 0.1, // Cleave\n\t[47450]: 0.1, // Heroic Strike\n\t[47475]: MELEE_ACTION_CATEGORY + 0.05, // Slam\n\t[23881]: MELEE_ACTION_CATEGORY + 0.1, // Bloodthirst\n\t[47486]: MELEE_ACTION_CATEGORY + 0.1, // Mortal Strike\n\t[30356]: MELEE_ACTION_CATEGORY + 0.1, // Shield Slam\n\t[47498]: MELEE_ACTION_CATEGORY + 0.21, // Devastate\n\t[47467]: MELEE_ACTION_CATEGORY + 0.22, // Sunder Armor\n\t[57823]: MELEE_ACTION_CATEGORY + 0.23, // Revenge\n\t[1680]: MELEE_ACTION_CATEGORY + 0.24, // Whirlwind\n\t[7384]: MELEE_ACTION_CATEGORY + 0.25, // Overpower\n\t[47471]: MELEE_ACTION_CATEGORY + 0.42, // Execute\n\t[12867]: SPELL_ACTION_CATEGORY + 0.51, // Deep Wounds\n\t[58874]: SPELL_ACTION_CATEGORY + 0.52, // Damage Shield\n\t[47296]: SPELL_ACTION_CATEGORY + 0.53, // Critical Block\n\t[46924]: SPELL_ACTION_CATEGORY + 0.61, // Bladestorm\n\t[2565]: SPELL_ACTION_CATEGORY + 0.62, // Shield Block\n\t[64382]: SPELL_ACTION_CATEGORY + 0.65, // Shattering Throw\n\t[71]: DEFAULT_ACTION_CATEGORY + 0.1, // Defensive Stance\n\t[2457]: DEFAULT_ACTION_CATEGORY + 0.1, // Battle Stance\n\t[2458]: DEFAULT_ACTION_CATEGORY + 0.1, // Berserker Stance\n\n\t// Deathknight\n\t[51425]: MELEE_ACTION_CATEGORY + 0.05, // Obliterate\n\t[55268]: MELEE_ACTION_CATEGORY + 0.1, // Frost strike\n\t[49930]: MELEE_ACTION_CATEGORY + 0.15, // Blood strike\n\t[50842]: MELEE_ACTION_CATEGORY + 0.2, // Pestilence\n\t[51411]: MELEE_ACTION_CATEGORY + 0.25, // Howling Blast\n\t[49895]: MELEE_ACTION_CATEGORY + 0.25, // Death Coil\n\t[49938]: MELEE_ACTION_CATEGORY + 0.25, // Death and Decay\n\t[63560]: MELEE_ACTION_CATEGORY + 0.25, // Ghoul Frenzy\n\t[50536]: MELEE_ACTION_CATEGORY + 0.25, // Unholy Blight\n\t[57623]: MELEE_ACTION_CATEGORY + 0.25, // HoW\n\t[59131]: MELEE_ACTION_CATEGORY + 0.3, // Icy touch\n\t[49921]: MELEE_ACTION_CATEGORY + 0.3, // Plague strike\n\t[51271]: MELEE_ACTION_CATEGORY + 0.35, // UA\n\t[45529]: MELEE_ACTION_CATEGORY + 0.35, // BT\n\t[47568]: MELEE_ACTION_CATEGORY + 0.35, // ERW\n\t[49206]: MELEE_ACTION_CATEGORY + 0.35, // Summon Gargoyle\n\t[46584]: MELEE_ACTION_CATEGORY + 0.35, // Raise Dead\n\t[55095]: MELEE_ACTION_CATEGORY + 0.4, // Frost Fever\n\t[55078]: MELEE_ACTION_CATEGORY + 0.4, // Blood Plague\n\t[49655]: MELEE_ACTION_CATEGORY + 0.4, // Wandering Plague\n\t[50401]: MELEE_ACTION_CATEGORY + 0.5, // Razor Frost\n\t[51460]: MELEE_ACTION_CATEGORY + 0.5, // Necrosis\n\t[50463]: MELEE_ACTION_CATEGORY + 0.5, // BCB\n\t[50689]: DEFAULT_ACTION_CATEGORY + 0.1, // Blood Presence\n\t[48263]: DEFAULT_ACTION_CATEGORY + 0.1, // Frost Presence\n\t[48265]: DEFAULT_ACTION_CATEGORY + 0.1, // Unholy Presence\n\n\t// Generic\n\t[53307]: SPELL_ACTION_CATEGORY + 0.931, // Thorns\n\t[54043]: SPELL_ACTION_CATEGORY + 0.932, // Retribution Aura\n\t[54758]: SPELL_ACTION_CATEGORY + 0.933, // Hyperspeed Acceleration\n\t[42641]: SPELL_ACTION_CATEGORY + 0.941, // Sapper\n\t[40536]: SPELL_ACTION_CATEGORY + 0.942, // Explosive Decoy\n\t[41119]: SPELL_ACTION_CATEGORY + 0.943, // Saronite Bomb\n\t[40771]: SPELL_ACTION_CATEGORY + 0.944, // Cobalt Frag Bomb\n};\n\nconst idsToGroupForRotation: Array<number> = [\n\t6774,  // Slice and Dice\n\t8647, // Expose Armor\n\t48668, // Eviscerate\n\t48672, // Rupture\n\t51690, // Killing Spree\n\t57993, // Envenom\n];\n\nconst percentageResources: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n];\n","import { Encounter as EncounterProto } from '../proto/common.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult, ProgressMetrics } from '../proto/api.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem } from '../utils.js';\nimport { Tooltip } from 'bootstrap';\n\ndeclare var tippy: any;\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('Simulate', 'dps-action', async () => simUI.runSim((progress: ProgressMetrics) => {\n\t\tresultsManager.setSimProgress(progress);\n\t}));\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult,\n\tsettings: any,\n\traidProto: RaidProto,\n\tencounterProto: EncounterProto,\n};\n\nexport interface ResultMetrics {\n\tcod:   string,\n\tdps:   string,\n\tdpasp: string,\n\tdtps:  string,\n\ttmi:   string,\n\tdur:   string,\n\thps:   string,\n\ttps:   string,\n\ttto:   string,\n}\n\nexport interface ResultMetricCategories {\n\tdamage:  string,\n\tdemo: string,\n\thealing: string,\n\tthreat:  string,\n}\n\nexport interface ResultsLineArgs {\n\taverage: Number,\n\tstdev?: Number,\n\tclasses?: string\n}\n\nexport class RaidSimResultsManager {\n\tstatic resultMetricCategories: {[ResultMetrics: string]: keyof ResultMetricCategories} = {\n\t\tdps:   'damage',\n\t\tdpasp: 'demo',\n\t\ttps:   'threat',\n\t\tdtps:  'threat',\n\t\ttmi:   'threat',\n\t\tcod:   'threat',\n\t\ttto:   'healing',\n\t\thps:   'healing',\n\t}\n\n\tstatic resultMetricClasses: {[ResultMetrics: string]: string} = {\n\t\tcod:    'results-sim-cod',\n\t\tdps:    'results-sim-dps',\n\t\tdpasp:  'results-sim-dpasp',\n\t\tdtps:   'results-sim-dtps',\n\t\ttmi:    'results-sim-tmi',\n\t\tdur:    'results-sim-dur',\n\t\thps:    'results-sim-hps',\n\t\ttps:    'results-sim-tps',\n\t\ttto:    'results-sim-tto',\n\t}\n\n\tstatic metricsClasses: {[ResultMetricCategories: string]: string} = {\n\t\tdamage:  'damage-metrics',\n\t\tdemo: 'demo-metrics',\n\t\thealing: 'healing-metrics',\n\t\tthreat:  'threat-metrics',\n\t}\n\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[\n\t\t\tthis.currentChangeEmitter,\n\t\t\tthis.referenceChangeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t<div class=\"results-sim\">\n\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t\t${!this.simUI.isIndividualSim() ? '' : `<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t</div>`}\n\t\t\t\t<div class=\"\">\n\t\t\t\t\t${progress.presimRunning ? 'presimulations running' : `${progress.completedIterations} / ${progress.totalIterations}<br>iterations complete`}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`);\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\t'raid': RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\t'encounter': EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\tthis.simUI.resultsViewer.setContent(`\n      <div class=\"results-sim\">\n\t\t\t\t${RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div class=\"results-sim-reference\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"results-sim-set-reference\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Use as reference\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-map-pin fa-lg text-${this.simUI.cssScheme} me-2\"></i>Save as Reference\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-swap me-3\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fas fa-arrows-rotate me-1\"></i>Swap\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-delete\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-times fa-lg me-1\"></i>Cancel\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </div>\n    `);\n\n\t\tconst setResultTooltip = (cssClass: string, tooltip: string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.getElementsByClassName(cssClass)[0] as HTMLElement | undefined;\n\t\t\tif (resultDivElem) {\n\t\t\t\tresultDivElem.setAttribute('data-bs-toggle', 'tooltip');\n\t\t\t\tresultDivElem.setAttribute('data-bs-title', tooltip);\n\t\t\t\tresultDivElem.setAttribute('data-bs-html', 'true');\n\t\t\t\tresultDivElem.setAttribute('data-bs-placement', 'right');\n\t\t\t\tTooltip.getOrCreateInstance(resultDivElem);\n\t\t\t}\n\t\t};\n\t\tsetResultTooltip('results-sim-dps', 'Damage Per Second');\n\t\tsetResultTooltip('results-sim-dpasp', 'Demonic Pact Average Spell Power');\n\t\tsetResultTooltip('results-sim-tto', 'Time To OOM');\n\t\tsetResultTooltip('results-sim-hps', 'Healing+Shielding Per Second, including overhealing.');\n\t\tsetResultTooltip('results-sim-tps', 'Threat Per Second');\n\t\tsetResultTooltip('results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTooltip('results-sim-tmi', `\n\t\t\t<p>Theck-Meloree Index (TMI)</p>\n\t\t\t<p>A measure of incoming damage smoothness which combines the benefits of avoidance with effective health.</p>\n\t\t\t<p><b>Lower is better.</b> This represents the % of your HP to expect in a 6-second burst window based on the encounter settings.</p>\n\t\t`);\n\t\tsetResultTooltip('results-sim-cod', `\n\t\t\t<p>Chance of Death</p>\n\t\t\t<p>The percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the <b>Incoming HPS</b> and <b>Healing Cadence</b> options).</p>\n\t\t\t<p>DTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to capture overall tankiness.</p>\n\t\t`);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff-separator')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-dpasp')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tto')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-hps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-dtps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tmi')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-cod')).forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff')[0] as HTMLSpanElement;\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-set-reference')[0] as HTMLSpanElement;\n\t\tsimReferenceSetButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = this.currentData;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\tTooltip.getOrCreateInstance(simReferenceSetButton);\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-swap')[0] as HTMLSpanElement;\n\t\tsimReferenceSwapButton.addEventListener('click', event => {\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\tthis.updateReference();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttippy(simReferenceSwapButton, {\n\t\t\t'content': 'Swap reference with current',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-delete')[0] as HTMLSpanElement;\n\t\tsimReferenceDeleteButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = null;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceDeleteButton, {\n\t\t\t'content': 'Remove reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\t// Remove references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.remove('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach((e) => e.classList.add('hide'));\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Add references references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.add('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach((e) => e.classList.remove('hide'));\n\t\t}\n\n\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dps']} .results-reference-diff`, res => res.raidMetrics.dps, 2);\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['hps']} .results-reference-diff`, res => res.raidMetrics.hps, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dpasp']} .results-reference-diff`, res => res.getPlayers()[0]!.dpasp, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tto']} .results-reference-diff`, res => res.getPlayers()[0]!.tto, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tps']} .results-reference-diff`, res => res.getPlayers()[0]!.tps, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dtps']} .results-reference-diff`, res => res.getPlayers()[0]!.dtps, 2, true);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tmi']} .results-reference-diff`, res => res.getPlayers()[0]!.tmi, 2, true);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['cod']} .results-reference-diff`, res => res.getPlayers()[0]!.chanceOfDeath, 1, true);\n\t\t}\n\t}\n\n\tprivate formatToplineResult(querySelector: string, getMetrics: (result: SimResult) => DistributionMetricsProto|number, precision: number, lowerIsBetter?: boolean) {\n\t\tconst elem = this.simUI.resultsViewer.contentElem.querySelector(querySelector) as HTMLSpanElement;\n\t\tif (!elem) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cur = this.currentData!.simResult;\n\t\tconst ref = this.referenceData!.simResult;\n\t\tconst curMetricsTemp = getMetrics(cur);\n\t\tconst refMetricsTemp = getMetrics(ref);\n\t\tif (typeof curMetricsTemp === 'number') {\n\t\t\tconst curMetrics = curMetricsTemp as number;\n\t\t\tconst refMetrics = refMetricsTemp as number;\n\t\t\tformatDeltaTextElem(elem, refMetrics, curMetrics, precision, lowerIsBetter);\n\t\t} else {\n\t\t\tconst curMetrics = curMetricsTemp as DistributionMetricsProto;\n\t\t\tconst refMetrics = refMetricsTemp as DistributionMetricsProto;\n\t\t\tconst isDiff = this.applyZTestTooltip(elem, ref.iterations, refMetrics.avg, refMetrics.stdev, cur.iterations, curMetrics.avg, curMetrics.stdev);\n\t\t\tformatDeltaTextElem(elem, refMetrics.avg, curMetrics.avg, precision, lowerIsBetter, !isDiff);\n\t\t}\n\t}\n\n\tprivate applyZTestTooltip(elem: HTMLElement, n1: number, avg1: number, stdev1: number, n2: number, avg2: number, stdev2: number): boolean {\n\t\tconst delta = avg1 - avg2;\n\t\tconst err1 = stdev1/Math.sqrt(n1);\n\t\tconst err2 = stdev2/Math.sqrt(n2);\n\t\tconst denom = Math.sqrt(Math.pow(err1, 2) + Math.pow(err2, 2));\n\t\tconst z = Math.abs(delta/denom);\n\t\tconst isDiff = z > 1.96;\n\n\t\tlet significance_str = '';\n\t\tif (isDiff) { \n\t\t\tsignificance_str = `Difference is significantly different (Z = ${z.toFixed(3)}).`;\n\t\t} else { \n\t\t\tsignificance_str = `Difference is not significantly different (Z = ${z.toFixed(3)}).`;\n\t\t}\n\t\ttippy(elem, {\n\t\t\t'content': significance_str,\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\treturn isDiff;\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.referenceData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): string {\n\t\tconst players = simResult.getPlayers(filter);\n\t\tlet content = '';\n\n\t\tif (players.length == 1) {\n\t\t\tconst playerMetrics = players[0];\n\t\t\tif (playerMetrics.getTargetIndex(filter) == null) {\n\t\t\t\tconst dpsMetrics = playerMetrics.dps;\n\t\t\t\tconst dpaspMetrics = playerMetrics.dpasp;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tconst tmiMetrics = playerMetrics.tmi;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t}).outerHTML;\n\n\t\t\t\t// Hide dpasp if it's zero.\n\t\t\t\tlet dpaspContent = this.buildResultsLine({\n\t\t\t\t\taverage: dpaspMetrics.avg,\n\t\t\t\t\tstdev: dpaspMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dpasp'),\n\t\t\t\t});\n\t\t\t\tif (dpaspMetrics.avg == 0) {\n\t\t\t\t\tdpaspContent.classList.add('hide');\n\t\t\t\t}\n\t\t\t\tcontent += dpaspContent.outerHTML;\n\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: tpsMetrics.avg,\n\t\t\t\t\tstdev: tpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dtpsMetrics.avg,\n\t\t\t\t\tstdev: dtpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: tmiMetrics.avg,\n\t\t\t\t\tstdev: tmiMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('tmi'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: playerMetrics.chanceOfDeath,\n\t\t\t\t\tclasses: this.getResultsLineClasses('cod'),\n\t\t\t\t}).outerHTML;\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getActionMetrics(filter);\n\t\t\t\tif (actions.length > 0) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.tps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\n\t\t\t\tconst targetActions = simResult.getTargets(filter)[0].actions.map(action => action.forTarget(filter));\n\t\t\t\tif (targetActions.length > 0) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedTargetActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.tto.avg,\n\t\t\t\tstdev: playerMetrics.tto.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('tto'),\n\t\t\t}).outerHTML;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t}).outerHTML;\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\tclasses:  this.getResultsLineClasses('dps'),\n\t\t\t}).outerHTML;\n\t\t\t//const hpsMetrics = simResult.raidMetrics.hps;\n\t\t\t//content += this.buildResultsLine({\n\t\t\t//\taverage: hpsMetrics.avg,\n\t\t\t//\tstdev: hpsMetrics.stdev,\n\t\t\t//\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t//}).outerHTML;\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: simResult.result.avgIterationDuration,\n\t\t\t\tclasses: this.getResultsLineClasses('dur'),\n\t\t\t});\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tprivate static getResultsLineClasses(metric: keyof ResultMetrics): string {\n\t\tlet classes = [this.resultMetricClasses[metric]];\n\t\tif (this.resultMetricCategories[metric])\n\t\t\tclasses.push(this.metricsClasses[this.resultMetricCategories[metric]]);\n\n\t\treturn classes.join(' ');\n\t}\n\n\tprivate static buildResultsLine(args: ResultsLineArgs): HTMLElement {\n\t\tlet resultsFragment = document.createElement('fragment');\n\t\tresultsFragment.innerHTML = `\n\t\t\t<div class=\"results-metric ${args.classes}\">\n\t\t\t\t<span class=\"topline-result-avg\">${args.average.toFixed(2)}</span>\n\t\t\t\t${args.stdev ? `\n\t\t\t\t\t<span class=\"topline-result-stdev\">\n\t\t\t\t\t\t(<i class=\"fas fa-plus-minus fa-xs\"></i>${args.stdev.toFixed()})\n\t\t\t\t\t</span>` : ''\n\t\t\t\t}\n\t\t\t\t<div class=\"results-reference hide\">\n\t\t\t\t\t<span class=\"results-reference-diff\"></span> vs reference\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\treturn resultsFragment.children[0] as HTMLElement;\n\t}\n\n}\n","import { Spec } from '../../proto/common.js';\n\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nimport { RaidSimResultsManager } from '../../components/raid_sim_action.js';\n\nexport class ToplineResults extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'topline-results-root';\n\t\tsuper(config);\n\n\t\tthis.rootElem.classList.add('results-sim');\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tlet content = RaidSimResultsManager.makeToplineResultsContent(resultData.result, resultData.filter);\n\n\t\tconst noManaSpecs = [\n\t\t\tSpec.SpecFeralTankDruid,\n\t\t\tSpec.SpecRogue,\n\t\t\tSpec.SpecWarrior,\n\t\t\tSpec.SpecProtectionWarrior,\n\t\t];\n\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length == 1 && !noManaSpecs.includes(players[0].spec)) {\n\t\t\tconst player = players[0];\n\t\t\tconst secondsOOM = player.secondsOomAvg;\n\t\t\tconst percentOOM = secondsOOM / resultData.result.encounterMetrics.durationSeconds;\n\t\t\tconst dangerLevel = percentOOM < 0.01 ? 'safe' : (percentOOM < 0.05 ? 'warning' : 'danger');\n\n\t\t\tcontent += `\n\t\t\t\t<div class=\"results-sim-percent-oom ${dangerLevel} damage-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${secondsOOM.toFixed(1)}s</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tthis.rootElem.innerHTML = content;\n\t}\n}\n","import { REPO_NAME } from '../constants/other'\nimport { TypedEvent } from '../../core/typed_event';\nimport { DetailedResultsUpdate, SimRunData, SimRun } from '../proto/ui';\nimport { SimResult } from '../proto_utils/sim_result';\nimport { SimUI } from '../sim_ui';\n\nimport { SimResultData } from './detailed_results/result_component';\nimport { ResultsFilter } from './detailed_results/results_filter';\nimport { CastMetricsTable } from './detailed_results/cast_metrics';\nimport { DtpsMeleeMetricsTable } from './detailed_results/dtps_melee_metrics';\nimport { DtpsSpellMetricsTable } from './detailed_results/dtps_spell_metrics';\nimport { HealingMetricsTable } from './detailed_results/healing_metrics';\nimport { MeleeMetricsTable } from './detailed_results/melee_metrics';\nimport { SpellMetricsTable } from './detailed_results/spell_metrics';\nimport { ResourceMetricsTable } from './detailed_results/resource_metrics';\nimport { PlayerDamageMetricsTable } from './detailed_results/player_damage';\nimport { AuraMetricsTable } from './detailed_results/aura_metrics'\nimport { DpsHistogram } from './detailed_results/dps_histogram';\nimport { Timeline } from './detailed_results/timeline';\nimport { ToplineResults } from './detailed_results/topline_results';\n\nimport { Component } from './component';\nimport { RaidSimResultsManager } from './raid_sim_action';\n\ndeclare var Chart: any;\n\nconst layoutHTML = `\n<div class=\"dr-root\">\n\t<div class=\"dr-toolbar\">\n\t\t<div class=\"results-filter\"></div>\n\t\t<div class=\"tabs-filler\"></div>\n\t\t<ul class=\"dr-toolbar nav nav-tabs\" role=\"tablist\">\n\t\t\t<li class=\"nav-item dr-tab-tab damage-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link active\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#damageTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"damageTab\"\n\t\t\t\t\taria-selected=\"true\"\n\t\t\t\t>DAMAGE</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab healing-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#healingTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"healingTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>HEALING</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab threat-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#damageTakenTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"damageTakenTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>DAMAGE TAKEN</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#buffsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"buffsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>BUFFS</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#debuffsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"debuffsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>DEBUFFS</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#castsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"castsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>CASTS</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#resourcesTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"resourcesTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>RESOURCES</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tid=\"timelineTabTab\"\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#timelineTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"timelineTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>TIMELINE</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t<div class=\"tab-content\">\n\t\t<div id=\"damageTab\" class=\"tab-pane dr-tab-content damage-content fade active show\">\n\t\t\t<div class=\"dr-row topline-results\">\n\t\t\t</div>\n\t\t\t<div class=\"dr-row all-players-only\">\n\t\t\t\t<div class=\"player-damage-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"melee-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row dps-histogram\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"healingTab\" class=\"tab-pane dr-tab-content healing-content fade\">\n\t\t\t<div class=\"dr-row topline-results\">\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"healing-spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row hps-histogram\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"damageTakenTab\" class=\"tab-pane dr-tab-content damage-taken-content fade\">\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"dtps-melee-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"dtps-spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row damage-taken-histogram single-player-only\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"buffsTab\" class=\"tab-pane dr-tab-content buffs-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"buff-aura-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"debuffsTab\" class=\"tab-pane dr-tab-content debuffs-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"debuff-aura-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"castsTab\" class=\"tab-pane dr-tab-content casts-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"cast-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"resourcesTab\" class=\"tab-pane dr-tab-content resources-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"resource-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"timelineTab\" class=\"tab-pane dr-tab-content timeline-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"timeline\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n`;\n\nexport abstract class DetailedResults extends Component {\n\tprotected readonly simUI: SimUI | null;\n\tprotected latestRun: SimRunData | null = null;\n\n\tprivate currentSimResult: SimResult | null = null;\n\tprivate resultsEmitter: TypedEvent<SimResultData | null> = new TypedEvent<SimResultData | null>();\n\tprivate resultsFilter: ResultsFilter;\n\n\tconstructor(parent: HTMLElement, simUI: SimUI | null, cssScheme: string) {\n\t\tsuper(parent, 'detailed-results-manager-root');\n\t\tthis.rootElem.innerHTML = layoutHTML;\n\t\tthis.simUI = simUI;\n\n\t\tthis.simUI?.sim.settingsChangeEmitter.on(async () => await this.updateSettings());\n\n\t\tChart.defaults.color = 'white';\n\n\t\tthis.resultsFilter = new ResultsFilter({\n\t\t\tparent: this.rootElem.getElementsByClassName('results-filter')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\t(Array.from(this.rootElem.getElementsByClassName('topline-results')) as Array<HTMLElement>).forEach(toplineResultsDiv => {\n\t\t\tnew ToplineResults({ parent: toplineResultsDiv, resultsEmitter: this.resultsEmitter });\n\t\t});\n\n\t\tconst castMetrics = new CastMetricsTable({ parent: this.rootElem.getElementsByClassName('cast-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst meleeMetrics = new MeleeMetricsTable({ parent: this.rootElem.getElementsByClassName('melee-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst spellMetrics = new SpellMetricsTable({ parent: this.rootElem.getElementsByClassName('spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst healingMetrics = new HealingMetricsTable({ parent: this.rootElem.getElementsByClassName('healing-spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst resourceMetrics = new ResourceMetricsTable({ parent: this.rootElem.getElementsByClassName('resource-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst playerDamageMetrics = new PlayerDamageMetricsTable({ parent: this.rootElem.getElementsByClassName('player-damage-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter }, this.resultsFilter);\n\t\tconst buffAuraMetrics = new AuraMetricsTable({\n\t\t\tparent: this.rootElem.getElementsByClassName('buff-aura-metrics')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t}, false);\n\t\tconst debuffAuraMetrics = new AuraMetricsTable({\n\t\t\tparent: this.rootElem.getElementsByClassName('debuff-aura-metrics')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t}, true);\n\t\tconst dpsHistogram = new DpsHistogram({ parent: this.rootElem.getElementsByClassName('dps-histogram')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\n\t\tconst dtpsMeleeMetrics = new DtpsMeleeMetricsTable({ parent: this.rootElem.getElementsByClassName('dtps-melee-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst dtpsSpellMetrics = new DtpsSpellMetricsTable({ parent: this.rootElem.getElementsByClassName('dtps-spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\n\t\tconst timeline = new Timeline({\n\t\t\tparent: this.rootElem.getElementsByClassName('timeline')[0] as HTMLElement,\n\t\t\tcssScheme: cssScheme,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tdocument.getElementById('timelineTabTab')?.addEventListener('click', event => timeline.render());\n\n\t\tthis.rootElem.classList.add('hide-threat-metrics');\n\t\tthis.rootElem.classList.add('hide-healing-metrics');\n\n\t\tthis.resultsFilter.changeEmitter.on(() => this.updateResults());\n\n\t\tconst rootDiv = this.rootElem.getElementsByClassName('dr-root')[0] as HTMLElement;\n\t\tthis.resultsEmitter.on((eventID, resultData) => {\n\t\t\tif (resultData?.filter.player || resultData?.filter.player === 0) {\n\t\t\t\trootDiv.classList.remove('all-players');\n\t\t\t\trootDiv.classList.add('single-player');\n\t\t\t} else {\n\t\t\t\trootDiv.classList.add('all-players');\n\t\t\t\trootDiv.classList.remove('single-player');\n\t\t\t}\n\t\t});\n\t}\n\n\tabstract postMessage(update: DetailedResultsUpdate) : Promise<void>;\n\n\tprotected async setSimRunData(simRunData: SimRunData) {\n\t\tthis.latestRun = simRunData;\n\t\tawait this.postMessage(DetailedResultsUpdate.create({\n\t\t\tdata: {\n\t\t\t\toneofKind: 'runData',\n\t\t\t\trunData: simRunData,\n\t\t\t},\n\t\t}));\n\t}\n\n\tprotected async updateSettings() {\n\t\tif (!this.simUI)\n\t\t\treturn\n\t\tawait this.postMessage(DetailedResultsUpdate.create({\n\t\t\tdata: {\n\t\t\t\toneofKind: 'settings',\n\t\t\t\tsettings: this.simUI.sim.toProto(),\n\t\t\t},\n\t\t}));\n\t}\n\n\tprivate updateResults() {\n\t\tconst eventID = TypedEvent.nextEventID();\n\t\tif (this.currentSimResult == null) {\n\t\t\tthis.resultsEmitter.emit(eventID, null);\n\t\t} else {\n\t\t\tthis.resultsEmitter.emit(eventID, {\n\t\t\t\teventID: eventID,\n\t\t\t\tresult: this.currentSimResult,\n\t\t\t\tfilter: this.resultsFilter.getFilter(),\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected async handleMessage(data: DetailedResultsUpdate) {\n\t\tswitch (data.data.oneofKind) {\n\t\t\tcase 'runData':\n\t\t\t\tconst runData = data.data.runData;\n\t\t\t\tthis.currentSimResult = await SimResult.fromProto(runData.run || SimRun.create());\n\t\t\t\tthis.updateResults();\n\t\t\t\tbreak;\n\t\t\tcase 'settings':\n\t\t\t\tconst settings = data.data.settings;\n\t\t\t\tif (settings.showDamageMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-damage-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-damage-metrics');\n\t\t\t\t\tif (document.getElementById('damageTab')!.classList.contains('active')) {\n\t\t\t\t\t\tdocument.getElementById('damageTab')!.classList.remove('active', 'show');\n\t\t\t\t\t\tdocument.getElementById('healingTab')!.classList.add('active', 'show');\n\n\t\t\t\t\t\tconst toolbar = document.getElementsByClassName('dr-toolbar')[0] as HTMLElement;\n\t\t\t\t\t\t(toolbar.getElementsByClassName('damage-metrics')[0] as HTMLElement).children[0]!.classList.remove('active');\n\t\t\t\t\t\t(toolbar.getElementsByClassName('healing-metrics')[0] as HTMLElement).children[0]!.classList.add('active');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (settings.showThreatMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-threat-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-threat-metrics');\n\t\t\t\t}\n\t\t\t\tif (settings.showHealingMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-healing-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-healing-metrics');\n\t\t\t\t}\n\t\t\t\tif (settings.showExperimental) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-experimental');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-experimental');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\nexport class WindowedDetailedResults extends DetailedResults {\n\tconstructor(parent: HTMLElement) {\n\t\tsuper(parent, null, new URLSearchParams(window.location.search).get(\"cssScheme\") ?? \"\")\n\n\t\twindow.addEventListener('message', \n\t\t\tasync (event) => await this.handleMessage(DetailedResultsUpdate.fromJson(event.data))\n\t\t);\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate): Promise<void> {\n\t\tawait this.handleMessage(update);\n\t}\n}\n\nexport class EmbeddedDetailedResults extends DetailedResults {\n\tprivate tabWindow: Window | null = null;\n\t\n\tconstructor(parent: HTMLElement, simUI: SimUI, simResultsManager: RaidSimResultsManager) {\n\t\tsuper(parent, simUI, simUI.cssScheme)\n\n\t\tconst newTabBtn = document.createElement('div');\n\t\tnewTabBtn.classList.add('detailed-results-controls-div');\n\t\tnewTabBtn.innerHTML = `<button class=\"detailed-results-new-tab-button btn btn-primary\">View in Separate Tab</button>`;\n\n\t\tthis.rootElem.prepend(newTabBtn);\n\n\t\tconst computedStyles = window.getComputedStyle(this.rootElem);\n\n\t\tconst url = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/detailed_results/index.html`);\n\t\turl.searchParams.append('cssClass', simUI.cssClass);\n\n\t\tif (simUI.isIndividualSim()) {\n\t\t\turl.searchParams.append('isIndividualSim', '');\n\t\t\tthis.rootElem.classList.add('individual-sim');\n\t\t}\n\n\t\tconst newTabButton = this.rootElem.getElementsByClassName('detailed-results-new-tab-button')[0] as HTMLButtonElement;\n\t\tnewTabButton.addEventListener('click', event => {\n\t\t\tif (this.tabWindow == null || this.tabWindow.closed) {\n\t\t\t\tthis.tabWindow = window.open(url.href, 'Detailed Results');\n\t\t\t\tthis.tabWindow!.addEventListener('load', async event => {\n\t\t\t\t\tif (this.latestRun) {\n\t\t\t\t\t\tawait this.updateSettings();\n\t\t\t\t\t\tawait this.setSimRunData(this.latestRun);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.tabWindow.focus();\n\t\t\t}\n\t\t});\n\n\t\tsimResultsManager.currentChangeEmitter.on(async () => {\n\t\t\tconst runData = simResultsManager.getRunData();\n\t\t\tif (runData) {\n\t\t\t\tawait this.updateSettings();\n\t\t\t\tawait this.setSimRunData(runData);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate) {\n\t\tif (this.tabWindow) {\n\t\t\tthis.tabWindow.postMessage(DetailedResultsUpdate.toJson(update), '*');\n\t\t}\n\t\tawait this.handleMessage(update);\n\t}\n}\n"],"names":["typeofJsonValue","value","t","Array","isArray","encTable","split","decTable","i","length","charCodeAt","indexOf","fromCharCodes","chunk","String","fromCharCode","apply","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","int64fromString","dec","minus","slice","base","add1e6digit","begin","end","digit1e6","Number","TWO_PWR_32_DBL","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","Math","floor","varint32write","varint32read","result","readBytes","BI","dv","DataView","ArrayBuffer","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","assertBi","bi","RE_DECIMAL_STR","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","static","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","BinaryReader","varint64","uint32","len","view","buffer","byteOffset","byteLength","tag","fieldNo","wireType","skip","start","WireType","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","parts","join","utf8read","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","prev","pop","raw","type","encode","setFloat32","setFloat64","setUint32","long","from","sign","UnknownFieldHandler","symbol","Symbol","onRead","typeName","message","data","is","no","onWrite","writer","list","all","filter","uf","last","defaultsRead","readUnknownField","readerFactory","defaultsWrite","writeUnknownFields","writerFactory","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","name","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","Object","keys","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","includes","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","substring","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","es","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","assign","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","Spec","Race","Faction","Class","Profession","Stat","PseudoStat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TristateEffect","Explosive","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","PetFood","MobType","InputType","EnchantType","OtherAction","UnitStats","super","stats","pseudoStats","RaidBuffs","giftOfTheWild","powerWordFortitude","commandingShout","bloodPact","hornOfWinter","strengthOfEarthTotem","arcaneBrilliance","felIntelligence","divineSpirit","battleShout","trueshotAura","unleashedRage","abominationsMight","leaderOfThePack","rampage","icyTalons","windfuryTotem","totemOfWrath","flametongueTotem","demonicPactOld","demonicPact","demonicPactSp","swiftRetribution","moonkinAura","elementalOath","wrathOfAirTotem","ferociousInspiration","sanctifiedRetribution","arcaneEmpowerment","manaSpringTotem","bloodlust","thorns","devotionAura","stoneskinTotem","retributionAura","shadowProtection","drumsOfForgottenKings","drumsOfTheWild","scrollOfProtection","scrollOfStamina","scrollOfStrength","scrollOfAgility","scrollOfIntellect","scrollOfSpirit","PartyBuffs","atieshMage","atieshWarlock","braidedEterniumChain","eyeOfTheNight","chainOfTheTwilightOwl","manaTideTotems","heroicPresence","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","blessingOfSanctuary","vigilance","renewedHope","hymnOfHope","handOfSalvation","rapture","innervates","powerInfusions","unholyFrenzy","revitalizeRejuvination","revitalizeWildGrowth","tricksOfTheTrades","divineGuardians","painSuppressions","shatteringThrows","vampiricTouch","huntingParty","judgementsOfTheWise","improvedSoulLeech","enduringWinter","focusMagic","Consumes","flask","battleElixir","guardianElixir","food","petFood","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","thermalSapper","explosiveDecoy","fillerExplosive","Debuffs","judgementOfWisdom","judgementOfLight","misery","faerieFire","curseOfElements","ebonPlaguebringer","earthAndMoon","heartOfTheCrusader","masterPoisoner","shadowMastery","improvedScorch","wintersChill","bloodFrenzy","savageCombat","giftOfArthas","mangle","trauma","stampede","exposeArmor","sunderArmor","acidSpit","curseOfWeakness","sting","sporeCloud","demoralizingRoar","demoralizingShout","vindication","demoralizingScreech","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","insectSwarm","scorpidSting","shadowEmbrace","huntersMark","TargetInput","inputType","label","tooltip","boolValue","numberValue","Target","id","level","mobType","minBaseDamage","swingSpeed","dualWield","dualWieldPenalty","parryHaste","tightEnemyDamage","suppressDodge","spellSchool","tankIndex","targetInputs","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","useHealth","targets","PresetTarget","path","PresetEncounter","ItemSpec","enchant","gems","EquipmentSpec","items","SimDatabase","SimItem","SimEnchant","SimGem","enchants","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","setName","effectId","color","RaidTarget","targetIndex","ActionID","rawId","spellId","itemId","otherId","Glyphs","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","inspirationUptime","burstWindow","CustomRotation","CustomSpell","spells","spell","castsPerMinute","ItemSwap","mhItem","ohItem","rangedItem","Duration","ms","APLValueCompare_ComparisonOperator","APLRotation","APLPrepullAction","APLListItem","enabled","prepullActions","priorityList","APLAction","hide","notes","action","APLValue","APLActionSequence","APLActionCastSpell","APLActionWait","sequence","castSpell","wait","APLValueConst","APLValueAnd","APLValueOr","APLValueNot","APLValueCompare","APLValueDotIsActive","const","and","or","not","cmp","dotIsActive","doAt","actions","vals","op","lhs","rhs","Deathknight_Rotation_DrwDiseases","Deathknight_Rotation_ArmyOfTheDead","Deathknight_Rotation_BloodTap","Deathknight_Rotation_DeathAndDecayPrio","Deathknight_Rotation_FirstDisease","Deathknight_Rotation_BloodRuneFiller","Deathknight_Rotation_Presence","Deathknight_Rotation_FrostRotationType","Deathknight_Rotation_BloodOpener","Deathknight_Rotation_BloodSpell","Deathknight_Rotation_CustomSpellOption","TankDeathknight_Rotation_Opener","TankDeathknight_Rotation_OptimizationSetting","TankDeathknight_Rotation_BloodSpell","TankDeathknight_Rotation_BloodTapPrio","TankDeathknight_Rotation_Presence","DeathknightMajorGlyph","DeathknightMinorGlyph","DeathknightTalents","butchery","subversion","bladeBarrier","bladedArmor","scentOfBlood","twoHandedWeaponSpecialization","runeTap","darkConviction","deathRuneMastery","improvedRuneTap","spellDeflection","vendetta","bloodyStrikes","veteranOfTheThirdWar","markOfBlood","bloodyVengeance","bloodworms","hysteria","improvedBloodPresence","improvedDeathStrike","suddenDoom","vampiricBlood","willOfTheNecropolis","heartStrike","mightOfMograine","bloodGorged","dancingRuneWeapon","improvedIcyTouch","runicPowerMastery","toughness","icyReach","blackIce","nervesOfColdSteel","lichborne","annihilation","killingMachine","chillOfTheGrave","endlessWinter","frigidDreadplate","glacierRot","deathchill","improvedIcyTalons","mercilessCombat","rime","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","bloodOfTheNorth","unbreakableArmor","acclimation","frostStrike","guileOfGorefiend","tundraStalker","howlingBlast","viciousStrikes","virulence","anticipation","epidemic","morbidity","unholyCommand","ravenousDead","outbreak","necrosis","corpseExplosion","onAPaleHorse","bloodCakedBlade","nightOfTheDead","unholyBlight","impurity","dirge","desecration","magicSuppression","reaping","masterOfGhouls","desolation","antiMagicZone","improvedUnholyPresence","ghoulFrenzy","cryptFever","boneShield","wanderingPlague","scourgeStrike","rageOfRivendare","summonGargoyle","Deathknight","Deathknight_Rotation","Deathknight_Options","rotation","frostRotationType","armyOfTheDead","useDeathAndDecay","btGhoulFrenzy","diseaseRefreshDuration","refreshHornOfWinter","firstDisease","deathAndDecayPrio","useEmpowerRuneWeapon","bloodRuneFiller","startingPresence","bloodTap","useAms","avgAmsSuccessRate","avgAmsHit","autoRotation","desyncRotation","blPresence","presence","holdErwArmy","useGargoyle","preNerfedGargoyle","gargoylePresence","drwDiseases","bloodOpener","enableWeaponSwap","useDancingRuneWeapon","bloodSpender","frostCustomRotation","weaponSwap","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","drwPestiApply","unholyFrenzyTarget","TankDeathknight","TankDeathknight_Rotation","TankDeathknight_Options","opener","optimizationSetting","bloodSpell","bloodTapPrio","defensiveDelay","Warrior_Rotation_MainGcd","Warrior_Rotation_SunderArmor","Warrior_Rotation_StanceOption","Warrior_Rotation_SpellOption","ProtectionWarrior_Rotation_DemoShoutChoice","ProtectionWarrior_Rotation_ThunderClapChoice","ProtectionWarrior_Rotation_SpellOption","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","improvedHeroicStrike","deflection","improvedRend","improvedCharge","ironWill","tacticalMastery","improvedOverpower","angerManagement","impale","deepWounds","tasteForBlood","poleaxeSpecialization","sweepingStrikes","maceSpecialization","swordSpecialization","weaponMastery","improvedHamstring","secondWind","mortalStrike","strengthOfArms","improvedSlam","juggernaut","improvedMortalStrike","unrelentingAssault","suddenDeath","endlessRage","wreckingCrew","bladestorm","armoredToTheTeeth","boomingVoice","cruelty","improvedDemoralizingShout","unbridledWrath","improvedCleave","piercingHowl","bloodCraze","commandingPresence","dualWieldSpecialization","improvedExecute","enrage","precision","deathWish","improvedIntercept","improvedBerserkerRage","flurry","intensifyRage","bloodthirst","improvedWhirlwind","furiousAttacks","improvedBerserkerStance","heroicFury","bloodsurge","unendingFury","titansGrip","improvedBloodrage","shieldSpecialization","improvedThunderClap","incite","lastStand","improvedRevenge","shieldMastery","improvedSpellReflection","improvedDisarm","puncture","improvedDisciplines","concussionBlow","gagOrder","oneHandedWeaponSpecialization","improvedDefensiveStance","focusedRage","vitality","safeguard","warbringer","devastate","criticalBlock","swordAndBoard","damageShield","shockwave","Warrior","Warrior_Rotation","Warrior_Options","useCleave","useRend","useMs","useSlam","mainGcd","maintainDemoShout","maintainThunderClap","hsRageThreshold","msRageThreshold","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","spamExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","rendHealthThresholdAbove","useOverpower","executePhaseOverpower","customRotationOption","customRotation","startingRage","useRecklessness","useShatteringThrow","shout","munch","stanceSnapshot","ProtectionWarrior","ProtectionWarrior_Rotation","ProtectionWarrior_Options","demoShoutChoice","thunderClapChoice","prioSslamOnShieldBlock","Warlock_Rotation_Preset","Warlock_Rotation_Type","Warlock_Rotation_PrimarySpell","Warlock_Rotation_Curse","Warlock_Rotation_SecondaryDot","Warlock_Rotation_SpecSpell","Warlock_Options_Summon","Warlock_Options_Armor","Warlock_Options_WeaponImbue","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","improvedCurseOfAgony","suppression","improvedCorruption","improvedCurseOfWeakness","improvedDrainSoul","improvedLifeTap","soulSiphon","improvedFear","felConcentration","amplifyCurse","grimReach","nightfall","empoweredCorruption","siphonLife","curseOfExhaustion","improvedFelhunter","eradication","contagion","darkPact","improvedHowlOfTerror","malediction","deathsEmbrace","unstableAffliction","pandemic","everlastingAffliction","haunt","improvedHealthstone","improvedImp","demonicEmbrace","felSynergy","improvedHealthFunnel","demonicBrutality","felVitality","improvedSayaad","soulLink","felDomination","demonicAegis","unholyPower","masterSummoner","manaFeed","masterConjuror","masterDemonologist","moltenCore","demonicResilience","demonicEmpowerment","demonicKnowledge","demonicTactics","decimation","improvedDemonicTactics","summonFelguard","nemesis","metamorphosis","improvedShadowBolt","bane","aftermath","moltenSkin","cataclysm","demonicPower","shadowburn","ruin","intensity","destructiveReach","improvedSearingPain","backlash","improvedImmolate","devastation","netherProtection","emberstorm","conflagrate","soulLeech","pyroclasm","shadowAndFlame","backdraft","shadowfury","empoweredImp","fireAndBrimstone","chaosBolt","Warlock","Warlock_Rotation","Warlock_Options","preset","curse","primarySpell","secondaryDot","corruption","detonateSeed","specSpell","useInfernal","armor","summon","weaponImbue","ElementalShaman_Rotation_RotationType","EnhancementShaman_Rotation_RotationType","EnhancementShaman_Rotation_CustomRotationSpell","EnhancementShaman_Rotation_PrimaryShock","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanHealSpell","ShamanTalents","convection","concussion","callOfFlame","elementalWarding","elementalDevastation","reverberation","elementalFocus","elementalFury","improvedFireNova","eyeOfTheStorm","elementalReach","callOfThunder","unrelentingStorm","elementalPrecision","lightningMastery","elementalMastery","stormEarthAndFire","boomingEchoes","lightningOverload","astralShift","lavaFlows","shamanism","thunderstorm","enhancingTotems","earthsGrasp","ancestralKnowledge","guardianTotems","thunderingStrikes","improvedGhostWolf","improvedShields","elementalWeapons","shamanisticFocus","improvedWindfuryTotem","spiritWeapons","mentalDexterity","frozenPower","stormstrike","staticShock","lavaLash","improvedStormstrike","mentalQuickness","shamanisticRage","earthenPower","maelstromWeapon","feralSpirit","improvedHealingWave","totemicFocus","improvedReincarnation","healingGrace","tidalFocus","improvedWaterShield","healingFocus","tidalForce","ancestralHealing","restorativeTotems","tidalMastery","healingWay","naturesSwiftness","focusedMind","purification","naturesGuardian","manaTideTotem","cleanseSpirit","blessingOfTheEternals","improvedChainHeal","naturesBlessing","ancestralAwakening","earthShield","improvedEarthShield","tidalWaves","riptide","ShamanTotems","earth","air","fire","water","useManaTide","useFireElemental","recallFireElementalOnOom","recallTotems","useFireMcd","ElementalShaman","ElementalShaman_Rotation","ElementalShaman_Options","inThunderstormRange","useFireNova","fnMinManaPer","useChainLightning","useClOnlyGap","clMinManaPer","overwriteFlameshock","alwaysCritLvb","useThunderstorm","lvbFsWaitMs","totems","shield","EnhancementShaman","EnhancementShaman_Rotation","EnhancementShaman_Options","rotationType","lavaburstWeave","lightningboltWeave","maelstromweaponMinStack","autoWeaveDelay","firenovaManaThreshold","shamanisticRageManaThreshold","weaveFlameShock","primaryShock","flameShockClipTicks","delayGcdWeave","enableItemSwap","itemSwap","syncType","imbueMh","imbueOh","RestorationShaman","RestorationShaman_Rotation","RestorationShaman_Options","useEarthShield","primaryHeal","useRiptide","earthShieldPPM","Rogue_Rotation_Frequency","Rogue_Rotation_CombatPriority","Rogue_Rotation_CombatBuilder","Rogue_Rotation_AssassinationPriority","Rogue_Rotation_SubtletyPriority","Rogue_Options_PoisonImbue","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","improvedEviscerate","remorselessAttacks","malice","ruthlessness","bloodSpatter","puncturingWounds","vigor","improvedExposeArmor","lethality","vilePoisons","improvedPoisons","fleetFooted","coldBlood","improvedKidneyShot","quickRecovery","sealFate","murder","deadlyBrew","overkill","deadenedNerves","focusedAttacks","findWeakness","mutilate","turnTheTables","cutToTheChase","hungerForBlood","improvedGouge","improvedSinisterStrike","improvedSliceAndDice","endurance","riposte","closeQuartersCombat","improvedKick","improvedSprint","lightningReflexes","aggression","bladeFlurry","hackAndSlash","weaponExpertise","bladeTwisting","adrenalineRush","nervesOfSteel","throwingSpecialization","combatPotency","unfairAdvantage","surpriseAttacks","preyOnTheWeak","killingSpree","relentlessStrikes","masterOfDeception","opportunity","sleightOfHand","dirtyTricks","camouflage","elusiveness","ghostlyStrike","serratedBlades","setup","initiative","improvedAmbush","heightenedSenses","preparation","dirtyDeeds","hemorrhage","masterOfSubtlety","deadliness","envelopingShadows","premeditation","cheatDeath","sinisterCalling","waylay","honorAmongThieves","shadowstep","filthyTricks","slaughterFromTheShadows","shadowDance","Rogue","Rogue_Rotation","Rogue_Options","exposeArmorFrequency","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","combatFinisherPriority","combatBuilder","assassinationFinisherPriority","subtletyFinisherPriority","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","multiTargetSliceFrequency","minimumComboPointsMultiTargetSlice","useFeint","openWithGarrote","openWithPremeditation","openWithShadowstep","ruptureForBleed","hemoWithDagger","useGhostlyStrike","mhImbue","ohImbue","startingOverkillDuration","applyPoisonsManually","honorOfThievesCritRate","tricksOfTheTradeTarget","ShadowPriest_Rotation_RotationType","ShadowPriest_Rotation_PreCastOption","ShadowPriest_Options_Armor","HealingPriest_Rotation_RotationType","HealingPriest_Rotation_SpellOption","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","unbreakableWill","twinDisciplines","silentResolve","improvedInnerFire","improvedPowerWordFortitude","martyrdom","meditation","innerFocus","improvedPowerWordShield","absolution","mentalAgility","improvedManaBurn","reflectiveShield","mentalStrength","soulWarding","focusedPower","enlightenment","focusedWill","powerInfusion","improvedFlashHeal","aspiration","divineAegis","painSuppression","grace","borrowedTime","penance","improvedRenew","holySpecialization","spellWarding","divineFury","desperatePrayer","blessedRecovery","inspiration","holyReach","improvedHealing","searingLight","healingPrayers","spiritOfRedemption","spiritualGuidance","surgeOfLight","spiritualHealing","holyConcentration","lightwell","blessedResilience","bodyAndSoul","empoweredHealing","serendipity","empoweredRenew","circleOfHealing","testOfFaith","divineProvidence","guardianSpirit","spiritTap","improvedSpiritTap","darkness","shadowAffinity","improvedShadowWordPain","shadowFocus","improvedPsychicScream","improvedMindBlast","mindFlay","veiledShadows","shadowReach","shadowWeaving","silence","vampiricEmbrace","improvedVampiricEmbrace","mindMelt","improvedDevouringPlague","shadowform","shadowPower","improvedShadowform","psychicHorror","painAndSuffering","twistedFaith","dispersion","ShadowPriest","ShadowPriest_Rotation","ShadowPriest_Options","precastType","latency","useShadowfiend","useMindBlast","useShadowWordDeath","powerInfusionTarget","SmitePriest","SmitePriest_Rotation","SmitePriest_Options","useDevouringPlague","memeDream","allowedHolyFireDelayMs","useInnerFire","HealingPriest","HealingPriest_Rotation","HealingPriest_Options","rapturesPerMinute","RetributionPaladin_Rotation_SpellOption","RetributionPaladin_Rotation_RotationType","ProtectionPaladin_Rotation_SpellOption","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","spiritualFocus","sealsOfThePure","healingLight","divineIntellect","unyieldingFaith","auraMastery","illumination","improvedLayOnHands","improvedConcentrationAura","improvedBlessingOfWisdom","blessedHands","pureOfHeart","divineFavor","sanctifiedLight","purifyingPower","holyPower","lightsGrace","holyShock","blessedLife","sacredCleansing","holyGuidance","divineIllumination","judgementsOfThePure","infusionOfLight","enlightenedJudgements","beaconOfLight","divinity","divineStrength","stoicism","guardiansFavor","divineSacrifice","improvedRighteousFury","divineGuardian","improvedHammerOfJustice","improvedDevotionAura","reckoning","sacredDuty","spiritualAttunement","holyShield","ardentDefender","redoubt","combatExpertise","touchedByTheLight","avengersShield","guardedByTheLight","shieldOfTheTemplar","hammerOfTheRighteous","benediction","improvedJudgements","improvedBlessingOfMight","conviction","sealOfCommand","pursuitOfJustice","eyeForAnEye","sanctityOfBattle","crusade","vengeance","divinePurpose","theArtOfWar","repentance","fanaticism","sanctifiedWrath","crusaderStrike","sheathOfLight","righteousVengeance","divineStorm","RetributionPaladin","RetributionPaladin_Rotation","RetributionPaladin_Options","exoSlack","consSlack","divinePleaPercentage","holyWrathThreshold","sovTargets","useDivinePlea","avoidClippingConsecration","holdLastAvengingWrathUntilExecution","customCastSequence","judgement","seal","aura","useAvengingWrath","ProtectionPaladin","ProtectionPaladin_Rotation","ProtectionPaladin_Options","hammerFirst","useCustomPrio","squeezeHolyWrath","waitSlack","HolyPaladin","HolyPaladin_Rotation","HolyPaladin_Options","Mage_Rotation_Type","Mage_Rotation_PrimaryFireSpell","Mage_Rotation_AoeRotation","Mage_Options_ArmorType","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneSubtlety","arcaneFocus","arcaneStability","arcaneFortitude","magicAbsorption","arcaneConcentration","magicAttunement","spellImpact","studentOfTheMind","arcaneShielding","improvedCounterspell","arcaneMeditation","tormentTheWeak","improvedBlink","presenceOfMind","arcaneMind","prismaticCloak","arcaneInstability","arcanePotency","arcanePower","incantersAbsorption","arcaneFlows","mindMastery","slow","missileBarrage","netherwindPresence","spellPower","arcaneBarrage","improvedFireBlast","incineration","improvedFireball","ignite","burningDetermination","worldInFlames","flameThrowing","impact","pyroblast","burningSoul","moltenShields","masterOfElements","playingWithFire","criticalMass","blastWave","blazingSpeed","firePower","pyromaniac","combustion","moltenFury","fieryPayback","empoweredFire","firestarter","dragonsBreath","hotStreak","burnout","livingBomb","frostbite","improvedFrostbolt","iceFloes","iceShards","frostWarding","permafrost","piercingIce","icyVeins","improvedBlizzard","arcticReach","frostChanneling","shatter","coldSnap","improvedConeOfCold","frozenCore","coldAsIce","shatteredBarrier","iceBarrier","arcticWinds","empoweredFrostbolt","fingersOfFrost","brainFreeze","summonWaterElemental","chilledToTheBone","deepFreeze","Mage","Mage_Rotation","Mage_Options","extraBlastsDuringFirstAp","missileBarrageBelowArcaneBlastStacks","missileBarrageBelowManaPercent","blastWithoutMissileBarrageAboveManaPercent","only3ArcaneBlastStacksBelowManaPercent","useArcaneBarrage","primaryFireSpell","maintainImprovedScorch","pyroblastDelayMs","useIceLance","waterElementalDisobeyChance","aoe","igniteMunching","evocationTicks","focusMagicPercentUptime","reactionTimeMs","focusMagicTarget","Hunter_Rotation_RotationType","Hunter_Rotation_StingType","Hunter_Rotation_SpellOption","Hunter_Options_Ammo","Hunter_Options_PetType","HunterMajorGlyph","HunterMinorGlyph","HunterTalents","improvedAspectOfTheHawk","enduranceTraining","focusedFire","improvedAspectOfTheMonkey","thickHide","improvedRevivePet","pathfinding","aspectMastery","unleashedFury","improvedMendPet","ferocity","spiritBond","intimidation","bestialDiscipline","animalHandler","frenzy","bestialWrath","catlikeReflexes","invigoration","serpentsSwiftness","longevity","theBeastWithin","cobraStrikes","kindredSpirits","beastMastery","improvedConcussiveShot","focusedAim","lethalShots","carefulAim","improvedHuntersMark","mortalShots","goForTheThroat","improvedArcaneShot","aimedShot","rapidKilling","improvedStings","efficiency","concussiveBarrage","readiness","barrage","combatExperience","rangedWeaponSpecialization","piercingShots","improvedBarrage","masterMarksman","rapidRecuperation","wildQuiver","silencingShot","improvedSteadyShot","markedForDeath","chimeraShot","improvedTracking","hawkEye","savageStrikes","surefooted","entrapment","trapMastery","survivalInstincts","survivalist","scatterShot","survivalTactics","tNT","lockAndLoad","hunterVsWild","killerInstinct","counterattack","resourcefulness","exposeWeakness","wyvernSting","thrillOfTheHunt","masterTactician","noxiousStings","pointOfNoEscape","blackArrow","sniperTraining","explosiveShot","HunterPetTalents","cobraReflexes","dive","greatStamina","naturalArmor","boarsSpeed","mobility","owlsFocus","spikedCollar","cullingTheHerd","lionhearted","carrionFeeder","greatResistance","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","graceOfTheMantis","wildHunt","roarOfSacrifice","improvedCower","bloodthirsty","heartOfThePheonix","spidersBite","rabid","lickYourWounds","callOfTheWild","sharkAttack","charge","bloodOfTheRhino","petBarding","guardDog","thunderstomp","taunt","intervene","silverback","Hunter","Hunter_Rotation","Hunter_Options","trapWeave","timeToTrapWeaveMs","viperStartManaPercent","viperStopManaPercent","allowExplosiveShotDownrank","ammo","petType","sniperTrainingUptime","useHuntersMark","petTalents","BalanceDruid_Rotation_Type","BalanceDruid_Rotation_MfUsage","BalanceDruid_Rotation_IsUsage","BalanceDruid_Rotation_WrathUsage","BalanceDruid_Rotation_EclipsePrio","FeralDruid_Rotation_BearweaveType","FeralDruid_Rotation_BiteModeType","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","starlightWrath","genesis","moonglow","naturesMajesty","improvedMoonfire","brambles","naturesGrace","naturesSplendor","naturesReach","celestialFocus","lunarGuidance","improvedInsectSwarm","dreamstate","moonfury","balanceOfPower","moonkinForm","improvedMoonkinForm","improvedFaerieFire","owlkinFrenzy","wrathOfCenarius","eclipse","typhoon","forceOfNature","galeWinds","starfall","feralAggression","feralInstinct","savageFury","feralSwiftness","sharpenedClaws","shreddingAttacks","predatoryStrikes","primalFury","primalPrecision","brutalImpact","feralCharge","nurturingInstinct","naturalReaction","heartOfTheWild","survivalOfTheFittest","improvedLeaderOfThePack","primalTenacity","protectorOfThePack","predatoryInstincts","kingOfTheJungle","improvedMangle","rendAndTear","primalGore","berserk","improvedMarkOfTheWild","naturesFocus","furor","naturalist","subtlety","naturalShapeshifter","omenOfClarity","masterShapeshifter","tranquilSpirit","improvedRejuvenation","giftOfNature","improvedTranquility","empoweredTouch","naturesBounty","livingSpirit","swiftmend","naturalPerfection","empoweredRejuvenation","livingSeed","revitalize","treeOfLife","improvedTreeOfLife","improvedBarkskin","giftOfTheEarthmother","wildGrowth","BalanceDruid","BalanceDruid_Rotation","BalanceDruid_Options","mfUsage","isUsage","useBattleRes","wrathUsage","useStarfire","useTyphoon","useHurricane","useSmartCooldowns","maintainFaerieFire","playerLatency","eclipsePrio","eclipseShuffling","innervateTarget","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","bearWeaveType","minCombosForRip","useRake","useBite","mangleSpam","biteTime","minCombosForBite","berserkBiteThresh","berserkFfThresh","ripLeeway","powerbear","minRoarOffset","biteModeType","hotUptime","snekWeave","flowerWeave","raidTargets","manualParams","latencyMs","prepopOoc","assumeBleedActive","prePopBerserk","FeralTankDruid","FeralTankDruid_Rotation","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","lacerateTime","RestorationDruid","RestorationDruid_Rotation","RestorationDruid_Options","ResourceType","Player","race","class","spec","talentsString","profession1","profession2","inFrontOfTarget","distanceFromTarget","equipment","consumes","bonusStats","buffs","balanceDruid","feralDruid","feralTankDruid","restorationDruid","hunter","mage","retributionPaladin","protectionPaladin","holyPaladin","healingPriest","shadowPriest","smitePriest","rogue","elementalShaman","enhancementShaman","restorationShaman","warlock","warrior","protectionWarrior","deathknight","tankDeathknight","glyphs","healingModel","database","Party","players","Raid","parties","numActiveParties","tanks","staggerStormstrikes","targetDummies","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","saveAllValues","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","healing","shielding","castTimeMs","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","max","maxSeed","min","minSeed","hist","allValues","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","auras","resources","pets","dps","dpasp","dtps","tmi","tto","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","ComputeStatsRequest","PlayerStats","sets","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","PartyStats","RaidStats","ComputeStatsResult","raidStats","StatWeightsRequest","statsToWeigh","pseudoStatsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","BulkSimResult","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","finalBulkResult","BulkSimRequest","BulkSettings","baseSettings","bulkSettings","combinations","fastMode","autoEnchant","autoGem","defaultRedGem","defaultBlueGem","defaultYellowGem","defaultMetaGem","ensureMetaReqMet","iterationsPerCombo","BulkComboResult","results","equippedGearResult","ItemSpecWithSlot","itemsAdded","unitMetrics","slot","Expansion","DungeonDifficulty","SourceFilterOption","RaidFilterOption","UIDatabase","UIItem","UIEnchant","UIGem","UIZone","UINPC","IconData","GlyphID","encounters","zones","npcs","itemIcons","spellIcons","glyphIds","expansion","zoneId","UIItemSource","icon","ilvl","phase","quality","unique","heroic","classAllowlist","requiredProfession","sources","CraftedSource","DropSource","QuestSource","SoldBySource","crafted","drop","quest","soldBy","profession","difficulty","npcId","otherName","category","npcName","extraTypes","enchantType","DatabaseFilters","armorTypes","weaponTypes","rangedWeaponTypes","raids","minMhWeaponSpeed","maxMhWeaponSpeed","minOhWeaponSpeed","maxOhWeaponSpeed","minRangedWeaponSpeed","maxRangedWeaponSpeed","oneHandedWeapons","twoHandedWeapons","matchingGemsOnly","favoriteItems","favoriteGems","favoriteEnchants","SimSettings","fixedRngSeed","showDamageMetrics","showThreatMetrics","showHealingMetrics","showExperimental","language","faction","filters","IndividualSimSettings","epWeights","epRatios","settings","epWeightsStats","SavedGearSet","gear","bonusStatsStats","SavedSettings","rotationJson","playerBuffs","SavedTalents","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","stringComparator","sum","reduce","total","cur","maxIndex","v","swap","j","arrayEquals","comparator","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","downloadString","fileName","dataStr","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","lowerIsBetter","noColor","delta","deltaStr","toFixed","textContent","classList","Boolean","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","buf2hex","x","padStart","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","has","gemMatchesSocket","gem","gemEligibleForSocket","GemColorMeta","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","getMetaGemCondition","getMetaGemConditionDescription","metaGem","CHAOTIC_SKYFLARE_DIAMOND","fromMinColors","RELENTLESS_EARTHSIEGE_DIAMOND","CHAOTIC_SKYFIRE_DIAMOND","fromCompareColors","emptyGemSocketIcons","getEmptyGemSocketIconUrl","NUM_SPECS","naturalSpecOrder","SpecBalanceDruid","SpecFeralDruid","SpecFeralTankDruid","SpecRestorationDruid","SpecHunter","SpecMage","SpecHolyPaladin","SpecProtectionPaladin","SpecRetributionPaladin","SpecHealingPriest","SpecShadowPriest","SpecSmitePriest","SpecRogue","SpecElementalShaman","SpecEnhancementShaman","SpecRestorationShaman","SpecWarlock","SpecWarrior","SpecProtectionWarrior","SpecDeathknight","SpecTankDeathknight","naturalClassOrder","ClassDeathknight","ClassDruid","ClassHunter","ClassMage","ClassPaladin","ClassPriest","ClassRogue","ClassShaman","ClassWarlock","ClassWarrior","specNames","classNames","ClassUnknown","classColors","talentTreeIcons","titleIcons","raidSimIcon","raidSimLabel","getTalentTreePoints","tree","char","getTalentPoints","getTalentTree","getSpecIcon","klass","specNumber","size","getTalentTreeIcon","specToClass","specSiteUrlTemplate","URL","protocol","host","getSpecSiteUrl","specString","str","replace","letter","startsWith","camelToSnakeCase","raidSimSiteUrl","cssClassForClass","textCssClassForClass","textCssClassForSpec","specTypeFunctions","rotationCreate","BalanceDruidRotation","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","obj","rotationFromPlayer","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","optionsCreate","BalanceDruidOptions","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","FeralDruidRotation","FeralDruidOptions","FeralTankDruidRotation","FeralTankDruidOptions","RestorationDruidRotation","RestorationDruidOptions","ElementalShamanRotation","ElementalShamanOptions","EnhancementShamanRotation","EnhancementShamanOptions","RestorationShamanRotation","RestorationShamanOptions","HunterRotation","HunterOptions","MageRotation","MageOptions","HolyPaladinRotation","HolyPaladinOptions","ProtectionPaladinRotation","ProtectionPaladinOptions","RetributionPaladinRotation","RetributionPaladinOptions","RogueRotation","RogueOptions","HealingPriestRotation","HealingPriestOptions","ShadowPriestRotation","ShadowPriestOptions","SmitePriestRotation","SmitePriestOptions","WarlockRotation","WarlockOptions","WarriorRotation","WarriorOptions","ProtectionWarriorRotation","ProtectionWarriorOptions","DeathknightRotation","DeathknightOptions","TankDeathknightRotation","TankDeathknightOptions","raceToFaction","RaceUnknown","Unknown","RaceBloodElf","Horde","RaceDraenei","Alliance","RaceDwarf","RaceGnome","RaceHuman","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","druidRaces","hunterRaces","mageRaces","paladinRaces","priestRaces","rogueRaces","shamanRaces","warlockRaces","warriorRaces","deathKnightRaces","specToEligibleRaces","dualWieldSpecs","isDualWieldSpec","tankSpecs","isTankSpec","healingSpecs","isHealingSpec","rangedDpsSpecs","isRangedDpsSpec","isMeleeDpsSpec","specToLocalStorageKey","withSpecProto","specOptions","playerToSpec","specValues","classToMaxArmorType","ArmorTypeUnknown","ArmorTypeLeather","ArmorTypeMail","ArmorTypeCloth","ArmorTypePlate","classToEligibleRangedWeaponTypes","RangedWeaponTypeIdol","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","RangedWeaponTypeThrown","RangedWeaponTypeWand","RangedWeaponTypeLibram","RangedWeaponTypeTotem","RangedWeaponTypeSigil","classToEligibleWeaponTypes","WeaponTypeDagger","WeaponTypeFist","WeaponTypeMace","canUseTwoHand","WeaponTypeOffHand","WeaponTypeStaff","WeaponTypePolearm","WeaponTypeAxe","WeaponTypeSword","WeaponTypeShield","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","playerStats","Gems.CHAOTIC_SKYFIRE_DIAMOND","Gems.CHAOTIC_SKYFLARE_DIAMOND","getStat","StatSpellPower","StatSpellCrit","_","Gems.RELENTLESS_EARTHSIEGE_DIAMOND","getMetaGemEffectEP","canEquipItem","playerClass","ItemTypeFinger","ItemTypeTrinket","ItemTypeWeapon","eligibleWeaponType","wt","HandTypeOffHand","HandTypeOneHand","ItemSlotOffHand","HandTypeTwoHand","ItemTypeRanged","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemSlotFinger1","ItemSlotFinger2","ItemSlotTrinket1","ItemSlotTrinket2","ItemSlotRanged","getEligibleItemSlots","HandTypeMainHand","ItemSlotMainHand","Item","getEligibleEnchantSlots","Enchant","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","EnchantTypeShield","EnchantTypeStaff","canEquipEnchant","NO_TARGET","newRaidTarget","raidIndex","emptyRaidTarget","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","makeDefaultBlessings","BlessingOfKings","BlessingOfWisdom","BlessingOfMight","BlessingOfSanctuary","BlessingOfSalvation","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","AL_CATEGORY_HARD_MODE","wowheadSupportedLanguages","en","cn","de","fr","it","ko","pt","ru","getBrowserLanguageCode","browserLang","navigator","getLanguageCode","cachedLanguageCode_","getWowheadLanguagePrefix","cachedWowheadLanguagePrefix_","setLanguageCode","newLang","ActionId","baseName","iconUrl","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","anyId","other","equalsIgnoringTag","setBackground","style","backgroundImage","setWowheadHref","href","makeItemUrl","makeSpellUrl","setBackgroundAndHref","async","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","toProto","protoId","ActionIdProto","withoutTag","petName","petNameToActionId","petNameToIcon","fromItemId","fromSpellId","fromOtherId","fromEmpty","match","idType","console","warn","iconLabel","actionId","Database","getItemIconData","getSpellIconData","Shadowfiend","Bloodworm","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Infernal","Gargoyle","Ghoul","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","ResourceTypeNone","armorTypeNames","weaponTypeNames","WeaponTypeUnknown","rangedWeaponTypeNames","RangedWeaponTypeUnknown","raceNames","nameToRace","normalized","replaceAll","nameToClass","lower","charClass","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Jewelcrafting","Leatherworking","Mining","Skinning","Tailoring","nameToProfession","prof","statOrder","StatHealth","StatMana","StatArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatSpellHit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatEnergy","StatRage","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","StatBonusArmor","PseudoStatMainHandDps","PseudoStatOffHandDps","PseudoStatRangedDps","PseudoStatBlockValueMultiplier","pseudoStatNames","PseudoStatDodge","PseudoStatParry","getClassStatName","stat","statName","slotNames","resourceNames","sourceNames","SourceUnknown","SourceCrafting","SourceQuest","SourceDungeon","SourceDungeonH","SourceRaid10","SourceRaid10H","SourceRaid25","SourceRaid25H","raidNames","RaidUnknown","RaidVanilla","RaidTbc","RaidNaxxramas","RaidEyeOfEternity","RaidObsidianSanctum","RaidVaultOfArchavon","RaidUlduar","RaidTrialOfTheCrusader","RaidOnyxiasLair","RaidIcecrownCitadel","RaidRubySanctum","difficultyNames","DifficultyUnknown","DifficultyNormal","DifficultyHeroic","DifficultyRaid10","DifficultyRaid10H","DifficultyRaid25","DifficultyRaid25H","STATS_LEN","PSEUDOSTATS_LEN","UnitStat","pseudoStat","isStat","isPseudoStat","getPseudoStat","getName","clazz","getProtoValue","proto","allStats","allPseudoStats","fromStat","fromPseudoStat","Stats","initStatsArray","expectedLen","newStats","newStat","statIdx","getUnitStat","withStat","withPseudoStat","withUnitStat","addStat","subtract","scale","computeEP","idx","asArray","fromProto","statsMap","pseudoStatsMap","statsArr","entry","statStr","pseudoStatsArr","pseudoStatstr","unitStats","getWeaponDPS","EquippedItem","_item","_enchant","_gems","numPossibleSockets","numSockets","Gem","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withGemHelper","withGem","curItem","removeGemsWithId","gemId","asActionId","asSpec","meetsSocketBonus","socketBonusStats","requiresExtraSocket","hasExtraGem","hasExtraSocket","isBlacksmithing","allSocketColors","curSocketColors","curGems","g","getProfessionRequirements","profs","getFailedProfessionRequirements","professions","failed","BaseGear","getItemSlots","getEquippedItem","removeUniqueGems","newItem","removeUniqueItems","validateWeaponCombo","newSlot","canDualWield2H","mainHand","offHand","canDW2h","Gear","thisItem","equalsOrBothNull","withEquippedItem","newInternalGear","asMap","getTrinkets","hasTrinket","ei","getAllGems","getNonMetaGems","statsFromGems","getGemsOfColor","getJCGems","getMetaGem","gemColorCounts","red","yellow","blue","hasActiveMetaGem","isMetaGemActive","hasInactiveMetaGem","withoutMetaGem","headItem","withoutBlacksmithSockets","curGear","wristItem","handsItem","hasBluntMHWeapon","weapon","hasSharpMHWeapon","hasBluntOHWeapon","hasSharpOHWeapon","toDatabase","equippedItems","itemToDB","enchantToDB","gemToDB","ItemSwapGear","equipItem","equippedItem","_Database","db","enchantsBySlot","presetEncounters","presetTargets","loadedLeftovers","loadProto","loadPromise","fetch","then","response","leftoverDb","getLeftovers","npc","zone","Promise","resolve","getItems","getEnchants","getGems","getNpc","getZone","getMatchingGems","lookupItemSpec","itemSpec","slots","lookupEquipmentSpec","equipSpec","gearMap","assignedSlot","enchantSpellIdToEffectId","enchantSpellId","glyphItemToSpellId","gid","glyphSpellToItemId","getPresetEncounter","getPresetTarget","getAllPresetEncounters","getAllPresetTargets","getWowheadItemTooltipData","getWowheadSpellTooltipData","getWowheadTooltipData","tooltipPostfix","url","_Entity","ownerName","index","isTarget","isPet","matchAll","parseRegex","Entity","SimLog","params","logIndex","timestamp","activeAuras","toStringPrefix","timestampStr","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","parseAll","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","grouped","curGroup","log","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","isDamage","isHealing","isShielding","resultString","threatPostfix","fromLogString","cause","_DpsLog","damageLogs","damageDealtLogs","groupedDamageLogs","groupDuplicateTimestamps","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","stringToResourceType","ResourceChangedLogGroup","allResourceChangedLogs","resourceChangedLogs","cooldownId","manaCost","castTime","effectiveTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","totalDamage","ddl","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","SimResultData","SimResult","party","units","getPlayers","getUnitWithIndex","getFirstPlayer","getPlayerWithIndex","getPlayerWithRaidIndex","getTargets","getTargetWithIndex","unit","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","forTarget","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","fromLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","populateActiveAuras","majorCooldownAuraUptimeLogs","mcdLog","auraLog","getTargetIndex","maxThreat","pet","getActionsForDisplay","getMeleeActions","getSpellActions","getHealingActions","playerLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","fromPetName","playerMetrics","targetLogs","targetMetrics","numTargets","makeNewTarget","durationSeconds","averageProcs","ppm","removeTag","actionIdOverride","firstAura","AuraMetricsProto","useTag","groupById","aurasToJoin","merge","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","avgCastTimeMs","hpm","totalHealing","manaMetrics","r","healingThroughput","avgCast","avgCastHealing","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","timeSpentCastingMs","lhr","TargetedActionMetricsProto","TypedEvent","listeners","firedEvents","frozenEvents","on","listener","dispose","off","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","func","typedEvents","typedEvent","frozenEvent","nextEventID","newEvent","emitter","Component","parentElem","rootCssClass","rootElem","disposeCallbacks","disposed","customRootElement","addOnDisposeCallback","callback","Input","parent","cssClass","modObject","config","changeEmitter","inputConfig","inline","extraCssClasses","buildLabel","changedEvent","setInputValue","getValue","update","fragment","innerHTML","labelTooltip","children","Tooltip","enableWhen","getInputElem","removeAttribute","showWhen","init","defaultValue","inputChanged","setValue","getInputValue","newValue","ResultComponent","lastSimResult","resultsEmitter","onSimResult","getLastSimResult","ResultsFilter","currentFilter","playerFilter","PlayerFilter","targetFilter","TargetFilter","getFilter","setOptions","setPlayer","newPlayer","setTarget","newTarget","UnitGroupFilter","filterData","allUnitsLabel","getFilterDataValue","setFilterDataValue","allUnitsOption","text","currentOptions","buttonElem","getElementsByClassName","dropdownElem","addEventListener","preventDefault","simResult","getAllUnits","option","makeOption","makeOptionElem","optionContainer","backgroundColor","src","optionData","ColumnSortType","ColumnSortType2","MetricsTable","columnConfigs","onUpdate","tableElem","bodyElem","headerRowElem","columnConfig","headerCell","headerCellClass","columnClass","tippy","content","allowHTML","sortList","sortData","$","tablesorter","cssChildRow","sortMetrics","addRow","metric","rowElem","cellElem","fillCell","getDisplayString","customizeRowElem","addGroup","shouldCollapse","mergedMetrics","mergeMetrics","parentRow","childRows","childRow","expand","row","groupedMetrics","getGroupedMetrics","trigger","getData","iconElem","CastMetricsTable","nameCellConfig","Descending","actionGroups","petGroups","DtpsMeleeMetricsTable","targetActions","DtpsSpellMetricsTable","HealingMetricsTable","MeleeMetricsTable","petsByName","SpellMetricsTable","ResourceMetricsTable","containerElem","childConfig","table","TypedResourceMetricsTable","contains","actionColors","SourceChart","allActionMetrics","chartCanvas","height","width","actionMetric","names","am","totalDmg","bgColors","ctx","getContext","Chart","labels","datasets","plugins","legend","display","position","PlayerDamageMetricsTable","resultsFilter","playerNameCellConfig","chart","placement","onShow","instance","chartContainer","makeChart","setContent","raidDps","maxDps","maxDpsIndex","AuraMetricsTable","useDebuffs","DpsHistogram","chartBounds","getBoundingClientRect","damageMetrics","colors","title","scales","y","beginAtZero","ticks","Timeline","rendered","hiddenIds","hiddenIdsChangeEmitter","postMessage","chartPicker","dpsResourcesPlotElem","rotationPlotElem","updatePlot","dpsResourcesPlot","ApexCharts","foreColor","animations","series","xaxis","noData","stroke","curve","rotationLabels","rotationTimeline","rotationHiddenIdsContainer","toDatetime","getTime","tickAmount","decimalsInFloat","show","formatter","yaxis","beforeResetZoom","tooltipHandlers","custom","seriesIndex","dataPointIndex","updateRotationChart","dpsData","addDpsSeries","addDpsYAxis","tooltipHandler","addManaSeries","addThreatSeries","addMajorCooldownAnnotations","clearRotationChart","addThreatYAxis","updateOptions","dpsAxisMax","ceil","seriesName","axisBorder","axisTicks","minWidth","axisMax","colorOverride","l","dpsTooltip","manaLogs","maxMana","opposite","resourceTooltip","threatTooltip","mcdLogs","mcdAuraLogs","cooldownIconOffsets","mcdIdx","cdLog","cdIdx","distinctMcdAuras","mcdAuraColors","mcdAuraLog","dAura","annotations","x2","fillColor","points","image","offsetY","drawRotationTimeRuler","addResourceRow","buffsById","debuffsById","buffsAndDebuffsById","playerCastsByAbility","getSortedCastsByAbility","addCastRow","buffsToShow","addSeparatorRow","addAuraRow","targetCastsByAbility","debuffsToShow","meleeActionIds","spellActionIds","getActionCategory","fixedCategory","idToCategoryMap","meleeActionId","MELEE_ACTION_CATEGORY","spellActionId","SPELL_ACTION_CATEGORY","DEFAULT_ACTION_CATEGORY","castsByAbility","idsToGroupForRotation","categoryA","categoryB","makeLabelElem","isHiddenLabel","labelElem","labelText","hideElem","hiddenId","updateHidden","labelIcon","makeRowElem","timeToPx","separatorElem","resourceLogs","startValue","resourceLogGroup","resourceElem","left","percentageResources","bgElem","aurasById","castLog","castElem","travelTimeElem","travelTimeStr","tickElem","applyAuraUptimeLogsToRow","aul","auraElem","scl","stacksChangeElem","timeToPxValue","time","canvas","strokeStyle","font","fillStyle","lineWidth","beginPath","moveTo","lineTo","numTicks","textAlign","lineHeight","fillText","includeAuras","damageLog","tooltipLogItem","tooltipAurasSection","maxValue","valToDisplayString","manaChangedLog","valueElem","actionElem","render","setTimeout","Date","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","sim","simResultEmitter","setSimResult","_RaidSimResultsManager","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","isIndividualSim","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","cssScheme","setResultTooltip","resultDivElem","contentElem","getOrCreateInstance","simReferenceSetButton","updateReference","simReferenceSwapButton","freezeAllAndDo","swapEventID","tmpData","simReferenceDeleteButton","querySelector","querySelectorAll","formatToplineResult","resultMetricClasses","res","getMetrics","ref","curMetricsTemp","refMetricsTemp","curMetrics","refMetrics","isDiff","applyZTestTooltip","n1","avg1","stdev1","n2","avg2","stdev2","err1","err2","denom","pow","z","abs","significance_str","getRunData","getCurrentData","getReferenceData","dpsMetrics","dpaspMetrics","tpsMetrics","dtpsMetrics","tmiMetrics","buildResultsLine","average","classes","getResultsLineClasses","outerHTML","dpaspContent","mergedActions","mergedTargetActions","resultMetricCategories","metricsClasses","args","resultsFragment","cod","dur","demo","ToplineResults","noManaSpecs","secondsOOM","percentOOM","DetailedResults","latestRun","currentSimResult","settingsChangeEmitter","updateSettings","defaults","toplineResultsDiv","timeline","getElementById","updateResults","rootDiv","simRunData","toolbar","WindowedDetailedResults","URLSearchParams","search","handleMessage","EmbeddedDetailedResults","simResultsManager","tabWindow","newTabBtn","prepend","getComputedStyle","searchParams","append","closed","open","setSimRunData","focus"],"mappings":"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,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,KAAQF,GAAwB,GAChC,KAAQA,GAAwB,GAChC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GAGjC,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAASF,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQC,GAA0B,GAGlC,MAASD,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAAS,GACT,MAAS,GACT,MAASF,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,GAAMC,GAA0B,GAChC,KAAQA,GAA0B,GAClC,KAAQA,GAA0B,GAGlC,MAASH,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAC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"}